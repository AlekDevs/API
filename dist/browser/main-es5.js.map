{"version":3,"sources":["webpack:///src/app/services/channel.service.ts","webpack:///src/app/pages/home/home.component.ts","webpack:///src/app/pages/home/home.component.html","webpack:///src/app/dashboard/me/friends-list/friends-list.component.html","webpack:///src/app/dashboard/me/friends-list/friends-list.component.ts","webpack:///src/app/dashboard/guilds/member-list/member-list.animations.ts","webpack:///src/app/authentication/sign-up/sign-up.component.html","webpack:///src/app/authentication/sign-up/sign-up.component.ts","webpack:///src/app/dashboard/components/guild-navbar/guild-navbar.component.ts","webpack:///src/app/dashboard/components/guild-navbar/guild-navbar.component.html","webpack:///src/app/dashboard/messages/message/message.component.html","webpack:///src/app/dashboard/messages/message/message.component.ts","webpack:///src/app/services/guild.service.ts","webpack:///src/app/dashboard/text-based-channel.ts","webpack:///src/app/services/events/channel-event.service.ts","webpack:///src/app/pipes/mini-date.pipe.ts","webpack:///src/app/dashboard/components/guild-icon/guild-icon.component.ts","webpack:///src/app/dashboard/components/guild-icon/guild-icon.component.html","webpack:///src/app/utils/zippy/zippy.component.animations.ts","webpack:///src/app/dialog/create-channel/create-channel.component.html","webpack:///src/app/dialog/create-channel/create-channel.component.ts","webpack:///src/environments/environment.ts","webpack:///src/app/dashboard/messages/message-embed/message-embed.component.ts","webpack:///src/app/dashboard/messages/message-embed/message-embed.component.html","webpack:///src/app/services/events/guild-event.service.ts","webpack:///src/app/dashboard/me/user-account/user-account.component.html","webpack:///src/app/dashboard/me/user-account/user-account.component.ts","webpack:///src/app/services/dialog.service.ts","webpack:///src/app/dialog/create-guild/create-guild.component.html","webpack:///src/app/dialog/create-guild/create-guild.component.ts","webpack:///src/app/dashboard/guilds/guild-sidebar/guild-sidebar.component.html","webpack:///src/app/dashboard/guilds/guild-sidebar/guild-sidebar.component.ts","webpack:///src/app/pipes/camel-to-sentence-case.pipe.ts","webpack:///src/app/countdown.pipe.ts","webpack:///src/app/authentication/logout/logout.component.ts","webpack:///src/app/authentication/logout/logout.component.html","webpack:///src/app/guards/dashboard-auth.guard.ts","webpack:///src/app/authentication/sign-up/username.validators.ts","webpack:///src/app/dashboard/me/me-sidebar/me-sidebar.component.html","webpack:///src/app/dashboard/me/me-sidebar/me-sidebar.component.ts","webpack:///src/app/dashboard/components/member-username/member-username.component.html","webpack:///src/app/dashboard/components/member-username/member-username.component.ts","webpack:///src/app/dashboard/guilds/guild-settings/roles/roles.component.html","webpack:///src/app/dashboard/guilds/guild-settings/roles/roles.component.ts","webpack:///src/app/dialog/add-friend/add-friend.component.ts","webpack:///src/app/dialog/add-friend/add-friend.component.html","webpack:///src/app/dashboard/guilds/guild-settings/overview/guild-settings.component.html","webpack:///src/app/dashboard/guilds/guild-settings/overview/guild-settings.component.ts","webpack:///src/app/dashboard/guilds/member-list/member-list.component.ts","webpack:///src/app/dashboard/guilds/member-list/member-list.component.html","webpack:///src/app/pages/developers/application/application.component.html","webpack:///src/app/pages/developers/application/application.component.ts","webpack:///src/app/services/http-wrapper.ts","webpack:///src/app/services/developers.service.ts","webpack:///src/app/pipes/clean-date-time.pipe.ts","webpack:///src/app/dashboard/components/dashboard-navbar/dashboard-navbar.component.ts","webpack:///src/app/dashboard/components/dashboard-navbar/dashboard-navbar.component.html","webpack:///src/app/utils/external-redirect.ts","webpack:///src/app/guards/guild-auth.guard.ts","webpack:///src/app/services/ws.service.ts","webpack:///src/app/dashboard/guilds/text-channel/text-channel.component.ts","webpack:///src/app/dashboard/guilds/text-channel/text-channel.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/services/ping.service.ts","webpack:///src/app/pages/developers/bot-user/bot-user.component.html","webpack:///src/app/pages/developers/bot-user/bot-user.component.ts","webpack:///src/app/authentication/sign-up/password.validators.ts","webpack:///src/app/authentication/auth/auth.component.ts","webpack:///src/app/authentication/auth/auth.component.html","webpack:///src/app/services/sound.service.ts","webpack:///src/app/config.ts","webpack:///src/app/pipes/timestamp.pipe.ts","webpack:///src/app/services/theme.service.ts","webpack:///src/app/pages/why/why.component.ts","webpack:///src/app/pipes/snake-to-sentence-case.pipe.ts","webpack:///src/app/app.module.ts","webpack:///src/app/pages/invite/invite.component.html","webpack:///src/app/pages/invite/invite.component.ts","webpack:///src/app/guards/dmchannel-auth.guard.ts","webpack:///src/app/authentication/verify/verify.component.html","webpack:///src/app/authentication/verify/verify.component.ts","webpack:///src/app/pages/developers/developers.component.html","webpack:///src/app/pages/developers/developers.component.ts","webpack:///src/app/dashboard/components/module-config.ts","webpack:///src/app/dashboard/guilds/guild-overview/guild-overview.component.html","webpack:///src/app/dashboard/guilds/guild-overview/guild-overview.component.ts","webpack:///src/app/dashboard/me/dmchannel/dm.component.ts","webpack:///src/app/dashboard/me/dmchannel/dm.component.html","webpack:///src/app/dashboard/components/channel-tab/channel-tab.component.html","webpack:///src/app/dashboard/components/channel-tab/channel-tab.component.ts","webpack:///src/app/utils/coming-soon/coming-soon.component.ts","webpack:///src/app/utils/coming-soon/coming-soon.component.html","webpack:///src/app/services/events/event.service.ts","webpack:///src/app/pipes/truncated.pipe.ts","webpack:///src/app/dashboard/me/user-settings/user-settings.component.html","webpack:///src/app/dashboard/me/user-settings/user-settings.component.ts","webpack:///src/app/types/entity-types.ts","webpack:///src/app/services/user-auth.service.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/services/log.service.ts","webpack:///src/app/utils/spinner/spinner.component.ts","webpack:///src/app/utils/spinner/spinner.component.html","webpack:///src/app/dashboard/components/sidebar/sidebar.component.html","webpack:///src/app/dashboard/components/sidebar/sidebar.component.ts","webpack:///src/app/material-module.ts","webpack:///src/app/dashboard/components/avatar-url/avatar-url.component.ts","webpack:///src/app/dashboard/components/avatar-url/avatar-url.component.html","webpack:///src/app/dashboard/guilds/voice-channel/voice-channel.component.html","webpack:///src/app/dashboard/guilds/voice-channel/voice-channel.component.ts","webpack:///src/app/cool/lighthouse/lighthouse.component.ts","webpack:///src/app/cool/lighthouse/lighthouse.component.html","webpack:///src/app/authentication/login/login.component.html","webpack:///src/app/authentication/login/login.component.ts","webpack:///src/app/dashboard/guilds/guild-settings/invites/invites.component.html","webpack:///src/app/dashboard/guilds/guild-settings/invites/invites.component.ts","webpack:///src/app/utils/utils.ts","webpack:///src/app/dashboard/guilds/guild-settings/bot-list/bot-list.component.html","webpack:///src/app/dashboard/guilds/guild-settings/bot-list/bot-list.component.ts","webpack:///src/app/services/events/my-event.service.ts","webpack:///src/app/dashboard/components/settings-sidebar/settings-sidebar.component.html","webpack:///src/app/dashboard/components/settings-sidebar/settings-sidebar.component.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/dashboard/components/save-changes/save-changes.component.ts","webpack:///src/app/dashboard/components/save-changes/save-changes.component.html","webpack:///src/app/dialog/profile/profile.component.html","webpack:///src/app/dialog/profile/profile.component.ts","webpack:///src/app/guards/can-deactivate-dashboard.guard.ts","webpack:///src/app/dashboard/me/me-overview/me-overview.component.html","webpack:///src/app/dashboard/me/me-overview/me-overview.component.ts","webpack:///src/app/services/invite.service.ts","webpack:///src/app/services/permissions.service.ts","webpack:///src/app/services/message.service.ts","webpack:///src/app/dashboard/components/user-config.ts","webpack:///src/app/pages/not-found/not-found.component.ts","webpack:///src/app/pages/not-found/not-found.component.html","webpack:///src/app/pipes/duration-string.pipe.ts","webpack:///src/app/utils/zippy/zippy.component.ts","webpack:///src/app/utils/zippy/zippy.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/guards/developers-auth.guard.ts","webpack:///src/app/cool/submarine/submarine.component.ts","webpack:///src/app/cool/submarine/submarine.component.html","webpack:///src/app/utils/waves/waves.component.ts","webpack:///src/app/utils/waves/waves.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/dialog/create-invite/create-invite.component.ts","webpack:///src/app/dialog/create-invite/create-invite.component.html"],"names":["ChannelService","http","ws","guildService","userService","endpoint","typingUserIds","Map","_arr","guilds","flatMap","c","channels","concat","filter","type","recipientId","dmChannels","find","memberIds","includes","self","_id","channelId","userId","getTyping","push","setTimeout","stopTyping","channelUsers","index","indexOf","splice","get","set","channel","getCached","id","HomeComponent","version","document","title","users","FriendsListComponent","channelService","ignored","userIds","map","friends","f","status","username","emitAsync","friendId","friend","friendRequestIds","widthExpandCollapse","width","SignUpComponent","route","router","auth","usernameValidators","form","required","minLength","maxLength","pattern","shouldBeUnique","bind","password","confirmPassword","validators","passwordsShouldMatch","snapshot","queryParamMap","user","value","invalid","signUp","login","navigate","redirect","toggleMemberList","GuildNavbarComponent","$event","stopPropagation","dialog","MessageComponent","log","perms","isExtra","contextMenuPosition","x","y","_isEditing","div","newMessage","nativeElement","focus","guild","roleId","member","roleIds","length","roles","r","color","date","Date","message","createdAt","toString","slice","querySelector","updatedAt","toLocaleString","isEditing","content","getRole","getUser","getAsync","getMention","html","condition","recipientHasRole","getMember","some","discordCallback","node","role","name","everyone","here","author","selfIsAuthor","can","authorId","embed","emit","messageId","partialMessage","withEmbed","remove","on","success","shiftKey","code","Boolean","edit","innerText","event","menuTrigger","preventDefault","clientX","clientY","menu","focusFirstItem","openMenu","GuildService","distinctBy","g","guildId","members","m","memberId","ownerId","headers","toPromise","botId","confirmation","confirm","kick","TextBasedChannel","messageService","pings","sounds","messageBatchSize","chatBox","emojiPickerOpen","ready","lastTypedAt","messages","getRecipient","recipient","paramMap","subscribe","init","markAsRead","getAllAsync","scrollToMessage","timeout","height","scrollHeight","scrollTop","trim","firstNewLines","lastNewLines","replace","messageInput","loadedAllMessages","overrideFetchAll","start","end","lastIndex","Math","max","lastMessage","msDifference","getTime","minsAgo","maxTimeDifference","sinceLastTyped","emoji","path","pickerClicked","n","nodeName","classList","contains","item","ChannelEventService","args","ping","overrideAdd","getAllCached","findIndex","startTyping","MiniDatePipe","dateString","getDate","getMonth","GuildIconComponent","dialogs","size","unknownImageURL","image","img","onerror","src","expandCollapse","padding","CreateChannelComponent","dialogRef","data","textChannelName","processing","partialChannel","close","create","environment","docsURL","production","rootEndpoint","githubURL","MessageEmbedComponent","GuildEventService","partialRole","newUser","add","partialMember","oldMember","getMemberInGuild","partialGuild","upsert","UserAccountComponent","userAuthService","passwordForm","oldPassword","newPassword","newPasswordShouldNotMatch","processingEmail","processingPassword","email","emailInUse","buildForm","sendVerifyEmail","setErrors","invalidEmail","error","verified","TypeError","changePassword","oldPasswordInvalid","DialogService","open","CreateGuildComponent","inviteCode","inviteInput","joinGuild","GuildSidebarComponent","loaded","inGuild","getSelfMember","returnFromGuild","CamelToSentenceCasePipe","words","CountdownPipe","LogoutComponent","localStorage","removeItem","updateSelf","fetchAll","DashboardAuthGuard","already","state","canActivate","navigateByUrl","url","join","UsernameValidators","control","checkUsername","isTaken","checkEmail","inUse","MeSidebarComponent","MemberUsernameComponent","withAvatar","voice","lastRole","getDM","rolesInput","v","noChange","JSON","stringify","setValue","RolesComponent","snackbar","presetColors","description","general","text","permissionType","Object","keys","All","selectedRole","permissions","formGroupName","permissionsForm","key","hasPermission","General","Text","Voice","selectRole","reset","permissionGroup","valueChanges","openSaveChanges","disabled","isEveryone","hoisted","mentionable","perm","group","Number","parseInt","setControl","defaultPermissions","hasPerm","updateRole","patchValue","AddFriendComponent","addFriendForm","sendFriendRequest","GuildSettingsComponent","iconURL","MemberListComponent","isExpanded","_expanded","ApplicationComponent","saveChanges","service","appId","app","originalForm","valueChanges$","unsubscribe","saveChanges$","snackBarRef","_openedSnackBarRef","valid","openFromComponent","afterOpened","component","instance","onSave","submit","onReset","update","alert","HTTPWrapper","Authorization","getItem","arr","i","fetch","val","has","existing","DevelopersService","patch","CleanDateTimePipe","hours","getHours","padStart","minutes","getMinutes","day","month","getFullYear","DashboardNavbarComponent","externalRedirect","RedirectComponent","window","location","href","GuildAuthGuard","next","defaultChannel","WSService","socket","connect","secure","listened","once","console","reload","eventName","callback","componentName","nameOf","eventString","listener","info","call","params","Promise","resolve","reject","constructor","TextChannelComponent","AppComponent","eventService","themeService","updateTheme","handlePrompt","consoleWarning","interval","setInterval","isOpen","clearInterval","PingService","unread","lastMessageId","channelIds","guildIds","BotUserComponent","avatarURL","token","partialUser","regenToken","navigator","clipboard","writeText","PasswordValidators","passwordMismatch","passwordMatch","emailOrUsernameRequired","AuthComponent","setItem","SoundService","playSound","sfxEnabled","audio","createElement","setAttribute","onended","play","defaultValues","memberListExpanded","theme","currentValue","getConfig","getConfigValue","setConfig","TimestampPipe","ThemeService","WhyComponent","SnakeToSentenceCasePipe","split","w","toLowerCase","AlertErrorHandler","stack","method","body","AppModule","provide","useClass","withServerTransition","InviteComponent","invites","invite","DMChannelAuthGuard","dmChannelExists","VerifyComponent","authService","verify","invalidCode","DevelopersComponent","applications","toUpperCase","ModuleConfig","originalGuild","resetForm","deleteGuild","array","input","GuildOverviewComponent","activeChannel","DMComponent","ChannelTabComponent","ComingSoonComponent","EventService","me","addFriend","addChannel","deleteChannel","addMember","updateMember","removeMember","createRole","deleteRole","addMessage","updateMessage","deleteMessage","updatePresence","updateFriends","updateUser","TruncatedPipe","substring","themes","UserSettingsComponent","previewMessages","avatarNames","messageCount","lorem","sentence","themeSelect","writeValue","defaultTheme","enabled","PermissionTypes","VIEW_CHANNELS","CREATE_INVITE","SEND_MESSAGES","READ_MESSAGES","ADD_REACTIONS","CONNECT","SPEAK","UserTypes","Ignored","patterns","hexColor","snowflake","UserAuthService","expired","isTokenExpired","post","res","NavbarComponent","LogService","hidePopupMs","toTimeString","hhMMSS","popup","removeAttribute","toggleAttribute","SpinnerComponent","SidebarComponent","icon","toggle","drawer","MaterialModule","AvatarUrlComponent","VoiceChannelComponent","LighthouseComponent","LoginComponent","invalidLogin","loginWith","toggleLoginWith","InvitesComponent","getInvites","hookWSEvents","options","maxUses","uses","toIterable","camelToSentenceCase","regex","sentenceToCamelCase","capitalized","match","kebabToCamelCase","capital","charAt","generateUsername","adjective","noun","uuid","s4","floor","random","Array","fill","timestamp","getDaysAgo","toJSON","reverse","days","ascendingBy","a","b","descendingBy","BotListComponent","dev","selectedApp","apps","addBot","MyEventService","sender","dmChannel","SettingsSidebarComponent","tabs","permission","MANAGE_GUILD","MANAGE_ROLES","onkeyup","tabType","tab","UserService","friendIds","isOutgoing","u","SaveChangesComponent","snackBar","dismiss","save","ProfileComponent","otherFriendIds","otherGuilds","ug","og","CanDeactivateDashboard","currentRoute","currentState","nextState","DashboardOverviewComponent","InviteService","PermissionsService","getTotalPerms","reduce","acc","totalPerms","ADMINISTRATOR","userMember","isHigher","canManage","selfMember","joinedRoles","highestRole","MessageService","cached","undefined","from","values","flat","query","UserConfig","originalUser","parse","assign","NotFoundComponent","DurationStringPipe","seconds","ZippyComponent","expanded","routes","canDeactivate","redirectTo","AppRoutingModule","forRoot","initialNavigation","relativeLinkResolution","DevelopersAuthGuard","queryParams","SubmarineComponent","WavesComponent","inverted","addEventListener","bootstrapModule","err","webpackEmptyAsyncContext","req","then","e","Error","module","exports","CreateInviteComponent","recentlyUpdated","min","expiresAt","copyToClipboard"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { environment } from 'src/environments/environment';\nimport { ChannelTypes, Lean } from '../types/entity-types';\nimport { GuildService } from './guild.service';\nimport { HTTPWrapper } from './http-wrapper';\nimport { UserService } from './user.service';\nimport { WSService } from './ws.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ChannelService extends HTTPWrapper<Lean.Channel> {\n  protected endpoint = `${environment.endpoint}/channels`;\n  public typingUserIds = new Map<string, string[]>();\n  \n  protected _arr: Lean.Channel[] = [];\n  public get channels(): Lean.Channel[] {\n    return this._arr = this.guildService.guilds\n      .flatMap(c => c.channels)\n      .concat(this._arr);\n  }\n  public get dmChannels(): ChannelTypes.DM[] {\n    return this.channels.filter(c => c.type === 'DM') as ChannelTypes.DM[];\n  }\n\n  constructor(\n    http: HttpClient,\n    ws: WSService,\n    private guildService: GuildService,\n    private userService: UserService,\n  ) { super(http, ws); }\n\n  public getDM(recipientId: string): ChannelTypes.DM {\n    return this.dmChannels.find(c =>c.memberIds.includes(recipientId)\n      && c.memberIds.includes(this.userService.self._id));\n  }\n\n  public startTyping(channelId: string, userId: string) {\n    // const isSelf = this.userService.self._id === userId;\n    // if (isSelf) return;\n\n    this.getTyping(channelId).push(userId);\n\n    setTimeout(() => this.stopTyping(channelId, userId), 5.1 * 1000);\n  }\n  public stopTyping(channelId: string, userId: string) {\n    const channelUsers = this.getTyping(channelId);\n    const index = channelUsers.indexOf(userId);\n\n    channelUsers.splice(index, 1);\n  }\n  public getTyping(channelId: string) {\n    return this.typingUserIds.get(channelId)\n      ?? this.typingUserIds\n        .set(channelId, [])\n        .get(channelId);\n  }\n\n  public getRecipient(channelId: string) {\n    const channel = this.getCached(channelId);\n    const recipientId = channel.memberIds\n      .find(id => id !== this.userService.self._id);\n    return this.userService.getCached(recipientId);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css', './home.component.mobile.css']\r\n})\r\nexport class HomeComponent {\r\n  version = environment.version;\r\n\r\n  constructor() {\r\n    document.title = 'Accord - Like Discord, But Customizable';\r\n  }\r\n}\r\n","<navbar></navbar>\r\n\r\n<header class=\"container\">\r\n  <div class=\"jumbotron\">\r\n    <h1 class=\"display-4\">Chat With Ease</h1>\r\n    <p class=\"lead\">\r\n      Seamlessly chat with friends within seconds. <br>\r\n      Accord is easy to use, and customizable.\r\n    </p>\r\n    <button routerLink=\"/login\" class=\"bg-success text-dark\" mat-button>Get Started</button>\r\n    <a href=\"#features\">\r\n      <button class=\"bg-info ml-2 text-light\" mat-button>Features</button>\r\n    </a>\r\n  </div>\r\n</header>\r\n\r\n<waves></waves>\r\n<section id=\"features\" class=\"main\">\r\n  <div class=\"container\">\r\n    <div class=\"text-center\">\r\n      <h2 class=\"display-4\">\r\n        <span class=\"text-muted\">Ditch </span>\r\n        <span class=\"text-light\">Discord</span>\r\n        <span class=\"text-secondary\">, Go </span>\r\n        <span>Accord</span>\r\n        <span class=\"text-muted\">.</span>\r\n      </h2>\r\n      <p class=\"lead\"></p>\r\n    </div>\r\n    <hr>\r\n  \r\n    <div class=\"row\">\r\n      <div class=\"mt-5 col-md-6 col-sm-12\">\r\n        <mat-card class=\"bg-transparent shadow-none\">\r\n          <img\r\n            src=\"assets/img/home/themes.webp\"\r\n            alt=\"Themes\"\r\n            mat-card-image>\r\n          <mat-card-title>\r\n            <i class=\"lni lni-paint-roller\"></i>\r\n            <span> Customize to Your <strong>Accord</strong></span>\r\n          </mat-card-title>\r\n          <mat-card-subtitle>Choose from a wide range of premade themes to customize your experience.</mat-card-subtitle>\r\n        </mat-card>\r\n      </div>\r\n    \r\n      <div class=\"mt-5 col-md-6 col-sm-12\">\r\n        <mat-card class=\"bg-transparent shadow-none\">\r\n          <img\r\n            src=\"assets/img/home/manage_guilds.webp\"\r\n            alt=\"Themes\"\r\n            mat-card-image>\r\n          <mat-card-title>\r\n            <i class=\"fas fa-hashtag\"></i> \r\n            <span> Manage Your Guilds</span>\r\n          </mat-card-title>\r\n          <mat-card-subtitle>Manage your guilds to your accord, and chat with your friends, or others.</mat-card-subtitle>\r\n        </mat-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <hr>\r\n\r\n  <div class=\"col-12\">\r\n    <div class=\"d-flex justify-content-center\">\r\n      <button\r\n        routerLink=\"/login\"\r\n        class=\"bg-success text-dark\"\r\n        mat-button>Get Started</button>\r\n    </div>\r\n  </div>\r\n\r\n  <app-submarine></app-submarine>\r\n</section>\r\n  \r\n<footer>\r\n  <span>&copy; 2021 accord.app</span>\r\n  <span class=\"float-right text-secondary cursor-pointer\">{{ version }}</span>\r\n</footer>","<div class=\"px-4\">\r\n  <div [ngSwitch]=\"tab\">\r\n    <div *ngSwitchCase=\"'ONLINE'\">\r\n      <div class=\"category pl-0 mb-2\">Online—{{ onlineFriends.length }}</div>\r\n      \r\n      <div *ngFor=\"let friend of onlineFriends\">\r\n        <div class=\"float-right\">\r\n          <button\r\n            [routerLink]=\"'/channels/@me/' + channelService.getDM(friend._id)?._id\"\r\n            matTooltip=\"Message\"\r\n            class=\"round px-0\" mat-button>\r\n            <i class=\"lni lni-bubble\"></i>\r\n          </button>\r\n          <button\r\n            matTooltip=\"Remove Friend\"\r\n            (click)=\"remove(friend._id)\"\r\n            class=\"round px-0 ml-2\" mat-button><i class=\"lni lni-close\"></i></button>\r\n        </div>\r\n        <member-username\r\n          [routerLink]=\"'/channels/@me/' + channelService.getDM(friend._id)?._id\"\r\n          [user]=\"users.getCached(friend._id)\"></member-username>\r\n      </div>\r\n      <div\r\n        *ngIf=\"users.friends.length <= 0\"\r\n        class=\"text-muted\">\r\n        <i class=\"fas fa-info-circle mr-2\"></i>\r\n        <span>No friends online.</span>\r\n      </div>  \r\n    </div>\r\n    \r\n    <div *ngSwitchCase=\"'ALL'\">\r\n      <div class=\"category pl-0 mb-2\">All—{{ users.friends.length }}</div>\r\n\r\n      <div *ngFor=\"let friend of users.friends\">\r\n        <div class=\"float-right\">\r\n          <button\r\n            [routerLink]=\"'/channels/@me/' + channelService.getDM(friend._id)?._id\"\r\n            matTooltip=\"Message\"\r\n            class=\"round px-0\" mat-button>\r\n            <i class=\"lni lni-bubble\"></i>\r\n          </button>\r\n          <button\r\n            matTooltip=\"Remove Friend\"\r\n            (click)=\"remove(friend._id)\"\r\n            class=\"round px-0 ml-2\" mat-button><i class=\"lni lni-close\"></i></button>\r\n        </div>\r\n        <member-username [user]=\"users.getCached(friend._id)\"></member-username>\r\n      </div>\r\n\r\n      <div\r\n        *ngIf=\"users.friends.length <= 0\"\r\n        class=\"text-muted\">\r\n        <i class=\"fas fa-info-circle mr-2\"></i>\r\n        <span>No friends here yet.</span>\r\n      </div>  \r\n    </div>\r\n     \r\n    <div *ngSwitchCase=\"'PENDING'\">\r\n      <div class=\"category pl-0 mb-2\">Pending—{{ users.friendRequests.length }}</div>\r\n\r\n      <div *ngFor=\"let friend of users.friendRequests\">\r\n        <div class=\"float-right\">\r\n          <button\r\n            *ngIf=\"!isOutgoing(friend)\"\r\n            (click)=\"add(friend.username)\"\r\n            class=\"round bg-success px-0\" mat-button>\r\n            <i class=\"lni lni-checkmark-circle\" aria-hidden=\"true\"></i>\r\n          </button>\r\n\r\n          <button\r\n            (click)=\"remove(friend._id)\"\r\n            class=\"round px-0 ml-2\" mat-button>\r\n            <i class=\"lni lni-close\"></i>\r\n          </button>\r\n        </div>\r\n        \r\n        <span class=\"badge badge-secondary\">{{ isOutgoing(friend) ? 'OUTGOING' : 'INCOMING' }}</span>\r\n        <member-username\r\n          [user]=\"friend\"\r\n          [statusOverride]=\"isOutgoing(friend) ? 'Outgoing Friend Request' : 'Incoming Friend Request'\"></member-username>\r\n      </div>\r\n        \r\n      <div\r\n        *ngIf=\"users.friendRequests.length <= 0\"\r\n        class=\"text-muted\">\r\n        <i class=\"fas fa-info-circle mr-2\"></i>\r\n        <span>No friend requests sent.</span>\r\n      </div>\r\n    </div>\r\n       \r\n    <div *ngSwitchCase=\"'BLOCKED'\">\r\n      <div class=\"category pl-0 mb-2\">Blocked—{{ blockedUsers.length }}</div>\r\n\r\n      <div *ngFor=\"let user of blockedUsers\">\r\n        <div class=\"float-right\">\r\n          <i (click)=\"users.unblock(user._id)\"\r\n            matTooltip=\"Unblock\"\r\n            class=\"cursor-pointer lni lni-close\"></i>\r\n        </div>\r\n        <member-username [user]=\"user\"></member-username>\r\n      </div>\r\n\r\n      <div\r\n        *ngIf=\"blockedUsers.length <= 0\"\r\n        class=\"text-muted\">\r\n        <i class=\"fas fa-info-circle mr-2\"></i>\r\n        <span>No blocked users.</span>\r\n      </div>      \r\n    </div>\r\n  </div>\r\n</div>","import { Component, Input } from '@angular/core';\nimport { ChannelService } from 'src/app/services/channel.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'friends-list',\n  templateUrl: './friends-list.component.html',\n  styleUrls: ['./friends-list.component.css']\n})\nexport class FriendsListComponent {\n  @Input() public tab: TabType;\n\n  public get blockedUsers() {\n    return this.users.self.ignored?.userIds\n      ?.map(id => this.users.getCached(id));\n  }\n  public get onlineFriends() {\n    return this.users.friends.filter(f => f.status !== 'OFFLINE');\n  }\n\n  constructor(\n    public channelService: ChannelService,\n    public users: UserService,\n    private ws: WSService,\n  ) {}\n\n  public async add(username: string) {\n    await this.ws.emitAsync('ADD_FRIEND', { username }, this);\n  }\n  public async remove(friendId: string) {\n    await this.ws.emitAsync('REMOVE_FRIEND', { friendId }, this);\n  }\n\n  public isOutgoing(friend: Lean.User) {\n    return this.users.self.friendRequestIds.includes(friend._id);\n  }\n}\n\nexport type TabType = 'ONLINE' | 'ALL' | 'PENDING' | 'BLOCKED';\n","import { style, state, trigger, animate, transition } from '@angular/animations';\r\n\r\nexport const widthExpandCollapse = trigger('expandCollapse', [\r\n  state('collapsed', style({ width: '0px' })),\r\n  state('expanded', style({ width: '100%' })),\r\n  transition('collapsed <=> expanded', [ animate('300ms ease') ]),\r\n]);\r\n","<navbar></navbar>\n<section class=\"container text-center pb-5\">\n  <div class=\"py-2 mt-5 d-none d-sm-block\"></div>\n\n  <div class=\"text-info mt-5\">\n    <i class=\"fas fa-info-circle text-info\"></i>\n    Max users have been reached for Alpha testing and sign-up may be available in the near future.\n    <br>If you cannot sign-up then this is why.\n  </div>\n\n  <form\n    #f=\"ngForm\"\n    [formGroup]=\"form\"\n    (ngSubmit)=\"signUp()\"\n    class=\"mt-5\">\n    <h2 class=\"display-4 mb-4\">Sign Up</h2>\n    <div class=\"form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label for=\"username\">Username</mat-label>\n        <input formControlName=\"username\"\n          id=\"username\" type=\"text\" autocomplete=\"username\" matInput>\n        <mat-hint *ngIf=\"username.pending\"><i class=\"lni lni-circle-notch fa-spin\"></i> Checking</mat-hint>\n        <mat-error *ngIf=\"username.errors?.required\">Username is required.</mat-error>\n        <mat-error *ngIf=\"username.errors?.minlength\">Username should be minimum {{ username.errors.minlength.requiredLength }} characters.</mat-error>\n        <mat-error *ngIf=\"username.errors?.shouldBeUnique\">Username is already taken.</mat-error>\n        <mat-error *ngIf=\"username.errors?.pattern\">Username should follow the <a routerLink=\"/docs/usernames\">username rules</a>.</mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label for=\"password\">Password</mat-label>\n        <input formControlName=\"password\"\n          id=\"password\" type=\"password\" autocomplete=\"new-password\" matInput>\n        <mat-hint>Minimum 8 characters.</mat-hint>\n        <mat-error *ngIf=\"password.errors?.required\">Password is required.</mat-error>\n        <mat-error *ngIf=\"password.errors?.minlength\">Password should be minimum {{ password.errors.minlength.requiredLength }} characters.</mat-error>\n        <mat-error *ngIf=\"password.errors?.pattern?.requiredPattern === '/(?=.*[a-z])/gm'\">Password should include lowercase characters.</mat-error>\n        <mat-error *ngIf=\"password.errors?.pattern?.requiredPattern === '/(?=.*[A-Z])/gm'\">Password should include uppercase characters.</mat-error>\n        <mat-error *ngIf=\"password.errors?.pattern?.requiredPattern === '/(?=.*[0-9])/gm'\">Password should include numbers.</mat-error>\n        <mat-error *ngIf=\"password.errors?.pattern?.requiredPattern === '/(?=.*[!@#$%^&*])/gm'\">Password should include symbols.</mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label for=\"confirmPassword\">Confirm Password</mat-label>\n        <input formControlName=\"confirmPassword\"\n          id=\"confirmPassword\" type=\"password\"  autocomplete=\"new-password\" matInput>\n        <mat-hint>Repeat password.</mat-hint>\n        <mat-error *ngIf=\"confirmPassword.errors?.required\">Confirm Password is required.</mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"agreed\"></label>\n      <mat-checkbox id=\"agreed\" class=\"mr-2\" #agreed></mat-checkbox>\n      <span>I agree to the <a href=\"https://docs.accord.app/legal/alpha\">Alpha Terms</a>, <a routerLink=\"/terms\">TOS</a>, and <a routerLink=\"/privacy\">privacy policy</a>.</span>\n    </div>\n\n    <div\n      *ngIf=\"form.errors\"\n      class=\"mb-4\">\n      <span\n        *ngIf=\"form.get('confirmPassword').dirty && form.errors?.passwordMismatch\"\n        class=\"text-warning rounded alert border-warning\">Passwords should match.</span>\n    </div>\n\n    <button\n      [disabled]=\"!agreed.checked\"\n      class=\"bg-primary text-center\"\n      type=\"submit\"\n      mat-button>Sign Up</button>\n  </form>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Credentials, UserAuthService } from '../../services/user-auth.service';\nimport { PasswordValidators } from './password.validators';\nimport { UsernameValidators } from './username.validators';\nimport { hacker } from 'faker';\nimport { UserService } from '../../services/user.service';\nimport { patterns } from 'src/app/types/entity-types';\nimport { generateUsername } from 'src/app/utils/utils';\n\n@Component({\n  selector: 'sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})\nexport class SignUpComponent {\n  public form = new FormGroup({\n    username: new FormControl(generateUsername(), [\n      Validators.required,\n      Validators.minLength(2),\n      Validators.maxLength(32),\n      Validators.pattern(patterns.username),\n    ], this.usernameValidators.shouldBeUnique.bind(this.usernameValidators)),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.pattern(patterns.password),\n    ]),\n    confirmPassword: new FormControl('', Validators.required)\n  }, { validators: PasswordValidators.passwordsShouldMatch });\n\n  public get username() { return this.form.get('username'); }\n  public get password() { return this.form.get('password'); }\n  public get confirmPassword() { return this.form.get('confirmPassword'); }\n\n  public get redirect() {\n    return this.route.snapshot.queryParamMap.get('redirect')\n      ?? '/channels/@me';\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private auth: UserAuthService,\n    private usernameValidators: UsernameValidators,\n  ) {}\n\n  public async signUp() {\n    const user: Credentials = this.form.value;\n    if (this.form.invalid) return;\n\n    await this.auth.signUp(user);\n    await this.auth.login(user);\n    await this.router.navigate([this.redirect]);\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { getConfig } from 'src/app/config';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-guild-navbar',\n  templateUrl: './guild-navbar.component.html',\n  styleUrls: ['./guild-navbar.component.css'],\n})\nexport class GuildNavbarComponent {\n  @Input() public activeChannel: Lean.Channel;\n  @Input() public guild: Lean.Guild;\n  @Output() public toggleMemberList = new EventEmitter();\n  \n  public get memberIcon() {\n    return (getConfig('memberListExpanded'))\n      ? 'lni-users'\n      : 'lni-users text-muted';\n  }\n}\n","<dashboard-navbar *ngIf=\"guild\">\n  <strong>{{ guild.name }}</strong>\n  \n  <span *ngIf=\"activeChannel\">\n    <i class=\"lni lni-chevron-right mx-2\"></i>\n    <i class=\"fas fa-hashtag text-muted pr-1\"></i>\n    <strong>{{ activeChannel.name }}</strong>\n  </span>\n\n  <div class=\"float-right\">\n    <i (click)=\"toggleMemberList.emit()\"\n      matTooltip=\"Toggle Members\"\n      class=\"lni cursor-pointer\"\n      [class]=\"memberIcon\"></i>\n  </div>\n</dashboard-navbar>","<div\r\n  *ngIf=\"author\"\r\n  #menuTrigger=\"matMenuTrigger\"\r\n  [matMenuTriggerFor]=\"contextMenu\"\r\n  (contextmenu)=\"openMenu($event, menuTrigger)\">\r\n  <div\r\n    *ngIf=\"!isExtra; else extraMessage\"\r\n    [id]=\"'message-' + message._id\"\r\n    (click)=\"$event.stopPropagation()\">\r\n    <div\r\n      class=\"message-group\"\r\n      [ngClass]=\"{ 'd-mention': isMentioned }\">\r\n      <app-avatar-url\r\n        (click)=\"dialog.profile({ user: author })\"\r\n        matTooltip=\"View Profile\"\r\n        size=\"40px\"\r\n        [user]=\"(avatarURL) ? { username: author.username, avatarURL: avatarURL } : author\"></app-avatar-url>\r\n      <div class=\"comment\">\r\n        <div class=\"message first\">\r\n          <h2 style=\"line-height: 16px;\">\r\n            <span class=\"username-wrapper v-btm\">\r\n              <strong\r\n                [style.color]=\"roleColor\"\r\n                class=\"username\">{{ author.username }}</strong>\r\n              <div *ngIf=\"author.bot && author.username !== '2PG'\"\r\n                class=\"username-badge badge badge-secondary ml-1\">BOT</div>\r\n              <div *ngIf=\"author.bot && author.username === '2PG'\"\r\n                class=\"username-badge badge badge-secondary ml-1\">SYSTEM</div>\r\n            </span>\r\n            <span class=\"highlight-separator\"> - </span>\r\n            <span class=\"timestamp\">{{ message.createdAt | timestamp }}</span>\r\n            <ng-container *ngTemplateOutlet=\"edited\"></ng-container>\r\n          </h2>\r\n\r\n          <ng-container *ngTemplateOutlet=\"messageContent\"></ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #extraMessage>\r\n  <div\r\n    [id]=\"'message-' + message._id\"\r\n    class=\"extra-message\"\r\n    [ngClass]=\"{ 'd-mention': isMentioned }\"\r\n    (click)=\"$event.stopPropagation()\">\r\n    <span class=\"content\">\r\n      <span\r\n        class=\"timestamp no-select\"\r\n        [matTooltip]=\"message.createdAt\">\r\n        <span>{{ timeString }}</span>\r\n        <ng-container *ngTemplateOutlet=\"edited\"></ng-container>\r\n      </span>\r\n      <ng-container *ngTemplateOutlet=\"messageContent\"></ng-container>\r\n    </span>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #edited>\r\n  <span\r\n    *ngIf=\"message.updatedAt\"\r\n    [matTooltip]=\"'Edited - ' + updatedAt\"\r\n    class=\"edit-indicator cursor-pointer ml-1\"\r\n    #edited>\r\n    <i class=\"lni lni-pencil-alt text-muted\"></i>\r\n  </span>\r\n</ng-template>\r\n\r\n<ng-template #messageContent>\r\n  <div\r\n    (keydown)=\"toggleEditing($event)\"\r\n    [contentEditable]=\"isEditing && canManage\"\r\n    [innerHtml]=\"processed\"\r\n    class=\"message-text d-inline\"\r\n    #newMessage>\r\n  </div>\r\n\r\n  <message-embed\r\n    (close)=\"removeEmbed()\"\r\n    [canManage]=\"canManage\"\r\n    [message]=\"message\"></message-embed>\r\n</ng-template>\r\n\r\n<mat-menu\r\n  [style.left]=\"contextMenuPosition.x\"\r\n  [style.top]=\"contextMenuPosition.y\"\r\n  #contextMenu>\r\n  <h6 class=\"p-2 text-center overflow-hidden context-content\"\r\n    [innerHTML]=\"processed\"></h6>\r\n\r\n  <div\r\n    *ngIf=\"canManage && author?._id === userService.self._id\">\r\n    <button\r\n      (click)=\"toggleEditing()\"\r\n      mat-menu-item>\r\n      <i class=\"lni lni-pencil-alt text-warning mr-1\"></i>\r\n      <span>{{ (isEditing) ? 'Finish Editing' : 'Edit' }}</span>\r\n    </button>\r\n  </div>\r\n  <div *ngIf=\"canManage\">\r\n    <button\r\n      (click)=\"delete()\"\r\n      mat-menu-item>\r\n      <i class=\"lni lni-close text-danger mr-1\"></i>\r\n      <span>Delete</span>\r\n    </button>\r\n  \r\n    <hr>\r\n  </div>\r\n\r\n  <div (click)=\"$event.stopPropagation()\" class=\"p-2\">\r\n    <i class=\"lni lni-dev\"></i>\r\n    <code> {{ message._id }}</code>\r\n  </div>\r\n</mat-menu>\r\n","import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatMenu, MatMenuTrigger } from '@angular/material/menu';\r\nimport { toHTML } from 'discord-markdown';\r\nimport { textEmoji } from 'markdown-to-text-emoji';\r\nimport { ProfileComponent } from 'src/app/dialog/profile/profile.component';\r\nimport { DialogService } from 'src/app/services/dialog.service';\r\nimport { GuildService } from 'src/app/services/guild.service';\r\nimport { LogService } from 'src/app/services/log.service';\r\nimport { PermissionsService } from 'src/app/services/permissions.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { WSService } from 'src/app/services/ws.service';\r\nimport { Lean } from 'src/app/types/entity-types';\r\n\r\n@Component({\r\n  selector: 'message',\r\n  templateUrl: './message.component.html',\r\n  styleUrls: ['./message.component.css']\r\n})\r\nexport class MessageComponent implements OnInit {\r\n  @Input() public message: Lean.Message;\r\n  @Input() public isExtra = false;\r\n  @Input() public guild: Lean.Guild;\r\n  @Input() public member: Lean.GuildMember;\r\n  @Input() public avatarURL: string;\r\n\r\n  @ViewChild('newMessage')\r\n  public newMessage: ElementRef;\r\n  @ViewChild('contextMenu')\r\n  public contextMenu: MatMenu;\r\n\r\n  public embed: MessageEmbed;\r\n  public contextMenuPosition = { x: '0px', y: '0px' };\r\n  public author: Lean.User;\r\n\r\n  private _isEditing = false;\r\n  public get isEditing() {\r\n    return this._isEditing;\r\n  }\r\n  public set isEditing(value: boolean) {\r\n    this._isEditing = value;\r\n    const div: HTMLDivElement = this.newMessage.nativeElement;\r\n    if (value) div.focus();\r\n  }\r\n  \r\n  public get roleColor(): string {\r\n    if (!this.guild) return;\r\n\r\n    const roleId = this.member?.roleIds[this.member?.roleIds.length - 1];\r\n    return this.guild.roles.find(r => r._id == roleId)?.color;\r\n  }\r\n  \r\n  public get timeString() {\r\n    const date = new Date(this.message.createdAt);\r\n    return `${date.toString().slice(16, 21)}`;\r\n  }\r\n\r\n  public get isMentioned() {\r\n    return document.querySelector(`#message-${this.message._id} .self-mention`);\r\n  }\r\n\r\n  public get updatedAt() {\r\n    return new Date(this.message.updatedAt)?.toLocaleString();\r\n  }\r\n\r\n  public get processed() {\r\n    if (this.isEditing) return this.message.content;\r\n\r\n    const getRole = (id: string) => this.guild?.roles.find(r => r._id === id);\r\n    const getUser = (id: string) => this.userService.getAsync(id);\r\n\r\n    const getMention = (html: string, condition: boolean) => {\r\n      return (condition)\r\n        ? `<span matTooltip=\"test\" class=\"self-mention\">${html}</span>`\r\n        : html;\r\n    };\r\n\r\n    const recipientHasRole = this.guildService\r\n      .getMember(this.guild?._id, this.userService.self._id)?.roleIds\r\n      .some(id => this.guild?.roles.some(r => r._id === id));\r\n  \r\n    return toHTML(textEmoji(this.message.content), {\r\n      discordCallback: {\r\n        user: async (node) => getMention(\r\n          `@${(await getUser(node.id))?.username ?? `Invalid User`}`,\r\n          this.userService.self._id === node.id),\r\n\r\n        role: (node) => getMention(\r\n          `@${getRole(node.id)?.name ?? `Invalid Role`}`,\r\n          recipientHasRole),\r\n\r\n        everyone: (node) => getMention(`@everyone`, true),\r\n        here: (node) => getMention(`@here`, this.userService.self.status !== 'OFFLINE')\r\n      }\r\n    });\r\n  }\r\n\r\n  public get selfIsAuthor() {\r\n    return this.author?._id === this.userService.self._id;\r\n  }\r\n\r\n  public get canManage() {\r\n    return this.selfIsAuthor\r\n      || (this.guild && this.perms.can(this.guild._id, 'MANAGE_MESSAGES'));\r\n  }\r\n\r\n  constructor(\r\n    private log: LogService,\r\n    private guildService: GuildService,\r\n    public userService: UserService,\r\n    private ws: WSService,\r\n    private perms: PermissionsService,\r\n    public dialog: DialogService,\r\n  ) {}\r\n\r\n  public async ngOnInit() {\r\n    this.author = await this.userService.getAsync(this.message.authorId);\r\n  }\r\n\r\n  public removeEmbed() {\r\n    this.message.embed = null;\r\n    \r\n    this.ws.emit('MESSAGE_UPDATE', {\r\n      messageId: this.message._id,\r\n      partialMessage: this.message,\r\n      withEmbed: false\r\n    }, this);\r\n  }\r\n\r\n  public delete() {\r\n    this.ws.emit('MESSAGE_DELETE', { messageId: this.message._id }, this);\r\n\r\n    document\r\n      .querySelector(`#message${this.message._id}`)\r\n      ?.remove();\r\n\r\n    this.ws.on('MESSAGE_DELETE', async ({ messageId }) => {\r\n      if (messageId === this.message._id)\r\n        await this.log.success();\r\n    }, this);\r\n  }\r\n\r\n  public async edit(value: string, $event?: KeyboardEvent) {\r\n    if ($event && ($event.shiftKey || $event.code !== 'Enter')) return;\r\n\r\n    this.isEditing = false;\r\n    this.message.content = value;\r\n    this.message.updatedAt = new Date();\r\n\r\n    this.ws.emit('MESSAGE_UPDATE', {\r\n      messageId: this.message._id,\r\n      partialMessage: { content: this.message.content },\r\n      withEmbed: Boolean(this.message.embed),\r\n    }, this);\r\n\r\n    this.ws.on('MESSAGE_UPDATE', async ({ message }) => {\r\n      if (message.content === this.message.content)\r\n        await this.log.success();\r\n    }, this);\r\n  }\r\n\r\n  public async toggleEditing($event?: KeyboardEvent) {\r\n    (this.isEditing)\r\n      ? await this.edit(this.newMessage.nativeElement.innerText, $event)\r\n      : this.isEditing = true;\r\n  }\r\n\r\n  public openMenu(event: MouseEvent, menuTrigger: MatMenuTrigger) {\r\n    event.preventDefault();\r\n    this.contextMenuPosition.x = event.clientX + 'px';\r\n    this.contextMenuPosition.y = event.clientY + 'px';\r\n    menuTrigger.menu.focusFirstItem('mouse');\r\n    menuTrigger.openMenu();\r\n  }\r\n}\r\n\r\ninterface MessageEmbed {\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n  url: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { UserService } from './user.service';\r\nimport { Lean } from '../types/entity-types';\r\nimport { HTTPWrapper } from './http-wrapper';\r\nimport { WSService } from './ws.service';\r\nimport { array } from '../utils/utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GuildService extends HTTPWrapper<Lean.Guild> {\r\n  protected endpoint = environment.endpoint + '/guilds';\r\n  \r\n  protected _arr: Lean.Guild[] = [];\r\n  public get guilds() {\r\n    return this._arr.filter(array.distinctBy('_id'));\r\n  }\r\n  \r\n  constructor(\r\n    http: HttpClient,\r\n    ws: WSService,\r\n    private userService: UserService,\r\n  ) { super(http, ws); }\r\n\r\n  public getGuildFromChannel(channelId: string): Lean.Guild | undefined {\r\n    return this.guilds\r\n      ?.find(g => g.channels\r\n        .find(c => c._id === channelId));\r\n  }\r\n\r\n  public getSelfMember(guildId: string): Lean.GuildMember {\r\n    return this.getMember(guildId, this.userService.self._id);\r\n  }\r\n\r\n  public getMember(guildId: string, userId: string): Lean.GuildMember {\r\n    const guild = this.getCached(guildId);\r\n    return guild?.members.find(m => m.userId === userId);\r\n  }\r\n  public getMemberInGuild(guildId: string, memberId: string): Lean.GuildMember {\r\n    const guild = this.getCached(guildId);\r\n    return guild?.members.find(m => m._id === memberId);\r\n  }\r\n\r\n  public async ownsGuild(guildId: string, userId: string) {\r\n    const guild = await this.getAsync(guildId);\r\n    return guild.ownerId === userId;\r\n  }\r\n\r\n  public getInvites(guildId: string): Promise<Lean.Invite[]> {\r\n    return this.http.get(`${this.endpoint}/${guildId}/invites`, this.headers).toPromise() as any;\r\n  }\r\n\r\n  public addBot(guildId: string, botId: string): Promise<any> {\r\n    return this.http\r\n      .get(`${this.endpoint}/${guildId}/authorize/user?client_id=${botId}`, this.headers)\r\n      .toPromise() as any;\r\n  }\r\n\r\n  public async leave(guildId: string) {\r\n    const guild = this.getCached(guildId);\r\n    const confirmation = confirm(`Leave ${guild.name}?`);\r\n    if (!confirmation) return;\r\n\r\n    await this.kick(guildId, this.userService.self._id);\r\n  }\r\n\r\n  public async kick(guildId: string, userId: string) {\r\n    const member = this.getMember(guildId, userId);\r\n    await this.ws.emitAsync('GUILD_MEMBER_REMOVE', {\r\n      guildId,\r\n      memberId: member._id,\r\n    }, this);\r\n  }\r\n\r\n  public deleteGuild(guildId: string) {\r\n    return this.ws.emitAsync('GUILD_DELETE', { guildId }, this);\r\n  }\r\n}\r\n","import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { GuildService } from '../services/guild.service';\nimport { LogService } from '../services/log.service';\nimport { PingService } from '../services/ping.service';\nimport { PermissionsService } from '../services/permissions.service';\nimport { SoundService } from '../services/sound.service';\nimport { UserService } from '../services/user.service';\nimport { WSService } from '../services/ws.service';\nimport { MessageService } from '../services/message.service';\nimport { ChannelService } from '../services/channel.service';\nimport { Lean } from '../types/entity-types';\n\n@Component({ template: '' })\nexport class TextBasedChannel implements OnInit {\n  public channel: Lean.Channel;\n  public guild: Lean.Guild;\n  private messageBatchSize = 25;\n  \n  @ViewChild('message')\n  private messageInput: ElementRef;\n  \n  public chatBox = new FormControl();\n  public emojiPickerOpen = false;\n  public ready = false;\n  public messages: Lean.Message[];\n  private lastTypedAt = null;\n\n  public get typingUsernames() {\n    return this.channelService\n      .getTyping(this.channel._id)\n      .map(id => this.userService.getCached(id).username);\n  }\n\n  public get loadedAllMessages() {\n    return this.messages\n      || this.messages.length <= 0\n      || this.messages.length % this.messageBatchSize !== 0;\n  }\n  public get recipient() {\n    return this.channelService.getRecipient(this.channel._id);\n  }\n  public get title() {\n    return (this.channel.type === 'DM')\n      ? `@me + @${this.recipient.username}`\n      : `${this.guild.name} > #${this.channel.name}`;\n  }\n\n  constructor(\n    protected route: ActivatedRoute,\n    protected channelService: ChannelService,\n    protected messageService: MessageService,\n    public guildService: GuildService,\n    protected log: LogService,\n    protected router: Router,\n    public perms: PermissionsService,\n    public pings: PingService,\n    public sounds: SoundService,\n    public userService: UserService,\n    protected ws: WSService,\n  ) {}\n\n  public async ngOnInit() {\n    this.route.paramMap.subscribe(async (paramMap) => {\n      const guildId = paramMap.get('guildId');\n      const channelId = paramMap.get('channelId');\n\n      this.guild = this.guildService.getCached(guildId);\n      this.channel = await this.channelService.getAsync(channelId);\n\n      await this.init();\n    });\n  }\n\n  private async init() {\n    if (this.channel.type === 'VOICE')\n      return this.router.navigate(['..']);\n\n    document.title = this.title;\n      \n    this.pings.markAsRead(this.channel._id);\n    this.messages = await this.messageService.getAllAsync(this.channel._id);    \n\n    this.ws.on('MESSAGE_CREATE', () => this.scrollToMessage(50), this);\n    \n    this.ready = true;\n    this.scrollToMessage();\n  }\n\n  private scrollToMessage(timeout = 100) {\n    setTimeout(() => {\n      try {\n        const messages = document.querySelector('.messages');\n        const height = messages.scrollHeight;\n        messages.scrollTop = height;        \n      } catch {}\n    }, timeout);\n  }\n\n  public async chat(content: string) {\n    if (!content.trim()) return;\n    \n    const firstNewLines = /\\s+/;\n    const lastNewLines = /\\s+$/;\n\n    content = content\n      .replace(firstNewLines, '')\n      .replace(lastNewLines, '');\n    this.messageInput.nativeElement.value = '';\n\n    this.ws.emit('MESSAGE_CREATE', {\n      channelId: this.channel._id,\n      partialMessage: { content },\n    }, this);\n    await this.sounds.message();\n\n    this.channelService.stopTyping(this.channel._id, this.userService.self._id);\n  }\n\n  public async loadMoreMessages() {\n    if (this.loadedAllMessages) return;\n\n    await this.messageService\n      .overrideFetchAll(this.channel._id, {\n        start: this.messages.length,\n        end: this.messages.length + this.messageBatchSize\n      });\n\n    this.scrollToMessage();\n  }\n  \n  public shouldCombine(index: number) {\n    const lastIndex = Math.max(0, index - 1);\n    const lastMessage = (index) ? this.messages[lastIndex] : null;\n    if (!lastMessage) return false;\n\n    const message = this.messages[index];\n    const msDifference = new Date(message.createdAt).getTime() - new Date(lastMessage?.createdAt).getTime();    \n    const minsAgo = msDifference / 60 / 1000;    \n\n    const maxTimeDifference = 5;\n    return message.authorId === lastMessage?.authorId && minsAgo < maxTimeDifference;\n  }\n\n  public async emitTyping() { \n    const sinceLastTyped = new Date().getTime() - this.lastTypedAt?.getTime();      \n    if (sinceLastTyped && sinceLastTyped < 5 * 1000) return; \n    \n    this.lastTypedAt = new Date();\n    await this.ws.emitAsync('TYPING_START', { channelId: this.channel._id }, this);\n  }\n\n  // emoji picker\n  public addEmoji({ emoji }) {\n    this.messageInput.nativeElement.value += emoji.native;\n  }\n\n  public onClick({ path }) {\n    const pickerClicked = path\n      .some(n => n\n        && n.nodeName === 'EMOJI-MART'\n        || n.classList?.contains('emoji-icon'));  \n\n    this.emojiPickerOpen = pickerClicked;\n  }\n  \n  public identifyMessage(index: number, item: Lean.Message) {\n    return item._id;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Args } from 'src/app/types/ws-types';\nimport { ChannelService } from '../channel.service';\nimport { MessageService } from '../message.service';\nimport { SoundService } from '../sound.service';\nimport { UserService } from '../user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChannelEventService {\n  constructor(\n    private sounds: SoundService,\n    private channelService: ChannelService,\n    private messageService: MessageService,\n  ) {}\n\n  public async ping(args: Args.Ping) {\n    await this.sounds.ping();\n  }\n\n  public async addMessage({ message }: Args.MessageCreate) { \n    this.messageService.overrideAdd([message]);\n  }\n\n  public deleteMessage({ channelId, messageId }: Args.MessageDelete) {\n    const messages = this.messageService.getAllCached(channelId);\n    const index = messages.findIndex(m => m._id === messageId);\n\n    messages.splice(index, 1);\n  }\n\n  public updateMessage({ message }: Args.MessageUpdate) {\n    const messages = this.messageService.getAllCached(message.channelId);\n    let index = messages.findIndex(m => m._id === message._id);\n\n    messages[index] = message;\n  }\n\n  public startTyping({ channelId, userId }: Args.TypingStart) {    \n    this.channelService.startTyping(channelId, userId);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'miniDate'\r\n})\r\nexport class MiniDatePipe implements PipeTransform {\r\n  transform(dateString: string, ...args: unknown[]): unknown {\r\n    const date = new Date(dateString);\r\n    return `${date.getDate()}/${(date.getMonth() + 1)}`;    \r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { DialogService } from 'src/app/services/dialog.service';\nimport { GuildService } from 'src/app/services/guild.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { Lean } from 'src/app/types/entity-types';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-guild-icon',\n  templateUrl: './guild-icon.component.html',\n  styleUrls: ['./guild-icon.component.css']\n})\nexport class GuildIconComponent implements AfterViewInit {\n  @Input() public guild: Lean.Guild;\n  @Input() public size = '52px';\n\n  @ViewChild('img')\n  private img: ElementRef;\n\n  private unknownImageURL = `${environment.endpoint}/avatars/unknown.png`;\n\n  constructor(\n    public dialogs: DialogService,\n    public guildService: GuildService,\n    public userService: UserService,\n  ) {}\n\n  public ngAfterViewInit() {\n    const image = this.img?.nativeElement as HTMLImageElement;\n    if (image)\n      image.onerror = () => image.src = this.unknownImageURL; \n  }\n}\n","<div\n  class=\"guild-icon\"\n  (contextmenu)=\"dialogs.openMenu($event, menuTrigger)\"\n  [matMenuTriggerFor]=\"contextMenu\"\n  routerLinkActive=\"active\"\n  #menuTrigger=\"matMenuTrigger\">\n  <div\n    (click)=\"$event.stopPropagation()\"\n    [routerLink]=\"'/channels/' + guild._id\">\n    <img\n      *ngIf=\"guild.iconURL\"\n      [src]=\"guild.iconURL\"\n      [alt]=\"guild.name\"\n      [style.width]=\"size\"\n      [style.height]=\"size\"\n      #img>\n    <span\n      *ngIf=\"!guild.iconURL\"\n      class=\"d-flex flex-column justify-content-center\"\n      [style.width]=\"size\"\n      [style.height]=\"size\">\n      <span>{{ guild.nameAcronym }}</span>\n    </span>\n  </div>\n</div>\n\n<mat-menu\n  matMenuContent\n  #contextMenu>\n  <h6 class=\"p-2 text-center\">{{ guild.name }}</h6>\n\n  <div *ngIf=\"guild.ownerId !== userService.self._id\">\n    <button\n      (click)=\"guildService.leave(guild._id)\"\n      class=\"text-danger p-2\"\n      mat-menu-item>\n      <i class=\"lni lni-exit\"></i>\n      <span> Leave</span>\n    </button>\n    \n    <hr>\n  </div>\n\n  <div (click)=\"$event.stopPropagation()\" class=\"p-2\">\n    <i class=\"lni lni-dev\"></i>\n    <code> {{ guild._id }}</code>\n  </div>\n</mat-menu>","import { style, state, trigger, animate, transition } from '@angular/animations';\r\n\r\nexport const expandCollapse = trigger('expandCollapse', [\r\n  state('collapsed', style({\r\n    height: 0,\r\n    padding: '0 20px'\r\n  })),\r\n  state('expanded', style({ height: '*' })),\r\n  transition('collapsed <=> expanded', [ animate('200ms ease') ]),\r\n]);","<h1 class=\"text-center\" mat-dialog-title>Create Channel</h1>\n\n<div class=\"text-center\" mat-dialog-content>\n  <form\n    (keyup.enter)=\"create()\"\n    #f=\"ngForm\"\n    [formGroup]=\"form\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Name</mat-label>\n      <input formControlName=\"name\" type=\"text\" matInput #nameInput>\n      <mat-error *ngIf=\"form.get('name').invalid\">Required, and should be less than 32 characters.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Type</mat-label>\n      <mat-select\n        formControlName=\"type\"\n        (select)=\"nameInput.setValue('')\">\n        <mat-option value=\"TEXT\" selected>Text</mat-option>\n        <!-- <mat-option value=\"VOICE\">Voice</mat-option> -->\n      </mat-select>\n    </mat-form-field>\n  </form>\n</div>\n\n<div class=\"d-flex justify-content-center\" mat-dialog-actions>\n  <button\n    id=\"createChannelButton\"\n    (click)=\"create()\"\n    class=\"btn btn-success mt-2\"\n    [disabled]=\"processing\">Create</button>\n</div>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { GuildService } from 'src/app/services/guild.service';\nimport { LogService } from 'src/app/services/log.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean, patterns } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-create-channel',\n  templateUrl: './create-channel.component.html',\n  styleUrls: ['./create-channel.component.css']\n})\nexport class CreateChannelComponent {\n  // TODO: use different form for voice channel\n  public form = new FormGroup({\n    name: new FormControl('chat', [\n      Validators.pattern(patterns.textChannelName),\n      Validators.required,\n    ]),\n    type: new FormControl('TEXT'),\n  });\n\n  public processing = false;\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateChannelComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: {\n      guild: Lean.Guild,\n    },\n    private ws: WSService,\n  ) {}\n\n  public async create() {\n    if (this.form.invalid) return;\n\n    await this.ws.emitAsync('CHANNEL_CREATE', {\n      partialChannel: this.form.value,\n      guildId: this.data.guild._id\n    }, this);\n\n    this.dialogRef.close();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  docsURL: 'https://docs.accord.app',\r\n  production: false,\r\n  endpoint: 'http://localhost:3000/api/v1',\r\n  rootEndpoint: 'http://localhost:3000',\r\n  githubURL: 'https://github.com/accorddotapp',\r\n  version: 'v0.1.9a',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, EventEmitter, Input,  Output } from '@angular/core';\n\n@Component({\n  selector: 'message-embed',\n  templateUrl: './message-embed.component.html',\n  styleUrls: ['./message-embed.component.css']\n})\nexport class MessageEmbedComponent {\n  @Input() message;\n  @Output() close = new EventEmitter<string>();\n  @Input() canManage;\n}\n","<div class=\"embed-wrapper\" *ngIf=\"message.embed\">\n    <span *ngIf=\"canManage\"\n        (click)=\"close.emit(message._id)\"\n        class=\"hide-embed text-muted cursor-pointer\">×</span>\n    <div class=\"embed\">\n      <a class=\"title\" [href]=\"message.embed.url\">{{ message.embed.title || 'Untitled' }}</a>\n      <div *ngIf=\"message.embed.description\"\n          class=\"description\">{{ message.embed.description }}</div>\n      <img *ngIf=\"message.embed.image\"\n          [src]=\"message.embed.image\" onerror=\"this.onerror=null;this.hidden = true\">\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Args } from 'src/app/types/ws-types';\nimport { ChannelService } from '../channel.service';\nimport { GuildService } from '../guild.service';\nimport { UserService } from '../user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuildEventService {\n  constructor(\n    private guildService: GuildService,\n    private userService: UserService,\n  ) {}\n\n  public createRole({ guildId, role }: Args.GuildRoleCreate) {\n    const guild = this.guildService.getCached(guildId);\n    guild.roles.push(role);\n  }\n\n  public deleteRole({ guildId, roleId }: Args.GuildRoleDelete) {\n    const guild = this.guildService.getCached(guildId);\n    const index = guild.roles.findIndex(r => r._id === roleId);\n    guild.roles.splice(index, 1);\n  }\n\n  public updateRole({ guildId, roleId, partialRole }: Args.GuildRoleUpdate) {\n    const guild = this.guildService.getCached(guildId);\n    const index = guild.roles.findIndex(r => r._id === roleId);\n    guild.roles[index] = {\n      ...guild.roles[index],\n      ...partialRole,\n    };\n    \n  }\n\n  public async addMember({ member }: Args.GuildMemberAdd) {\n    const newUser = await this.userService.getAsync(member.userId);\n    this.userService.add(newUser);\n\n    const guild = this.guildService.getCached(member.guildId);\n    guild.members.push(member);\n  }\n\n  public async removeMember({ memberId, guildId }: Args.GuildMemberRemove) {\n    const guild = this.guildService.getCached(guildId);\n    const index = guild.members.findIndex(m => m._id === memberId);\n\n    guild.members.splice(index, 1);\n  }\n  \n  public updateMember({ guildId, partialMember, memberId }: Args.GuildMemberUpdate) {\n    const guild = this.guildService.getCached(guildId);\n    const oldMember = this.guildService.getMemberInGuild(guildId, memberId);\n    const index = guild.members.findIndex(m => m._id === memberId);    \n\n    return guild.members[index] = { ...oldMember, ...partialMember };\n  }\n\n  public addChannel({ channel }: Args.ChannelCreate) {\n    const guild = this.guildService.getCached(channel.guildId);\n    guild.channels.push(channel);\n  }\n  public deleteChannel({ guildId, channelId }: Args.ChannelDelete) {\n    const guild = this.guildService.getCached(guildId);\n    const index = guild.channels.findIndex(c => c._id === channelId);\n\n    guild.channels.splice(index, 1);\n  }\n\n  public update({ guildId, partialGuild }: Args.GuildUpdate) {\n    this.guildService.upsert(guildId, partialGuild);\n  }\n  \n  public async delete({ guildId }: Args.GuildDelete | Args.GuildLeave) {\n    while (this.guildService.getCached(guildId))\n      this.guildService.delete(guildId);    \n  }\n}\n","<app-settings-sidebar\n  *ngIf=\"userService.self\"\n  tabType=\"user\">\n  <div class=\"content\">\n    <h5 class=\"mb-4\">Your Account</h5>\n    <div class=\"row\">\n      <div class=\"col-lg-6 col-md-12\">\n        <form\n          *ngIf=\"form\"\n          #f=\"ngForm\"\n          (submit)=\"changeEmail()\"\n          [formGroup]=\"form\">\n          <h6>Change Email</h6>\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Email</mat-label>\n            <input formControlName=\"email\" type=\"email\" matInput>\n            <mat-hint *ngIf=\"form.get('email').pending\"><i class=\"lni lni-circle-notch fa-spin\"></i> Checking</mat-hint>\n            <mat-error *ngIf=\"form.get('email').errors?.emailInUse\">Email is already in use.</mat-error>\n            <mat-error *ngIf=\"form.get('email').errors?.pattern\">Email must be valid.</mat-error>\n          </mat-form-field>\n\n          <button\n            [disabled]=\"processingEmail\"\n            matTooltip=\"Send\"\n            class=\"ml-2 bg-success\"\n            mat-button><i class=\"lni lni-envelope text-dark\"></i></button>\n        </form>\n\n        <div>\n          <span\n            *ngIf=\"userService.self.verified\"\n            class=\"border border-success rounded p-3\">\n            <i class=\"lni lni-checkmark-circle text-success\"></i>\n            <span> Your account is verified by email.</span>\n          </span>\n          <span\n            *ngIf=\"!userService.self.verified\"\n            class=\"border border-warning rounded p-3\">\n            <i class=\"lni lni-close text-danger\"></i>\n            <span> Your email is not verified.</span>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"col-lg-6 col-md-12\">\n        <form\n          #f=\"ngForm\"\n          (submit)=\"changePassword()\"\n          [formGroup]=\"passwordForm\">\n          <h6>Change Password</h6>\n          <mat-form-field\n            class=\"mr-2\"\n            appearance=\"outline\">\n            <mat-label>Old Password</mat-label>\n            <mat-error *ngIf=\"passwordForm.get('oldPassword').errors?.required\">Old password is required.</mat-error>\n            <input formControlName=\"oldPassword\" type=\"password\" matInput>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\">\n            <mat-label>New Password</mat-label>\n            <input formControlName=\"newPassword\" type=\"password\" matInput>\n            <mat-error *ngIf=\"passwordForm.get('newPassword').errors?.required\">New password is required.</mat-error>\n            <mat-error *ngIf=\"passwordForm.get('newPassword').errors?.pattern\">New password must be valid.</mat-error>\n          </mat-form-field>\n          \n          <button\n            [disabled]=\"processingPassword\"\n            class=\"bg-warning float-right mt-3 mr-3\"\n            mat-button>Change</button>\n\n          <mat-error\n            *ngIf=\"passwordForm.get('newPassword').dirty\n              && passwordForm.errors?.passwordMatch\"\n            class=\"mb-2\">New password should not equal old password.</mat-error>\n        </form>\n      </div>\n    </div>\n  </div>\n</app-settings-sidebar>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { PasswordValidators } from 'src/app/authentication/sign-up/password.validators';\nimport { UsernameValidators } from 'src/app/authentication/sign-up/username.validators';\nimport { LogService } from 'src/app/services/log.service';\nimport { UserAuthService } from 'src/app/services/user-auth.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { patterns, UserTypes } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-user-account',\n  templateUrl: './user-account.component.html',\n  styleUrls: ['./user-account.component.css']\n})\nexport class UserAccountComponent implements OnInit {\n  public passwordForm = new FormGroup({\n    oldPassword: new FormControl('', [ Validators.required ]),\n    newPassword: new FormControl('', [\n      Validators.pattern(patterns.password),\n      Validators.required,\n    ]),\n  }, [ PasswordValidators.newPasswordShouldNotMatch ]);\n  public processingEmail = false;\n  public processingPassword = false;\n  public form: FormGroup;\n\n  constructor(\n    public userService: UserService,\n    private usernameValidators: UsernameValidators,\n    private userAuthService: UserAuthService,\n    private log: LogService,\n  ) {}\n  \n  public buildForm(user: UserTypes.Self): FormGroup | Promise<FormGroup> {\n    return new FormGroup({\n      email: new FormControl(user.email, [\n        Validators.pattern(patterns.email),\n      ], [ this.usernameValidators.emailInUse.bind(this.usernameValidators) ]),\n    });\n  }\n\n  public async ngOnInit() {\n    await this.userService.init();\n\n    this.form = await this.buildForm(this.userService.self);\n  }\n\n  public async changeEmail() {\n    try {      \n      if (this.form.invalid) return;      \n  \n      const email = this.form.get('email').value;\n      this.processingEmail = await this.userAuthService.sendVerifyEmail(email);\n      await this.log.success('Email sent.');\n    } catch {\n      this.passwordForm.setErrors({ invalidEmail: true }); \n      await this.log.error('Failed to send email.');     \n    }\n  }\n\n  public async changePassword() {\n    try {      \n      if (this.passwordForm.invalid) return;\n      if (!this.userService.self.verified)\n        throw new TypeError('A verified email is needed to reset password.');\n  \n      const email = this.form.get('email').value;\n      const oldPassword = this.passwordForm.get('oldPassword').value;\n      const newPassword = this.passwordForm.get('newPassword').value;\n      this.processingPassword = await this.userAuthService\n        .changePassword(email, oldPassword, newPassword);\n\n      await this.log.success('Password succesfully changed.');\n    } catch (error) {\n      await this.log.error(error.message);\n      this.passwordForm.setErrors({ oldPasswordInvalid: true });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { AddFriendComponent } from '../dialog/add-friend/add-friend.component';\nimport { CreateChannelComponent } from '../dialog/create-channel/create-channel.component';\nimport { CreateGuildComponent } from '../dialog/create-guild/create-guild.component';\nimport { CreateInviteComponent } from '../dialog/create-invite/create-invite.component';\nimport { ProfileComponent } from '../dialog/profile/profile.component';\nimport { Lean } from '../types/entity-types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogService {\n  constructor(private dialog: MatDialog) {}\n\n  public openMenu(event: MouseEvent, menuTrigger: MatMenuTrigger) {\n    event.preventDefault();\n    menuTrigger.openMenu();\n  }\n\n  public createInvite(data: { guild: Lean.Guild }) {\n    this.dialog.open(CreateInviteComponent, { width: '500px', data });\n  }\n\n  public createChannel(data: { guild: Lean.Guild }) {\n    this.dialog.open(CreateChannelComponent, { width: '350px', data });\n  }\n\n  public profile(data: { user: Lean.User }) {\n    this.dialog.open(ProfileComponent, { width: '500px', data });\n  }\n\n  public createGuild() {\n    this.dialog.open(CreateGuildComponent, { width: '500px' });\n  }\n\n  public addFriend() {\n    this.dialog.open(AddFriendComponent, { width: '350px' });\n  }\n}\n","<h5 id=\"addGuildLabel\" mat-dialog-title>Add Guild</h5>\n\n<div mat-dialog-content>\n  <h4 class=\"text-center\">Create a Guild</h4>\n  <div class=\"d-flex justify-content-center\">\n    <form\n      #f=\"ngForm\"\n      [formGroup]=\"form\"\n      (submit)=\"create()\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Server Name</mat-label>\n        <input\n          formControlName=\"name\"\n          type=\"text\"\n          matInput>\n        <mat-error *ngIf=\"form.get('name').invalid\">Required, and should be less than 32 characters.</mat-error>\n      </mat-form-field>\n      <div class=\"d-flex justify-content-center\">\n        <button\n          class=\"bg-primary mt-2 mb-4\"\n          mat-button>Create</button>\n      </div>\n    </form>\n  </div>\n</div>\n\n<div mat-dialog-footer>\n  <h4 class=\"text-center\">Already have an invite?</h4>\n  <div class=\"d-flex justify-content-center\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Invite</mat-label>\n      <input type=\"text\" matInput #inviteInput>\n    </mat-form-field>\n  </div>\n</div>\n\n<div class=\"d-flex justify-content-center\" mat-dialog-actions>\n  <button\n    (click)=\"joinGuild()\"\n    id=\"joinGuildButton\"\n    type=\"button\"\n    class=\"bg-secondary\"\n    mat-button>Join a Guild</button>\n</div>\n","import { Component, ElementRef, Inject, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { LogService } from 'src/app/services/log.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\n\n@Component({\n  selector: 'app-create-guild',\n  templateUrl: './create-guild.component.html',\n  styleUrls: ['./create-guild.component.css']\n})\nexport class CreateGuildComponent {\n  @ViewChild('inviteInput')\n  public inviteInput: ElementRef;\n\n  public form = new FormGroup({\n    name: new FormControl(`${this.userService.self.username}'s Guild`, [\n      Validators.required,\n      Validators.maxLength(32)\n    ]),\n  });\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateGuildComponent>,\n    private log: LogService,\n    private userService: UserService,\n    private ws: WSService,\n  ) {}\n\n  public async create() {\n    if (this.form.invalid) return;\n\n    this.dialogRef.close();\n\n    this.ws.emit('GUILD_CREATE', {\n      partialGuild: {\n        name: this.form.value.name,\n      },\n    }, this);\n  }\n\n  public async joinGuild() {\n    this.dialogRef.close();\n\n    await this.ws.emitAsync('GUILD_MEMBER_ADD', {\n      inviteCode: this.inviteInput.nativeElement.value,\n    }, this);\n    await this.log.success();\n  }\n}\n","<sidebar>\r\n  <div\r\n    *ngIf=\"guild\"\r\n    class=\"side-nav navbar-dark\">\r\n    <div class=\"header\">\r\n      <div class=\"dropdown\">\r\n        <button\r\n          id=\"heftyButton\"\r\n          [matMenuTriggerFor]=\"guildMenu\"\r\n          class=\"btn bg-transparent text-center\"\r\n          type=\"button\">\r\n          <h6 class=\"d-flex flex-column jusify-content-center mb-0\">\r\n            <strong>{{ guild.name }}</strong>\r\n            <i class=\"lni lni-chevron-down ml-1\"></i>\r\n          </h6>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"category\">Channels—{{ textChannels.length }}</div>\r\n    <div\r\n      *ngIf=\"perms.can(guild._id, 'VIEW_CHANNELS')\"\r\n      class=\"navbar-nav\">\r\n      <app-channel-tab\r\n        *ngFor=\"let channel of textChannels\"\r\n        [channel]=\"channel\"></app-channel-tab>\r\n    </div>\r\n  </div>\r\n    \r\n  <div id=\"content\">    \r\n    <div *ngIf=\"loaded\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n    <div *ngIf=\"!loaded\">\r\n      <spinner></spinner>\r\n    </div>\r\n  </div>\r\n</sidebar>\r\n\r\n<mat-menu #guildMenu=\"matMenu\">\r\n  <a *ngIf=\"perms.can(guild._id, 'CREATE_INVITE')\"\r\n    (click)=\"dialog.createInvite({ guild: guild })\"\r\n    class=\"dropdown-item invite\"\r\n    mat-menu-item>\r\n    <i class=\"lni lni-user\"></i> Invite People</a>\r\n    \r\n  <a *ngIf=\"perms.can(guild._id, 'MANAGE_GUILD')\"\r\n    class=\"dropdown-item\"\r\n    [routerLink]=\"'/channels/' + guild._id + '/settings'\"\r\n    mat-menu-item><i class=\"lni lni-cog\"></i> Guild Settings</a>\r\n    \r\n  <a *ngIf=\"perms.can(guild._id, 'MANAGE_CHANNELS')\"\r\n    (click)=\"dialog.createChannel({ guild: guild })\"\r\n    class=\"dropdown-item\"\r\n    mat-menu-item><i class=\"lni lni-circle-plus\"></i> Create Channel</a>\r\n</mat-menu>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { PermissionsService } from 'src/app/services/permissions.service';\r\nimport { GuildService } from '../../../services/guild.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { PingService } from 'src/app/services/ping.service';\r\nimport { MatMenuTrigger } from '@angular/material/menu';\r\nimport { ChannelService } from 'src/app/services/channel.service';\r\nimport { DialogService } from 'src/app/services/dialog.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Lean } from 'src/app/types/entity-types';\r\nimport { Args, WSService } from 'src/app/services/ws.service';\r\n\r\n@Component({\r\n  selector: 'guild-sidebar',\r\n  templateUrl: './guild-sidebar.component.html',\r\n  styleUrls: ['./guild-sidebar.component.css']\r\n})\r\nexport class GuildSidebarComponent implements OnInit {\r\n  @Input('waitFor') public loaded = true;\r\n\r\n  public guild: Lean.Guild;\r\n\r\n  public get selectedChannel() {\r\n    return this.channelService.self;\r\n  }\r\n\r\n  public get textChannels() {\r\n    return this.guild.channels.filter(c => c.type === 'TEXT');\r\n  }\r\n  public get voiceChannels() {\r\n    return this.guild.channels.filter(c => c.type === 'VOICE');\r\n  }\r\n\r\n  constructor(\r\n    public route: ActivatedRoute,\r\n    public channelService: ChannelService,\r\n    public guildService: GuildService,\r\n    public perms: PermissionsService,\r\n    public userService: UserService,\r\n    public pings: PingService,\r\n    public dialog: DialogService,\r\n    private router: Router,\r\n    private ws: WSService,\r\n  ) {}\r\n\r\n  public async ngOnInit() {\r\n    this.route.paramMap.subscribe(async (paramMap) => {\r\n      const guildId = paramMap.get('guildId');\r\n      this.guild = this.guildService.getCached(guildId);\r\n      \r\n      const inGuild = this.guildService.getSelfMember(guildId);\r\n      if (!inGuild)\r\n        await this.router.navigate(['/channels/@me']);\r\n    });\r\n\r\n    this.ws\r\n      .on('GUILD_DELETE', this.returnFromGuild, this)\r\n      .on('GUILD_LEAVE', this.returnFromGuild, this);\r\n  }\r\n\r\n  private async returnFromGuild({ guildId }: Args.GuildDelete | Args.GuildLeave) {\r\n    if (guildId !== this.guild._id) return;\r\n\r\n    await this.router.navigate(['/channels/@me']);\r\n  }\r\n\r\n  public openMenu(event: MouseEvent, menuTrigger: MatMenuTrigger) {\r\n    event.preventDefault();\r\n    menuTrigger.menu.focusFirstItem('mouse');\r\n    menuTrigger.openMenu();\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { camelToSentenceCase } from '../utils/utils';\r\n\r\n@Pipe({ name: 'camelToSentenceCase' })\r\nexport class CamelToSentenceCasePipe implements PipeTransform {\r\n  transform(words: string) {\r\n    return camelToSentenceCase(words);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'countdown'\n})\nexport class CountdownPipe implements PipeTransform {\n  public transform(value: Date) {}\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { GuildService } from '../../services/guild.service';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-logout',\r\n  templateUrl: './logout.component.html',\r\n  styleUrls: ['./logout.component.css']\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n  constructor(\r\n    private guildService: GuildService,\r\n    private router: Router,\r\n    private userService: UserService) {}\r\n\r\n  public async ngOnInit() {\r\n    localStorage.removeItem('key');\r\n    \r\n    await this.userService.updateSelf();    \r\n    await this.guildService.fetchAll();\r\n\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n","<spinner></spinner>","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { UserService } from '../services/user.service';\r\nimport { GuildService } from '../services/guild.service';\r\nimport { WSService } from '../services/ws.service';\r\nimport { ChannelService } from '../services/channel.service';\r\nimport { LogService } from '../services/log.service';\r\nimport { UserAuthService } from '../services/user-auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DashboardAuthGuard implements CanActivate {\r\n  private already = false;\r\n\r\n  constructor(\r\n    private guildService: GuildService,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private auth: UserAuthService,\r\n  ) {}\r\n\r\n  public async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    await this.userService.init();\r\n    await this.guildService.init();\r\n\r\n    const canActivate = Boolean(this.userService.self); \r\n    if (!canActivate)\r\n      await this.router.navigateByUrl(`/login?redirect=${route.url.join('/')}`);\r\n\r\n    if (!this.already) {\r\n      this.already = true;\r\n      await this.auth.ready();\r\n    }\r\n    return canActivate;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UsernameValidators {\r\n  constructor(\r\n    private userService: UserService,\r\n  ) {}\r\n\r\n  public async shouldBeUnique(control: AbstractControl): Promise<ValidationErrors> | null {\r\n    const isTaken = await this.userService.checkUsername(control.value)\r\n      && this.userService.self.username !== control.value;       \r\n    return (isTaken) ? { shouldBeUnique: true } : null;\r\n  }\r\n\r\n  public async emailInUse(control: AbstractControl) {\r\n    const inUse = await this.userService.checkEmail(control.value);\r\n    return (inUse) ? { emailInUse: true } : null;\r\n  }\r\n}\r\n","<sidebar>\r\n  <div class=\"side-nav navbar-dark\">\r\n    <div class=\"header\">\r\n      <a routerLink=\"/channels/@me\"\r\n        routerLinkActive=\"active\"\r\n        [routerLinkActiveOptions]=\"{exact: true}\"\r\n        class=\"nav-item nav-link mt-2\">\r\n        <i class=\"lni lni-users pr-2\" aria-hidden=\"true\"></i> Friends\r\n      </a>\r\n    </div>\r\n    <div class=\"navbar-nav\">\r\n      <div class=\"category\">Direct Messages—{{ channelService.dmChannels.length }}</div>\r\n      <div \r\n        *ngFor=\"let channel of channelService.dmChannels\"\r\n        class=\"mx-2 mb-1\">\r\n        <member-username\r\n          *ngIf=\"channel && getRecipient(channel)\"\r\n          class=\"cursor-pointer\"\r\n          [routerLink]=\"'/channels/@me/' + channel._id\"\r\n          [user]=\"getRecipient(channel)\"></member-username>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div id=\"content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</sidebar>","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../../../services/user.service';\r\nimport { ChannelService } from 'src/app/services/channel.service';\r\nimport { Lean } from 'src/app/types/entity-types';\r\n\r\n@Component({\r\n  selector: 'dashboard-sidebar',\r\n  templateUrl: './me-sidebar.component.html',\r\n  styleUrls: ['./me-sidebar.component.css']\r\n})\r\nexport class MeSidebarComponent implements OnInit {\r\n  constructor(\r\n    public channelService: ChannelService,\r\n    public userService: UserService,\r\n  ) {}\r\n    \r\n  public async ngOnInit() {\r\n    await this.userService.init();\r\n    await this.channelService.init();\r\n  }\r\n\r\n  public getRecipient(channel: Lean.Channel) { \r\n    const userId = channel.memberIds\r\n      .filter(id => id !== this.userService.self._id)[0];\r\n    return this.userService.getCached(userId);\r\n  }\r\n}\r\n","<div\r\n  *ngIf=\"user\"\r\n  [matMenuTriggerFor]=\"contextMenu\"\r\n  #menuTrigger=\"matMenuTrigger\"\r\n  (contextmenu)=\"openMenu($event, menuTrigger)\"\r\n  class=\"member-username\"\r\n  [title]=\"user.username\"\r\n  [class]=\"(guild) ? 'user-' + user._id + ' ' + user.status?.toLowerCase() : ''\">\r\n  <div\r\n    [routerLink]=\"routerLink || './'\"\r\n    class=\"username-wrapper\"\r\n    (click)=\"$event.stopPropagation()\">\r\n    <app-avatar-url\r\n      *ngIf=\"withAvatar\"\r\n      [user]=\"user\"></app-avatar-url>\r\n    <span\r\n      class=\"status round\"\r\n      [class]=\"user.status?.toLowerCase()\"></span>\r\n    <div\r\n      [style.color]=\"member ? roleColor : 'var(--light)'\"\r\n      class=\"username\">\r\n      <span class=\"float-right text-muted\">\r\n        <i *ngIf=\"pings.isUnread(dmChannelId)\"\r\n          matTooltip=\"Unread Pings\"\r\n          class=\"lni lni-circle text-danger\"></i>\r\n      </span>\r\n  \r\n      <span class=\"username-text\">{{ user.username }}</span>\r\n      <span\r\n        *ngIf=\"user.bot\"\r\n        textContent=\"user.username === 'Accord' ? 'SYSTEM' : 'BOT'\"\r\n        class=\"ml-1 badge badge-secondary\"></span>\r\n      <span\r\n        *ngIf=\"user._id === guild?.ownerId\"\r\n        matTooltip=\"Guild Owner\"\r\n        class=\"crown pl-1\">\r\n        <i class=\"lni lni-crown text-warning\"></i>\r\n      </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu\r\n  (closed)=\"guild\r\n    && perms.canManage(guild._id, user._id, 'MANAGE_ROLES')\r\n    && update()\"\r\n  #contextMenu>\r\n  <h6 class=\"p-2 text-center\">{{ user.username }}</h6>\r\n\r\n  <button\r\n    (click)=\"dialog.profile({ user: user })\"\r\n    mat-menu-item>\r\n    <i class=\"lni lni-user text-muted mr-1\"></i>\r\n    <span>View Profile</span>\r\n  </button>\r\n\r\n  <button\r\n    *ngIf=\"isBlocked && user._id !== userService.self._id\"  \r\n    (click)=\"userService.unblock(user._id)\"\r\n    mat-menu-item>\r\n    <i class=\"lni lni-ban text-muted mr-1\"></i>\r\n    <span>Unblock</span>\r\n  </button>\r\n  <button\r\n    *ngIf=\"!isBlocked && user._id !== userService.self._id\"  \r\n    (click)=\"userService.block(user._id)\"\r\n    mat-menu-item>\r\n    <i class=\"lni lni-ban text-danger mr-1\"></i>\r\n    <span>Block</span>\r\n  </button>\r\n  \r\n  <hr class=\"my-2\">\r\n  \r\n  <div *ngIf=\"guild\">\r\n    <mat-form-field\r\n      *ngIf=\"perms.canManage(guild._id, user._id, 'MANAGE_ROLES')\"  \r\n      (click)=\"$event.stopPropagation()\"\r\n      appearance=\"outline\">\r\n      <mat-label>Roles</mat-label>\r\n      <mat-select\r\n        [value]=\"member.roleIds\"\r\n        multiple\r\n        #rolesInput>\r\n        <mat-option\r\n          *ngFor=\"let role of guildRoles.reverse()\"\r\n          [value]=\"role._id\"\r\n          [style.color]=\"role.color\"\r\n          [disabled]=\"!perms.isHigher(guild._id, [role._id])\"\r\n          [attr.selected]=\"member.roleIds.includes(role._id)\">{{ role.name }}</mat-option>\r\n      </mat-select> \r\n    </mat-form-field>\r\n\r\n  </div>\r\n  <div *ngIf=\"guild\">\r\n    <button\r\n      *ngIf=\"perms.canPunish(guild._id, user._id, 'KICK_MEMBERS')\"\r\n      (click)=\"guildService.kick(guild._id, user._id)\"\r\n      mat-menu-item>\r\n      <i class=\"lni lni-close text-danger mr-1\"></i>\r\n      <span>Kick</span>\r\n    </button>\r\n  </div>\r\n  \r\n  <hr class=\"my-2\">\r\n\r\n  <div (click)=\"$event.stopPropagation()\" class=\"p-2\">\r\n    <i class=\"lni lni-dev\"></i>\r\n    <code> {{ user._id }}</code>\r\n  </div>\r\n</mat-menu>\r\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { MatMenuTrigger } from '@angular/material/menu';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { ChannelService } from 'src/app/services/channel.service';\r\nimport { DialogService } from 'src/app/services/dialog.service';\r\nimport { GuildService } from 'src/app/services/guild.service';\r\nimport { PermissionsService } from 'src/app/services/permissions.service';\r\nimport { PingService } from 'src/app/services/ping.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { WSService } from 'src/app/services/ws.service';\r\nimport { Lean } from 'src/app/types/entity-types';\r\n\r\n@Component({\r\n  selector: 'member-username',\r\n  templateUrl: './member-username.component.html',\r\n  styleUrls: ['./member-username.component.css']\r\n})\r\nexport class MemberUsernameComponent implements OnInit {\r\n  @Input() public user: Lean.User;\r\n  @Input() public guild: Lean.Guild;\r\n  @Input() public withAvatar = true;\r\n  @Input() public voice = false;\r\n  @Input() public statusOverride: string;\r\n  @Input() public routerLink: string;\r\n\r\n  @ViewChild('rolesInput')\r\n  public rolesInput: MatSelect; \r\n\r\n  public get guildRoles() {\r\n    return this.guild.roles.filter(r => r.name !== '@everyone');\r\n  }\r\n  public get member() {\r\n    return this.guild?.members.find(m => m.userId === this.user._id);\r\n  }\r\n  public get roleColor() {\r\n    if (!this.guild) return null;\r\n\r\n    const lastRole = this.roles[this.roles.length - 1];\r\n    return lastRole?.color;\r\n  }\r\n  public get roles() {\r\n    if (!this.guild) return null;\r\n    \r\n    return this.guild.roles\r\n      .filter(r => this.member.roleIds.includes(r._id));\r\n  }\r\n  public get isBlocked() {\r\n    return this.userService.self.ignored.userIds.includes(this.user._id);\r\n  }\r\n  public get dmChannelId() {\r\n    return this.channelService.getDM(this.user._id)?._id;\r\n  }\r\n\r\n  constructor(\r\n    private channelService: ChannelService,\r\n    public perms: PermissionsService,\r\n    public pings: PingService,\r\n    public guildService: GuildService,\r\n    public userService: UserService,\r\n    private ws: WSService,\r\n    public dialog: DialogService,\r\n  ) {}\r\n\r\n  public ngOnInit() {\r\n    if (!this.user)\r\n      throw new TypeError('Input user undefined');\r\n  }\r\n\r\n  public async update() {\r\n    const roleIds = this.rolesInput.value\r\n      .filter(id => id)\r\n      .map(v => v._id ?? v);\r\n\r\n    const noChange = JSON.stringify(roleIds) === JSON.stringify(this.member.roleIds);\r\n    if (noChange) return;\r\n\r\n    await this.ws.emitAsync('GUILD_MEMBER_UPDATE', {\r\n      partialMember: { roleIds },\r\n      memberId: this.member._id,\r\n    }, this);\r\n  }\r\n\r\n  public openMenu(event: MouseEvent, menuTrigger: MatMenuTrigger) {\r\n    event.preventDefault();\r\n    menuTrigger.openMenu();\r\n  }\r\n}\r\n","<app-settings-sidebar\n  tabType=\"guild\"\n  *ngIf=\"guild\"\n  [id]=\"guild._id\">\n  <div class=\"content\">\n    <div class=\"row\">\n      <div class=\"col-lg-3 side-nav navbar-dark\">\n        <div class=\"navbar-nav\">\n          <a\n            *ngFor=\"let role of guild.roles.reverse()\"\n            (click)=\"selectRole(role)\"\n            [style.color]=\"role.color + '!important'\"\n            [class.active]=\"selectedRole?._id === role._id\"\n            class=\"cursor-pointer nav-item nav-link\">{{ role.name }}</a>\n          <div class=\"float-right\">\n            <button\n              (click)=\"newRole()\"\n              class=\"btn bg-transparent bg-success text-dark mt-2 mx-3\"\n              mat-button>New Role</button>\n          </div>\n        </div>\n\n        <hr class=\"my-4\">\n\n        <p class=\"text-muted\">Members use the color of the highest role they have in this list.</p>\n      </div>\n      <div class=\"col-lg-9 role-details\">\n        <form\n          *ngIf=\"selectedRole\"\n          #f=\"ngForm\"\n          [formGroup]=\"form\">\n          <p>Roles decide what members can do in {{ guild.name }}.</p>\n          \n          <hr>\n\n          <div>\n            <div class=\"row\">\n              <div class=\"col-lg-4 col-md-12\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Role Name</mat-label>\n                  <input\n                    [readonly]=\"isEveryone\"\n                    formControlName=\"name\"\n                    type=\"text\"\n                    matInput\n                    validate>\n                </mat-form-field>\n              </div>\n\n              <div class=\"col-lg-4 col-md-12\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-label>Role Color</mat-label>            \n                  <input\n                    (colorPickerChange)=\"openSaveChanges()\"\n                    (colorPickerChange)=\"form.get('color').setValue($event)\"\n                    [(colorPicker)]=\"presetColors[1]\"\n                    [cpPresetColors]=\"presetColors\"\n                    formControlName=\"color\"\n                    matInput\n                    validate>\n                </mat-form-field>\n              </div>\n            </div>\n\n            <p class=\"category text-muted pl-0\">Role</p>\n\n            <div>\n              <span>Display role members separately</span>\n              <mat-slide-toggle \n                formControlName=\"hoisted\"\n                class=\"float-right\"\n                validate></mat-slide-toggle>\n              <hr>\n            </div>\n            <div>\n              <span>Allow anyone to <span class=\"d-mention p-1 rounded\">@mention</span> this role</span>\n              <mat-slide-toggle\n                formControlName=\"mentionable\"\n                class=\"float-right\"\n                validate></mat-slide-toggle>\n            </div>\n            <hr>\n          </div>\n        </form>\n\n        <form\n          *ngIf=\"selectedRole\"\n          #f=\"ngForm\"\n          [formGroup]=\"permissionsForm\">\n          \n          <div *ngFor=\"let container of description | keyvalue\">\n            <p class=\"category text-muted pl-0\">{{ container.key | snakeToSentenceCase }}</p>\n            <div\n              [formGroupName]=\"container.key\"\n              class=\"form-group\">\n              <div *ngFor=\"let item of description[container.key] | keyvalue\">\n                <span [matTooltip]=\"item.value\" class=\"cursor-pointer\">\n                  <i class=\"fas fa-info-circle mr-1\"></i>\n                </span>\n                <span>{{ item.key | snakeToSentenceCase }}</span>\n                <mat-slide-toggle \n                  [formControlName]=\"item.key\"\n                  class=\"float-right\"></mat-slide-toggle>\n                <hr>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <button\n              (click)=\"setPermissions(0)\"\n              class=\"bg-light text-dark\"\n              mat-button>Clear Permissions</button>\n              <button\n                (click)=\"setPermissions()\"\n                class=\"bg-warning text-dark ml-2\"\n                mat-button>Default Permissions</button>\n            <button\n              *ngIf=\"!isEveryone\"\n              (click)=\"deleteRole()\"\n              class=\"btn bg-danger text-light ml-2\"\n              mat-button>Delete Role</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</app-settings-sidebar>","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ModuleConfig } from 'src/app/dashboard/components/module-config';\nimport { GuildService } from 'src/app/services/guild.service';\nimport { LogService } from 'src/app/services/log.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean, PermissionTypes } from '../../../../types/entity-types';\n\n@Component({\n  selector: 'app-roles-component',\n  templateUrl: './roles.component.html',\n  styleUrls: ['./roles.component.css', '../overview/guild-settings.component.css']\n})\nexport class RolesComponent extends ModuleConfig implements OnInit {\n  public selectedRole: Lean.Role;\n  public presetColors = [ '#6E8481', '#A2B6AD', '#576067' ];\n  public description/**: DescriptionType */ = {\n    general: {\n      'ADMINISTRATOR': `Gives all permissions. This is a dangerous permission.`,\n      'BAN_MEMBERS': 'Ability to ban members from the guild.',\n      'CREATE_INVITE': 'Ability to create invites for users to join this guild.',\n      'KICK_MEMBERS': 'Ability to kick members from this guild.',\n      'MANAGE_CHANNELS': 'Ability to create, edit, or delete channels.',\n      'MANAGE_GUILD': `Ability to edit general guild settings.`,\n      'MANAGE_ROLES': 'Ability to manage guild roles.',\n      'VIEW_CHANNELS': 'Ability to view channels.',\n    },\n    text: {\n      'MANAGE_MESSAGES': `Ability to manage message other member's messages.`,\n      'READ_MESSAGES': `Ability to read messages,`,\n      'SEND_MESSAGES': 'Ability to send messages in text channels.',\n    },\n  };\n  public permissionType = Object.keys(PermissionTypes.All);\n  public permissionsForm: FormGroup;\n\n  public get isEveryone() {\n    return this.selectedRole?.name === '@everyone';\n  }\n\n  public get permissions(): number {\n    let permissions = 0;\n    for (const formGroupName in this.permissionsForm.value)\n      for (const key in this.permissionsForm.get(formGroupName).value) {\n        const hasPermission = this.permissionsForm\n          .get(formGroupName)\n          .get(key).value;\n\n        permissions |= (hasPermission)\n          ? PermissionTypes.General[key] || PermissionTypes.Text[key] || PermissionTypes.Voice[key]\n          : 0;\n      }\n    return permissions;\n  }\n\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    guildService: GuildService,\n    snackbar: MatSnackBar,\n    ws: WSService,\n    log: LogService) {\n      super(guildService, route, snackbar, ws, log, router);\n    }\n\n  public async ngOnInit() {\n    await super.init();\n\n    this.selectRole(this.guild.roles[0]);\n  }\n\n  public async selectRole(role: Lean.Role) {\n    this.selectedRole = role;\n    await this.reset();\n  }\n\n  public buildForm(guild: Lean.Guild): FormGroup {\n    if (!this.selectedRole)\n      return new FormGroup({});\n\n    this.permissionsForm = new FormGroup({\n      general: this.permissionGroup(this.selectedRole, PermissionTypes.General),\n      text: this.permissionGroup(this.selectedRole, PermissionTypes.Text),\n      voice: this.permissionGroup(this.selectedRole, PermissionTypes.Voice),\n    });\n    this.permissionsForm.valueChanges\n      .subscribe(() => this.openSaveChanges());\n\n    return new FormGroup({\n      color: new FormControl({\n        disabled: this.isEveryone,\n        value: this.selectedRole.color,\n      }),\n      hoisted: new FormControl({\n        disabled: this.isEveryone,\n        value: (this.isEveryone) ? false : this.selectedRole.mentionable,\n      }),\n      mentionable: new FormControl({\n        disabled: this.isEveryone,\n        value: this.selectedRole.mentionable,\n      }),\n      name: new FormControl({\n        disabled: this.isEveryone,\n        value: this.selectedRole.name,\n      }, [\n        Validators.required,\n        Validators.maxLength(32),\n        Validators.pattern(/^(?!everyone|here|someone).*$/),\n      ]),\n    });\n  }\n\n  private permissionGroup(role: Lean.Role, type: object) {\n    const hasPermission = (perm: PermissionTypes.Permission) => Boolean(role.permissions & perm);\n    \n    const group = new FormGroup({});\n    for (const perm in type) {\n      if (Number.parseInt(perm)) continue;\n      group.setControl(perm, new FormControl(hasPermission(type[perm])));\n    }    \n    return group;\n  } \n\n  public setPermissions(permissions = PermissionTypes.defaultPermissions) {\n    for (const formGroupName in this.permissionsForm.value)\n      for (const key in this.permissionsForm.get(formGroupName).value) {\n        const hasPerm = Boolean(permissions & PermissionTypes.All[key]);\n        this.permissionsForm\n          .get(formGroupName)\n          .get(key)\n          .setValue(hasPerm);\n      }\n  }\n\n  public async submit() {\n    if (this.form.invalid) return;\n\n    this.form.value.permissions = this.permissions;\n    for (const key in this.form.value)\n      this.selectedRole[key] = this.form.value[key];\n\n    await this.updateRole();\n  }\n\n  private async updateRole() {\n    const { partialRole } = await this.ws.emitAsync('GUILD_ROLE_UPDATE', {\n      roleId: this.selectedRole._id,\n      guildId: this.guildId,\n      partialRole: this.form.value,\n    }, this);\n\n    const index = this.guild.roles.findIndex(r => r._id === this.selectedRole._id);\n    this.guild.roles[index] = { ...this.guild.roles[index], ...partialRole };\n\n    this.form.patchValue(partialRole);\n  }\n\n  public async newRole() {\n    const { role } = await this.ws.emitAsync('GUILD_ROLE_CREATE', {\n      guildId: this.guildId,\n      partialRole: { ...this.form.value, name: 'New Role' },\n    }, this);\n\n    this.selectedRole = role;\n  }\n\n  public async deleteRole() {\n    await this.ws.emitAsync('GUILD_ROLE_DELETE', {\n      roleId: this.selectedRole._id,\n      guildId: this.guildId,\n    }, this);\n    await this.selectRole(this.guild.roles[0]);\n  }\n}\n\nexport type DescriptionType = {\n  general: { [key in keyof typeof PermissionTypes.General]: string };\n  text: { [key in keyof typeof PermissionTypes.Text]: string };\n  voice: { [key in keyof typeof PermissionTypes.Voice]: string };\n};\n","import { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { LogService } from 'src/app/services/log.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { patterns } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-add-friend',\n  templateUrl: './add-friend.component.html',\n  styleUrls: ['./add-friend.component.css']\n})\nexport class AddFriendComponent {\n  public addFriendForm = new FormGroup({\n    username: new FormControl('', [      \n      Validators.required,\n      Validators.minLength(2),\n      Validators.maxLength(32),\n      Validators.pattern(patterns.username),\n    ])\n  });\n\n  constructor(\n    public dialogRef: MatDialogRef<AddFriendComponent>,\n    private log: LogService,\n    private ws: WSService,\n  ) {}\n\n  public async sendFriendRequest() {\n    if (this.addFriendForm.invalid) return;\n\n    await this.ws.emitAsync('ADD_FRIEND', {\n      username: this.addFriendForm.value.username,\n    }, this);\n\n    this.dialogRef.close();\n  }\n}\n","<h1 mat-dialog-title>Add Friend</h1>\n<p class=\"text-muted\">Add a friend by their username.</p>\n\n<form\n  #f=\"ngForm\"\n  [formGroup]=\"addFriendForm\"\n  class=\"d-flex justify-content-center\"\n  (keyup.enter)=\"sendFriendRequest()\">\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Username</mat-label>\n    <input formControlName=\"username\" type=\"text\" matInput>\n  </mat-form-field>\n</form>\n\n<div class=\"d-flex justify-content-center\" mat-dialog-actions>\n  <button\n    (click)=\"sendFriendRequest()\"\n    class=\"bg-success send-friend-request text-dark\"\n    mat-button\n    matSuffix>Send Request</button>\n</div>","<app-settings-sidebar\n  tabType=\"guild\"\n  [id]=\"guild?._id\">\n  <div *ngIf=\"guild\" class=\"content\">\n    <h5 class=\"mb-4\">Guild Overview</h5>\n\n    <form *ngIf=\"form\"\n      #f=\"ngForm\" [formGroup]=\"form\">\n      <div class=\"row\">\n        <div class=\"col-xl-3 col-lg-4 col-md-6\">\n          <div class=\"d-flex\">\n            <app-guild-icon\n              [guild]=\"previewGuild\"\n              size=\"96px\"></app-guild-icon>\n          </div>\n        </div>\n        \n        <div class=\"col-xl-3 col-lg-4 col-md-6\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Icon URL</mat-label>\n            <input\n              formControlName=\"iconURL\"\n              type=\"text\"\n              matInput>\n          </mat-form-field>          \n        </div>\n\n        <div class=\"col-xl-3 col-lg-4 col-md-6\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Name</mat-label>\n            <input formControlName=\"name\" type=\"text\" matInput>\n          </mat-form-field>\n        </div>\n      </div>\n    </form>\n\n    <div class=\"my-5\"></div>\n    <h5 class=\"mb-4\">Advanced Settings</h5>\n\n    <div class=\"row\">\n      <div class=\"col-lg-4 col-md-6\">\n        <div>\n          <button\n            (click)=\"deleteGuild()\"\n            class=\"nav-item nav-link bg-danger\"\n            mat-button>\n            <i class=\"lni lni-trash mr-1\"></i>\n            <span>Delete Guild</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>  \n</app-settings-sidebar>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ModuleConfig } from 'src/app/dashboard/components/module-config';\nimport { GuildService } from 'src/app/services/guild.service';\nimport { LogService } from 'src/app/services/log.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-guild-settings',\n  templateUrl: './guild-settings.component.html',\n  styleUrls: ['./guild-settings.component.css']\n})\nexport class GuildSettingsComponent extends ModuleConfig implements OnInit {\n  public get previewGuild() {\n    return {\n      ...this.guild,\n      name: this.form.get('name').value || this.guild.name,\n      iconURL: this.form.get('iconURL').value || this.guild.iconURL,\n    };\n  }\n\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    guildService: GuildService,\n    snackbar: MatSnackBar,\n    ws: WSService,\n    log: LogService,\n    ) {\n      super(guildService, route, snackbar, ws, log, router);\n    }\n\n  public async ngOnInit() {\n    await super.init();\n  }\n\n  public buildForm(guild: Lean.Guild): FormGroup | Promise<FormGroup> {\n    return new FormGroup({\n      iconURL: new FormControl(guild.iconURL),\n      name: new FormControl(guild.name, [ Validators.required, Validators.maxLength(32) ]),\n    });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { getConfig, setConfig } from 'src/app/config';\nimport { UserService } from 'src/app/services/user.service';\nimport { Lean } from 'src/app/types/entity-types';\nimport { widthExpandCollapse } from './member-list.animations';\n\n@Component({\n  selector: 'app-member-list',\n  templateUrl: './member-list.component.html',\n  styleUrls: ['./member-list.component.css'],\n  animations: [ widthExpandCollapse ],\n})\nexport class MemberListComponent {\n  @Input() public guild: Lean.Guild;\n\n  private _expanded: boolean;\n  public get isExpanded() {\n    return this._expanded;\n  }\n  @Input('expanded')\n  public set isExpanded(value: boolean) {\n    setConfig('memberListExpanded', this._expanded = value);\n  }\n\n  public get onlineMembers() {\n    return this.guild.members.filter(m => {\n      const user = this.userService.getCached(m.userId);\n      return user.status === 'ONLINE';\n    });\n  }\n  public get offlineMembers() {\n    return this.guild.members.filter(m => {\n      const user = this.userService.getCached(m.userId);\n      return user.status === 'OFFLINE';\n    });\n  }\n\n  constructor(public userService: UserService) {\n    this.isExpanded ||= getConfig('memberListExpanded');\n  }\n}\n","<div\n  *ngIf=\"guild\"\n  [@expandCollapse]=\"(isExpanded) ? 'expanded' : 'collapsed'\"\n  class=\"float-right member-list\">\n  <div class=\"category\">Online—{{ onlineMembers.length }}</div>\n  <div>\n    <member-username\n      *ngFor=\"let member of onlineMembers\"\n      class=\"cursor-pointer\"\n      [user]=\"userService.getCached(member.userId)\"\n      [guild]=\"guild\"></member-username>\n  </div>\n\n  <div\n    *ngIf=\"offlineMembers.length\"\n    class=\"category\">Offline—{{ offlineMembers.length }}</div>\n  <div>\n    <member-username\n      *ngFor=\"let member of offlineMembers\"\n      class=\"cursor-pointer\"\n      [user]=\"userService.getCached(member.userId)\"\n      [guild]=\"guild\"></member-username>\n  </div>\n</div>\n","<div class=\"row\">\n  <div class=\"col-3\">\n    <div class=\"developer-sidebar\">\n      <header\n        routerLink=\"/developers\"\n        class=\"cursor-pointer my-5\">\n        <a class=\"p-2 text-muted\" routerLink=\"/developers\">\n          <i class=\"lni lni-arrow-left mt-2\"></i>\n          <strong class=\"pl-2\">DASHBOARD</strong>\n        </a>\n      </header>\n      \n      <nav class=\"side-nav mt-3\">\n        <a routerLinkActive=\"active\"\n          class=\"nav-link\"\n          [routerLink]=\"'/developers/applications/' + app._id\">\n          <i class=\"lni lni-eye\"></i> Overview</a>\n        <a routerLinkActive=\"active\"\n          class=\"nav-link\"\n          [routerLink]=\"'/developers/applications/' + app._id + '/user'\">\n          <i class=\"lni lni-robot\"></i> User</a>\n      </nav>\n    </div>\n  </div>\n\n  <div\n    *ngIf=\"app; else loading\"\n    class=\"col-6 m-4 mt-5\">\n    <header>\n      <h2>Overview</h2>\n      <p class=\"lead\">Public info about your bot listing.</p>\n    </header>\n    <form #f=\"ngForm\" [formGroup]=\"form\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Name</mat-label>\n        <input formControlName=\"name\" type=\"text\" [value]=\"app.name\" matInput>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\" class=\"ml-2\">\n        <mat-label>Description</mat-label>\n        <textarea formControlName=\"description\" matInput>{{ app.description }}</textarea>\n      </mat-form-field>\n    </form>\n  </div>\n\n  <ng-template\n    class=\"col-6 d-flex justify-content-center\"\n    #loading>\n    <spinner></spinner>\n  </ng-template>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { SaveChangesComponent } from 'src/app/dashboard/components/save-changes/save-changes.component';\nimport { DevelopersService } from 'src/app/services/developers.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-application',\n  templateUrl: './application.component.html',\n  styleUrls: ['./application.component.css', '../developers.component.css']\n})\nexport class ApplicationComponent implements OnInit {\n  form = new FormGroup({\n    description: new FormControl('', [ Validators.required ]),\n    name: new FormControl('', [ Validators.required ]),\n  });\n\n  originalForm: Lean.Application;\n  app: Lean.Application;\n\n  private saveChanges$: Subscription;  \n  private valueChanges$: Subscription;  \n\n  constructor(\n    private route: ActivatedRoute,\n    public saveChanges: MatSnackBar,\n    private service: DevelopersService,\n  ) {}\n\n  async ngOnInit() {\n    const appId = this.route.snapshot.paramMap.get('id');\n    this.app = await this.service.getAsync(appId);\n    this.form.setValue({\n      description: this.app.description,\n      name: this.app.name,\n    });\n    this.originalForm = { ...this.form.value };\n\n    this.valueChanges$ = this.form.valueChanges\n      .subscribe(() => this.openSaveChanges()); \n  }\n\n  ngOnDestroy() {    \n    this.valueChanges$?.unsubscribe();\n    this.saveChanges$?.unsubscribe();\n  }\n  \n  openSaveChanges() {\n    const snackBarRef = this.saveChanges._openedSnackBarRef;\n    if (!this.form.valid || snackBarRef) return;\n\n    this.saveChanges$ = this.saveChanges\n      .openFromComponent(SaveChangesComponent)\n      .afterOpened()\n      .subscribe(() => {\n        const component = this.saveChanges._openedSnackBarRef.instance as SaveChangesComponent;\n        if (!component) return;\n\n        component.onSave.subscribe(async() => await this.submit());\n        component.onReset.subscribe(async() => await this.reset());\n      });    \n  }\n\n  async submit() {\n    try {\n      if (!this.form.valid) return;\n\n      await this.service.update(this.app._id, this.form.value);\n      this.originalForm = { ...this.form.value };  \n    } catch {\n      alert('An error occurred when submitting the form - check console');\n    }\n  }\n\n  async reset() {\n    this.form.setValue({ ...this.originalForm });\n    \n    this.valueChanges$ = this.form.valueChanges\n      .subscribe(() => this.openSaveChanges()); \n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { GeneralTypes } from '../types/entity-types';\nimport { WSService } from './ws.service';\n\n// convention over configuration\n@Injectable({ providedIn: 'root' })\nexport abstract class HTTPWrapper<T extends GeneralTypes.SnowflakeEntity> {\n  /** Object of the client, or that is being currently used. */\n  public self?: T;\n  protected abstract endpoint: string;\n\n  protected get headers() {\n    return {\n      headers: { Authorization: `Bearer ${this.key}` }\n    };\n  }\n  protected get key() {\n    return localStorage.getItem('key');\n  }\n\n  protected abstract _arr: T[];\n  private get arr(): T[] {\n    return this._arr;\n  };\n\n  constructor(\n    protected http: HttpClient,\n    protected ws: WSService,\n  ) {}\n\n  public async init() {\n    if (this.arr.length <= 0)\n      await this.fetchAll();\n    if (!this.self)\n      await this.updateSelf?.();\n  }\n\n  public updateSelf?(): Promise<T>;\n\n  public getCached(id: string | undefined) {\n    return this.arr?.find(i => i._id === id);\n  }\n  public getAsync(id: string) {\n    return this.getCached(id) ?? this.fetch(id);\n  }\n  /** @deprecated */\n  public add(val: T) {\n    const has = this.arr.some(v => v._id === val._id);\n    if (has)\n      this.delete(val._id);\n    this.arr.push(val);\n\n    return this.arr;\n  }\n  public delete(id: string) {\n    const index = this.arr.findIndex(v => v._id === id);\n    this.arr.splice(index, 1);\n\n    return this.arr;\n  }\n\n  public upsert(id: string, value: Partial<T>): T {\n    const index = this.arr.findIndex(g => g._id === id);\n    const existing = this.arr[index];\n\n    if (this.self && this.self._id === id)\n      return this.self = { ...this.self, ...value };\n\n    if (!existing && !('_id' in value))\n      throw new TypeError('Full object required for adding');\n    \n    ('_id' in value)\n      ? this.add(value as T)\n      : this.arr[index] = { ...existing, ...value };\n\n    return existing;\n  }\n\n  public async fetch(id: string): Promise<T> {\n    if (!id)\n      throw new TypeError('ID must be defined');\n\n    return await this.http.get(`${this.endpoint}/${id}`, this.headers).toPromise() as any;\n  }\n  public async fetchAll() {\n    return this._arr = (this.key)\n      ? await this.http.get(this.endpoint, this.headers).toPromise() as any ?? []\n      : [];    \n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Lean } from '../types/entity-types';\nimport { HTTPWrapper } from './http-wrapper';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DevelopersService extends HTTPWrapper<Lean.Application> {\n  protected readonly endpoint = `${environment.endpoint}/developers/applications`;\n\n  protected _arr: Lean.Application[];\n  // TODO: make update as current application\n  public self: Lean.Application;\n\n  public async create(): Promise<Lean.Application> {\n    return this.http.get(`${this.endpoint}/applications/new`, this.headers).toPromise() as any;\n  }\n\n  public async update(id: string, value: string): Promise<Lean.Application> {\n    return this.http.patch(`${this.endpoint}/applications/${id}`, value, this.headers).toPromise() as any;\n  }\n\n  public async regenToken(id: string): Promise<string> {\n    return this.http.get(`${this.endpoint}/applications/${id}/regen-token`, this.headers).toPromise() as any;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'cleanDateTime' })\r\nexport class CleanDateTimePipe implements PipeTransform {\r\n\r\n  transform(dateString: string, ...args: unknown[]) {\r\n    const date = new Date(dateString);\r\n    let hours = date.getHours().toString().padStart(2, '0');\r\n    let minutes = date.getMinutes().toString().padStart(2, '0');\r\n    let day = date.getDate().toString().padStart(2, '0');\r\n    \r\n    const month = date.toLocaleString('default', { month: 'long' });\r\n    return `${month} ${day} ${date.getFullYear()}, ${hours}:${minutes}`;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'dashboard-navbar',\n  templateUrl: './dashboard-navbar.component.html',\n  styleUrls: ['./dashboard-navbar.component.css']\n})\nexport class DashboardNavbarComponent {}","<nav class=\"navbar navbar-expand navbar-dark\">\n  <a class=\"navbar-brand\">\n    <ng-content></ng-content>\n  </a>\n</nav>\n","import { Component } from '@angular/core';\n\nexport function externalRedirect(url: string) {\n  @Component({\n    template: ''\n  })\n  class RedirectComponent {\n    constructor() {\n      window.location.href = url;\n    }\n  }\n  return RedirectComponent;\n}","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, Router } from '@angular/router';\r\nimport { GuildService } from '../services/guild.service';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GuildAuthGuard implements CanActivate {\r\n  constructor(\r\n    private guildService: GuildService,\r\n    private router: Router,\r\n    private userService: UserService) {}\r\n\r\n  public async canActivate(next: ActivatedRouteSnapshot) {\r\n    await this.userService.init();\r\n    await this.guildService.init();\r\n    \r\n    const guildId = next.paramMap.get('guildId');\r\n    const guild = await this.guildService.getAsync(guildId);      \r\n    if (!guild)\r\n      await this.router.navigate(['/channels/@me']);\r\n    \r\n    const defaultChannel = guild.channels.filter(c => c.type === 'TEXT')[0];      \r\n    const channelId = next.url[2];    \r\n    if (defaultChannel && !channelId)\r\n      await this.router.navigate([`/channels/${guildId}/${defaultChannel._id}`]);\r\n\r\n    return true;\r\n  }  \r\n}\r\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport io from 'socket.io-client';\nimport { LogService } from './log.service';\nimport { WSEventArgs, WSEventAsyncArgs, WSEventParams } from '../types/ws-types';\n\n@Injectable({ providedIn: 'root' })\nexport class WSService {\n  private socket = (io as any).connect(environment.rootEndpoint, {\n    secure: true,\n    path: '/ws',\n  });\n  private listened: string[] = [];\n\n  constructor(private log: LogService) {\n    this.socket.once('message', (content: string) => {\n      console.log(content);\n\n      if (content.includes('Not Logged In'))\n        window.location.reload();\n    });\n  }\n\n  public on<K extends keyof WSEventArgs>(eventName: K, callback: WSEventArgs[K], component: any): this {\n    const componentName = this.nameOf(component);    \n    const eventString = `${eventName}-${componentName}`;\n    if (this.listened.includes(eventString)) return this;\n\n    this.listened.push(eventString);\n\n    const listener = (...args: any[]) => {      \n      this.log.info(`RECEIVE ${eventName} - ${componentName}`, 'ws');\n      console.log(...args);      \n      return callback.call(component, ...args);\n    };\n    this.socket.on(eventName, listener);\n    \n    return this;\n  }\n\n  public emitAsync<P extends keyof WSEventParams, A extends keyof WSEventAsyncArgs>(name: P, params: WSEventParams[P], component: any): Promise<WSEventAsyncArgs[A & P]> {\n    return new Promise((resolve, reject) => {\n      this.on('message', (message: string) => {\n        if (!message.includes('Server error')) return;\n\n        // this.log.error(message);\n        return reject(message);\n      }, component);\n\n      this.on(name as keyof WSEventArgs, (args) => {\n        this.log.success();\n        return resolve(args);\n      }, component);\n\n      this.emit(name, params, component);\n    });\n  }\n\n  public emit<K extends keyof WSEventParams>(name: K, params: WSEventParams[K], component: any) {\n    this.log.info(`SEND ${name} - ${this.nameOf(component)}`, 'ws');\n    this.socket.emit(name, params);\n  }\n\n  private nameOf(component: any) {\n    return component.constructor.name;\n  }\n}\n\nexport * from '../types/ws-types';\n","import { Component } from '@angular/core';\nimport { TextBasedChannel } from '../../text-based-channel';\n\n@Component({\n  selector: 'app-text-channel',\n  templateUrl: './text-channel.component.html',\n  styleUrls: ['./text-channel.component.css']\n})\nexport class TextChannelComponent extends TextBasedChannel {}\n","<div\n  *ngIf=\"channel && messages\"\n  (click)=\"onClick($event)\">\n  <div\n    *ngIf=\"(!guild && loadedAllMessages)\n      || (guild && perms.can(guild._id, 'READ_MESSAGES')); else lackingPerms\"\n    class=\"messages\"\n    infiniteScroll\n    [scrollWindow]=\"false\"\n    (scrolledUp)=\"false && loadMoreMessages()\">\n    <div\n      class=\"jumbotron pb-0\">\n      <p class=\"lead\">\n        Start of {{ title }} message history.\n      </p>\n      <hr>\n    </div>\n\n    <spinner *ngIf=\"!loadedAllMessages\"></spinner>\n  \n    <div\n      *ngFor=\"let message of messages; index as i; trackBy: identifyMessage\"\n      class=\"message\"\n      [id]=\"'message' + message._id\">\n      <message\n        [message]=\"message\"\n        [isExtra]=\"shouldCombine(i)\"\n        [member]=\"guildService.getMember(guild?._id, message.authorId)\"\n        [guild]=\"guild\"></message>\n    </div>\n  </div>\n\n  <ng-template #lackingPerms>\n    <div class=\"messages\">\n      <div class=\"jumbotron pb-0\">\n        <p class=\"lead\">\n          <i class=\"lni lni-eye text-muted\"></i>\n          <span> Message history of {{ title }} is hidden.</span>\n        </p>\n        <hr>\n      </div>\n    </div>\n  </ng-template>\n  \n  <div\n    *ngIf=\"channel\"\n    class=\"footer\">\n    <emoji-mart\n      *ngIf=\"emojiPickerOpen\"\n      class=\"float-right\"\n      emoji=\"joy\"\n      title=\"Pick an Emoji\"\n      (click)=\"emojiPickerOpen = !emojiPickerOpen\"\n      (emojiClick)=\"addEmoji($event)\"></emoji-mart>\n  \n    <mat-form-field\n      autoFocus\n      (keyup)=\"emitTyping()\"\n      (keyup.enter)=\"chat(message.value)\"\n      appearance=\"fill\"\n      class=\"d-block\">\n      <mat-label>Message {{ title }}</mat-label>\n      <textarea\n        [disabled]=\"guild && !perms.can(guild._id, 'SEND_MESSAGES')\"\n        id=\"chatBox\"\n        matInput\n        #message></textarea>\n  \n      <mat-icon\n        (click)=\"emojiPickerOpen = true\"\n        class=\"cursor-pointer emoji-icon mb-3\"\n        align=\"end\"\n        matSuffix>\n        <i class=\"lni lni-emoji-happy\"></i>\n      </mat-icon>\n    </mat-form-field>\n  \n    <div\n      *ngIf=\"typingUsernames.length <= 0\"\n      class=\"pt-3\"></div>\n    <div\n      *ngIf=\"typingUsernames.length > 0\"\n      class=\"typing\">\n      <strong>{{ typingUsernames.join(', ') }}</strong> {{ typingUsernames.length > 1 ? 'are' : 'is' }} typing...\n    </div>\n  </div>\n  <div *ngIf=\"!channel\">\n    <spinner></spinner>\n  </div>  \n</div>\n\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from './services/user.service';\r\nimport { ThemeService } from './services/theme.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { LogService } from './services/log.service';\r\nimport devtools from 'devtools-detect';\r\nimport { EventService } from './services/events/event.service';\r\nimport { getConfig } from './config';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  public get sfxEnabled() {\r\n    return getConfig('sfxEnabled');\r\n  }\r\n\r\n  constructor(\r\n    private eventService: EventService,\r\n    private themeService: ThemeService,\r\n    private userService: UserService,\r\n    private route: ActivatedRoute,\r\n    private log: LogService,\r\n  ) {}\r\n\r\n  public async ngOnInit() {\r\n    this.eventService.init();\r\n\r\n    this.themeService.updateTheme();\r\n    await this.userService.updateSelf();\r\n    \r\n    this.handlePrompt();\r\n    this.consoleWarning();\r\n  }\r\n\r\n  private handlePrompt() {\r\n    this.route.queryParamMap.subscribe(async (map) => {\r\n      const success = map.get('success');\r\n      const error = map.get('error');\r\n      if (success)\r\n        await this.log.success(success);\r\n      else if (error)\r\n        await this.log.error(error);\r\n    });\r\n  }\r\n\r\n  private consoleWarning() {\r\n    const interval = setInterval(() => {\r\n      if (!devtools.isOpen) return;\r\n\r\n      this.log.consoleWarning();\r\n      clearInterval(interval);\r\n    }, 100);\r\n  }\r\n}\r\n","<div id=\"errorPopup\" class=\"rounded popup p-2\" hidden></div>\n<div id=\"successPopup\" class=\"rounded popup p-2\" hidden></div>\n\n<router-outlet></router-outlet>\n","import { Injectable } from '@angular/core';\nimport { Lean } from '../types/entity-types';\nimport { SoundService } from './sound.service';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PingService {\n  private unread = new Map<string, string>();\n\n  constructor(\n    private sounds: SoundService,\n    private userService: UserService,\n  ) {}\n\n  public markAsRead(channelId: string) {\n    this.unread.delete(channelId);\n  }\n\n  public async add(channelId: string, lastMessageId: string) {\n    this.unread.set(channelId, lastMessageId);\n\n    await this.sounds.ping();\n  }\n\n  public lastRead(channelId: string) {\n    return this.unread.get(channelId);\n  }\n\n  public isUnread(channelId: string) {\n    return this.unread.has(channelId);\n  }\n\n  public isIgnored(message: Lean.Message, guildId?: string): boolean {\n    const user = this.userService.self;\n\n    return message.authorId === user._id\n      || user.ignored.channelIds.includes(message.channelId)\n      || user.ignored.guildIds.includes(guildId)\n      || user.ignored.userIds.includes(message.authorId);\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-3\">\n    <div class=\"developer-sidebar\">\n      <header\n        routerLink=\"/developers\"\n        class=\"cursor-pointer my-5\">\n        <a class=\"p-2 text-muted\" routerLink=\"/developers\">\n          <i class=\"lni lni-arrow-left mt-2\"></i>\n          <strong class=\"pl-2\">DASHBOARD</strong>\n        </a>\n      </header>\n      \n      <nav *ngIf=\"app\" class=\"side-nav mt-3\">\n        <a routerLinkActive=\"active\"\n          class=\"nav-link\"\n          [routerLink]=\"'/developers/applications/' + app._id\">\n          <i class=\"lni lni-eye\"></i> Overview</a>\n        <a routerLinkActive=\"active\"\n          class=\"nav-link\"\n          [routerLink]=\"'/developers/applications/' + app._id + '/user'\">\n          <i class=\"lni lni-robot\"></i> User</a>\n      </nav>\n    </div>\n  </div>\n\n  <div\n    *ngIf=\"app; else loading\"\n    class=\"col-8 m-4 mt-5\">\n    <header>\n      <h2>Bot User</h2>\n      <p class=\"lead\">General info about your bot user.</p>\n    </header>\n\n    <form #f=\"ngForm\" [formGroup]=\"form\" class=\"overflow-hidden\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <app-avatar-url\n            [user]=\"{ avatarURL: form.get('avatarURL').value }\"\n            size=\"96px\"></app-avatar-url>\n    \n          <mat-form-field appearance=\"outline\" class=\"ml-3\">\n            <mat-label>Avatar URL</mat-label>\n            <input\n              formControlName=\"avatarURL\"\n              type=\"url\"\n              matInput>\n          </mat-form-field>\n        </div>\n        \n        <div class=\"col-6\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Username</mat-label>\n            <input formControlName=\"username\" type=\"text\" matInput>\n            <mat-hint *ngIf=\"form.get('username').pending\"><i class=\"lni lni-circle-notch fa-spin\"></i> Checking</mat-hint>\n            <mat-error *ngIf=\"form.get('username').errors?.required\">Username is required.</mat-error>\n            <mat-error *ngIf=\"form.get('username').errors?.shouldBeUnique\">Username is already taken.</mat-error>\n            <mat-error *ngIf=\"form.get('username').errors?.pattern\">Username should follow the <a routerLink=\"/docs/usernames\">username rules</a>.</mat-error>\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-6\">\n          <h3>Token</h3>\n          <p class=\"lead\">Use this to log into the bot. Keep this safe!</p>\n          <input type=\"hidden\" value=\"hidden\" #shown>\n          <div class=\"token\" [hidden]=\"shown.value === 'hidden'\">{{ app.token }}</div>\n          <div class=\"buttons\">\n            <button\n              type=\"button\"\n              class=\"text-info\"\n              (click)=\"shown.value = (shown.value === 'shown') ? 'hidden' : 'shown'\"\n              [textContent]=\"(shown.value === 'shown') ? 'Hide' : 'Show'\"\n              mat-button></button>\n            <button\n              type=\"button\"\n              class=\"text-success\"\n              (click)=\"copyToken()\"\n              mat-button>Copy</button>\n            <button\n              type=\"button\"\n              class=\"text-danger\"\n              (click)=\"regenToken()\"\n              mat-button>Regen</button>\n          </div>\n        </div>\n\n        <div class=\"col-6\">\n          <div>\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Client ID</mat-label>\n              <input [value]=\"app._id\" type=\"text\" disabled matInput>\n            </mat-form-field>\n          </div>\n          <div>\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Bot ID</mat-label>\n              <input [value]=\"app.user._id\" type=\"text\" disabled matInput>\n            </mat-form-field>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n\n  <ng-template\n    class=\"col-6 d-flex justify-content-center\"\n    #loading>\n    <spinner></spinner>\n  </ng-template>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { UsernameValidators } from 'src/app/authentication/sign-up/username.validators';\nimport { SaveChangesComponent } from 'src/app/dashboard/components/save-changes/save-changes.component';\nimport { DevelopersService } from 'src/app/services/developers.service';\nimport { SoundService } from 'src/app/services/sound.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean, patterns } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-bot-user',\n  templateUrl: './bot-user.component.html',\n  styleUrls: ['../application/application.component.css', '../developers.component.css']\n})\nexport class BotUserComponent implements OnInit {\n  public form = new FormGroup({\n    avatarURL: new FormControl('', [ Validators.required ]),\n    username: new FormControl('', [\n      Validators.required,\n      Validators.pattern(patterns.username),\n    ], [ this.usernameValidators.shouldBeUnique.bind(this.usernameValidators) ]),\n  });\n\n  public originalForm: Lean.Application;\n  public app: Lean.Application;\n\n  private saveChanges$: Subscription;  \n  private valueChanges$: Subscription;\n  \n  constructor(\n    private route: ActivatedRoute,\n    public saveChanges: MatSnackBar,\n    public service: DevelopersService,\n    private sounds: SoundService,\n    private ws: WSService,\n    private usernameValidators: UsernameValidators,\n  ) {}\n\n  public async ngOnInit() {\n    const appId = this.route.snapshot.paramMap.get('id');\n\n    this.app = await this.service.getAsync(appId);\n    this.form.setValue({\n      avatarURL: this.app.user.avatarURL,\n      username: this.app.user.username,\n    });\n    this.originalForm = { ...this.form.value };\n\n    this.valueChanges$ = this.form.valueChanges\n      .subscribe(() => this.openSaveChanges()); \n  }\n\n  public ngOnDestroy() {    \n    this.valueChanges$?.unsubscribe();\n    this.saveChanges$?.unsubscribe();\n  }\n  \n  public openSaveChanges() {\n    const snackBarRef = this.saveChanges._openedSnackBarRef;    \n    if (this.form.invalid || snackBarRef) return;\n\n    this.saveChanges$ = this.saveChanges\n      .openFromComponent(SaveChangesComponent)\n      .afterOpened()\n      .subscribe(() => {\n        const component = this.saveChanges._openedSnackBarRef.instance as SaveChangesComponent;\n        if (!component) return;\n\n        component.onSave.subscribe(async() => await this.submit());\n        component.onReset.subscribe(async() => await this.reset());\n      });    \n  }\n\n  public async submit() {\n    if (this.form.invalid) return;\n\n    this.ws.emit('USER_UPDATE', {\n      key: this.app.token,\n      partialUser: this.form.value,\n    }, this);\n    this.originalForm = { ...this.form.value };\n    \n    await this.sounds.success();\n  }\n\n  public async reset() {\n    this.form.setValue({ ...this.originalForm });\n    \n    this.valueChanges$ = this.form.valueChanges\n      .subscribe(() => this.openSaveChanges()); \n  }\n\n  public async regenToken() {\n    this.app.token = await this.service.regenToken(this.app._id);\n  }\n\n  public copyToken() {\n    navigator.clipboard.writeText(this.app.token);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class PasswordValidators {\r\n  public static passwordsShouldMatch(control: AbstractControl): ValidationErrors | null {\r\n    const password = control.get('password').value;\r\n    const confirmPassword = control.get('confirmPassword').value;\r\n    \r\n    return (password !== confirmPassword)\r\n      ? { passwordMismatch: true }\r\n      : null;\r\n  }\r\n\r\n  public static newPasswordShouldNotMatch(control: AbstractControl): ValidationErrors | null {\r\n    const oldPassword = control.get('oldPassword').value;\r\n    const newPassword = control.get('newPassword').value;\r\n    \r\n    return (oldPassword === newPassword)\r\n      ? { passwordMatch: true }\r\n      : null;\r\n  }\r\n\r\n  public static emailOrUsernameRequired(control: AbstractControl): ValidationErrors | null {\r\n    const username = control.get('username').value;\r\n    const email = control.get('email').value;\r\n    \r\n    return (email || username)\r\n      ? null\r\n      : { emailOrUsernameRequired: true };\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { LogService } from 'src/app/services/log.service';\r\nimport { GuildService } from '../../services/guild.service';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.css']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private guildService: GuildService,\r\n    private log: LogService,\r\n    private userService: UserService,\r\n  ) {}\r\n\r\n  public async ngOnInit() {\r\n    try {\r\n      const key = this.route.snapshot.queryParamMap.get('key');\r\n      localStorage.setItem('key', key);\r\n    \r\n      await this.userService.updateSelf();\r\n      await this.guildService.fetchAll();\r\n      \r\n      await this.router.navigate(['/channels/@me']);\r\n    } catch(error) {\r\n      await this.log.error(error.message);\r\n      await this.router.navigate(['/']);\r\n    }\r\n  }\r\n}","<spinner></spinner>","import { Injectable } from '@angular/core';\nimport { getConfig } from '../config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SoundService {\n  private get sfxEnabled() {\n    return getConfig('sfxEnabled');\n  }\n\n  public async ping() {\n    await this.playSound('ping');\n  }\n  public async message() {\n    await this.playSound('message');\n  }\n  public async success() {\n    await this.playSound('success');\n  }\n  public async error() {\n    await this.playSound('error');\n  }\n\n  private async playSound(name: string) {\n    if (!this.sfxEnabled) return;\n\n    const audio: HTMLAudioElement = document.createElement('audio');\n    audio.setAttribute('src', `assets/audio/${name}.wav`);\n    audio.onended = () => audio.remove();\n    try {\n      await audio.play();\n    } catch {}\n  }\n}\n","const defaultValues = {\n  sfxEnabled: true,\n  memberListExpanded: true,\n  theme: 'HORIZON',\n}\n\nfor (const key in defaultValues) {\n  const currentValue = localStorage.getItem(key);\n  if (currentValue) continue;\n  \n  localStorage.setItem(key, defaultValues[key].toString());\n}\n\nexport function getConfig(key: ConfigKey): boolean {\n  return localStorage.getItem(key as string) == 'true';\n}\nexport function getConfigValue(key: ConfigKey): string {\n  return localStorage.getItem(key as string);\n}\nexport function setConfig(key: ConfigKey, value: any) {\n  localStorage.setItem(key as string, value.toString());\n}\n\ntype ConfigKey = keyof typeof defaultValues;\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { timestamp } from '../utils/utils';\n\n@Pipe({\n  name: 'timestamp'\n})\nexport class TimestampPipe implements PipeTransform {\n  transform(value: Date): string {\n    return timestamp(value);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { getConfigValue, setConfig } from '../config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ThemeService {\r\n  public get defaultTheme() {\r\n    return getConfigValue('theme');\r\n  }\r\n\r\n  public changeTheme(theme: string) {\r\n    setConfig('theme', theme);\r\n\r\n    this.updateTheme();\r\n  }\r\n\r\n  public updateTheme() {\r\n    document\r\n      .querySelector('html')\r\n      .setAttribute('theme', getConfigValue('theme'));\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-why',\n  templateUrl: './why.component.html',\n  styleUrls: ['./why.component.css']\n})\nexport class WhyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'snakeToSentenceCase'\r\n})\r\nexport class SnakeToSentenceCasePipe implements PipeTransform {\r\n  transform(words: string) {\r\n    return words\r\n      ?.split('_')\r\n      .map(w => w[0] + w.slice(1).toLowerCase())\r\n      .join(' ') ?? '';\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule, ErrorHandler, Injectable } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ShowOnDirtyErrorStateMatcher, ErrorStateMatcher } from '@angular/material/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { AuthComponent } from './authentication/auth/auth.component';\r\nimport { LoginComponent } from './authentication/login/login.component';\r\nimport { LogoutComponent } from './authentication/logout/logout.component';\r\nimport { DashboardOverviewComponent } from './dashboard/me/me-overview/me-overview.component';\r\nimport { SidebarComponent } from './dashboard/components/sidebar/sidebar.component';\r\nimport { GuildOverviewComponent } from './dashboard/guilds/guild-overview/guild-overview.component';\r\nimport { SpinnerComponent } from './utils/spinner/spinner.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { GuildSidebarComponent } from './dashboard/guilds/guild-sidebar/guild-sidebar.component';\r\nimport { MeSidebarComponent } from './dashboard/me/me-sidebar/me-sidebar.component';\r\nimport { MaterialModule } from './material-module';\r\nimport { SaveChangesComponent } from './dashboard/components/save-changes/save-changes.component';\r\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\r\nimport { CleanDateTimePipe } from './pipes/clean-date-time.pipe';\r\nimport { MemberUsernameComponent } from './dashboard/components/member-username/member-username.component';\r\nimport { ZippyComponent } from './utils/zippy/zippy.component';\r\nimport { MiniDatePipe } from './pipes/mini-date.pipe';\r\nimport { environment } from 'src/environments/environment';\r\nimport { SnakeToSentenceCasePipe } from './pipes/snake-to-sentence-case.pipe';\r\nimport { TruncatedPipe } from './pipes/truncated.pipe';\r\nimport { DurationStringPipe } from './pipes/duration-string.pipe';\r\nimport { CamelToSentenceCasePipe } from './pipes/camel-to-sentence-case.pipe';\r\nimport { WavesComponent } from './utils/waves/waves.component';\r\nimport { SignUpComponent } from './authentication/sign-up/sign-up.component';\r\nimport { DashboardNavbarComponent } from './dashboard/components/dashboard-navbar/dashboard-navbar.component';\r\nimport { TextChannelComponent } from './dashboard/guilds/text-channel/text-channel.component';\r\nimport { VoiceChannelComponent } from './dashboard/guilds/voice-channel/voice-channel.component';\r\nimport { CreateInviteComponent } from './dialog/create-invite/create-invite.component';\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\nimport { PickerModule } from '@ctrl/ngx-emoji-mart';\r\nimport { GuildSettingsComponent } from './dashboard/guilds/guild-settings/overview/guild-settings.component';\r\nimport { RolesComponent } from './dashboard/guilds/guild-settings/roles/roles.component';\r\nimport { InvitesComponent } from './dashboard/guilds/guild-settings/invites/invites.component';\r\nimport { FriendsListComponent } from './dashboard/me/friends-list/friends-list.component';\r\nimport { DMComponent } from './dashboard/me/dmchannel/dm.component';\r\nimport { UserSettingsComponent } from './dashboard/me/user-settings/user-settings.component';\r\nimport { BotListComponent } from './dashboard/guilds/guild-settings/bot-list/bot-list.component';\r\nimport { MessageEmbedComponent } from './dashboard/messages/message-embed/message-embed.component';\r\nimport { MessageComponent } from './dashboard/messages/message/message.component';\r\nimport { MemberListComponent } from './dashboard/guilds/member-list/member-list.component';\r\nimport { DevelopersComponent } from './pages/developers/developers.component';\r\nimport { ApplicationComponent } from './pages/developers/application/application.component';\r\nimport { BotUserComponent } from './pages/developers/bot-user/bot-user.component';\r\nimport { AvatarUrlComponent } from './dashboard/components/avatar-url/avatar-url.component';\r\nimport { VerifyComponent } from './authentication/verify/verify.component';\r\nimport { UserAccountComponent } from './dashboard/me/user-account/user-account.component';\r\nimport { SettingsSidebarComponent } from './dashboard/components/settings-sidebar/settings-sidebar.component';\r\nimport { SubmarineComponent } from './cool/submarine/submarine.component';\r\nimport { InviteComponent } from './pages/invite/invite.component';\r\nimport { CountdownPipe } from './countdown.pipe';\r\nimport { CreateChannelComponent } from './dialog/create-channel/create-channel.component';\r\nimport { CreateGuildComponent } from './dialog/create-guild/create-guild.component';\r\nimport { ComingSoonComponent } from './utils/coming-soon/coming-soon.component';\r\nimport { LighthouseComponent } from './cool/lighthouse/lighthouse.component';\r\nimport { ChannelTabComponent } from './dashboard/components/channel-tab/channel-tab.component';\r\nimport { GuildNavbarComponent } from './dashboard/components/guild-navbar/guild-navbar.component';\r\nimport { ProfileComponent } from './dialog/profile/profile.component';\r\nimport { GuildIconComponent } from './dashboard/components/guild-icon/guild-icon.component';\r\nimport { AddFriendComponent } from './dialog/add-friend/add-friend.component';\r\nimport { WhyComponent } from './pages/why/why.component';\r\nimport { TimestampPipe } from './pipes/timestamp.pipe';\r\n\r\n@Injectable()\r\nexport class AlertErrorHandler implements ErrorHandler {\r\n  async handleError(error: Error) {\r\n    try {\r\n      console.log(error.stack);\r\n\r\n      const key = localStorage.getItem('key');\r\n      await fetch(`${environment.endpoint}/error?key=${key}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message: error.message }),\r\n      });\r\n    } finally {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavbarComponent,\r\n    HomeComponent,\r\n    AuthComponent,\r\n    LoginComponent,\r\n    LogoutComponent,\r\n    DashboardOverviewComponent,\r\n    SidebarComponent,\r\n    GuildOverviewComponent,\r\n    SpinnerComponent,\r\n    GuildSidebarComponent,\r\n    MeSidebarComponent,\r\n    SaveChangesComponent,\r\n    NotFoundComponent,\r\n    CleanDateTimePipe,\r\n    MemberUsernameComponent,\r\n    ZippyComponent,\r\n    MiniDatePipe,\r\n    SnakeToSentenceCasePipe,\r\n    TruncatedPipe,\r\n    DurationStringPipe,\r\n    CamelToSentenceCasePipe,\r\n    MessageComponent,\r\n    WavesComponent,\r\n    LoginComponent,\r\n    SignUpComponent,\r\n    DashboardNavbarComponent,\r\n    TextChannelComponent,\r\n    VoiceChannelComponent,\r\n    CreateInviteComponent,\r\n    MessageEmbedComponent,\r\n    GuildSettingsComponent,\r\n    RolesComponent,\r\n    InvitesComponent,\r\n    FriendsListComponent,\r\n    DMComponent,\r\n    UserSettingsComponent,\r\n    BotListComponent,\r\n    MemberListComponent,\r\n    DevelopersComponent,\r\n    ApplicationComponent,\r\n    BotUserComponent,\r\n    AvatarUrlComponent,\r\n    VerifyComponent,\r\n    UserAccountComponent,\r\n    SettingsSidebarComponent,\r\n    SubmarineComponent,\r\n    InviteComponent,\r\n    CountdownPipe,\r\n    CreateChannelComponent,\r\n    CreateGuildComponent,\r\n    ComingSoonComponent,\r\n    LighthouseComponent,\r\n    ChannelTabComponent,\r\n    GuildNavbarComponent,\r\n    ProfileComponent,\r\n    GuildIconComponent,\r\n    AddFriendComponent,\r\n    WhyComponent,\r\n    TimestampPipe,\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    MaterialModule,\r\n    InfiniteScrollModule,\r\n    PickerModule\r\n  ],\r\n  providers: [\r\n    { provide: ErrorHandler, useClass: AlertErrorHandler },\r\n    { provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher },\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n","<navbar></navbar>\n\n<waves></waves>\n\n<section class=\"main\">\n  <div *ngIf=\"guild && userService.self\" class=\"text-center\">\n    <p class=\"lead\">You have been invited to</p>\n    <h1>{{ guild._id }}</h1>\n    <hr>\n    <button (click)=\"join()\" class=\"bg-primary\" mat-button>Join</button>\n  </div>\n\n  <div *ngIf=\"guild && !userService.self\" >\n    <p class=\"lead\">You have been invited to</p>\n    <h1>{{ guild._id }}</h1>\n    <hr>\n    <button [routerLink]=\"'/sign-up&redirect=/invite/' + invite._id\" class=\"bg-success\" mat-button>Join</button>\n  </div>\n  \n  <div *ngIf=\"!guild\" class=\"text-center\">\n    <p class=\"lead\">This invite is</p>\n    <h1 class=\"text-danger\">Invalid</h1>\n  </div>\n\n  <app-submarine></app-submarine>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { GuildService } from 'src/app/services/guild.service';\nimport { InviteService } from 'src/app/services/invite.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-invite',\n  templateUrl: './invite.component.html',\n  styleUrls: ['./invite.component.css']\n})\nexport class InviteComponent implements OnInit {\n  public guild: Lean.Guild;\n  public invite: Lean.Invite;\n\n  constructor(\n    public route: ActivatedRoute,\n    public router: Router,\n    public guildService: GuildService,\n    public userService: UserService,\n    public invites: InviteService,\n    private ws: WSService,\n  ) {}\n\n  public async ngOnInit() {\n    const code = this.route.snapshot.paramMap.get('id');\n    const invite = await this.invites.fetch(code);\n\n    if (this.guildService.getAsync(invite.guildId))\n      return this.router.navigate([`/channels/${invite.guildId}`]);\n  }\n\n  public join() {\n    this.ws.on('GUILD_JOIN', (args) =>\n      this.guildService.upsert(args.guild._id, args.guild), this);\n\n    this.ws.emit('GUILD_MEMBER_ADD', { inviteCode: this.invite._id }, this);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { ChannelService } from '../services/channel.service';\nimport { UserService } from '../services/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DMChannelAuthGuard implements CanActivate {\n  constructor(\n    private channelService: ChannelService,\n    private router: Router,\n    private userService: UserService) {}\n\n  public async canActivate(route: ActivatedRouteSnapshot) {\n    await this.userService.init();\n    await this.channelService.init();\n\n    const channelId = route.paramMap.get('channelId');\n    const dmChannelExists = this.channelService.dmChannels.find(c => c._id === channelId);\n      \n    if (!dmChannelExists) {\n      this.router.navigate(['/channels/@me']);\n      return true;\n    }\n    return true;\n  }\n  \n}\n","<navbar></navbar>\n\n<header class=\"text-center\">\n  <h1 class=\"mt-5\">Enter Code</h1>\n  <p class=\"lead\">Check the email associated with this account for the verification code.</p>\n</header>\n\n<section class=\"text-center\">\n  <form \n  #f=\"ngForm\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"submit()\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Code</mat-label>\n      <input formControlName=\"code\" type=\"text\" matInput>\n    </mat-form-field>\n\n    <div>\n      <div\n        *ngIf=\"form.errors?.invalidCode\"\n        class=\"text-danger m-2\">Code is invalid</div>\n    \n      <button\n        *ngIf=\"!processing\"\n        color=\"success\"\n        mat-button>Verify</button>\n    </div>\n  </form>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserAuthService } from 'src/app/services/user-auth.service';\n\n@Component({\n  selector: 'app-verify',\n  templateUrl: './verify.component.html',\n  styleUrls: ['./verify.component.css']\n})\nexport class VerifyComponent implements OnInit {\n  public processing = false;\n\n  public form = new FormGroup({\n    code: new FormControl('', [\n      Validators.required,\n      Validators.minLength(7),\n      Validators.maxLength(7),\n    ])\n  });\n\n  constructor(\n    private authService: UserAuthService,\n    private route: ActivatedRoute,\n    private router: Router,\n  ) {}\n\n  public async ngOnInit() {\n    const code = this.route.snapshot.queryParamMap.get('code');\n    if (code) {\n      this.form.get('code').setValue(code);\n      await this.submit();\n    }\n  }\n\n  public async submit() {\n    try {\n      if (this.form.invalid) return;\n  \n      const code = this.form.get('code').value;\n      const key = await this.authService.verify(code);\n      localStorage.setItem('key', key);\n\n      await this.router.navigate(['/channels/@me']);\n    } catch (error) {\n      this.form.setErrors({ invalidCode: error.message });\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-3\">\n    <div class=\"developer-sidebar\">\n      <header\n        routerLink=\"/developers\"\n        class=\"cursor-pointer my-5\">\n        <img src=\"/assets/img/icon.png\" alt=\"Accord Icon\">\n        <span class=\"p-2\">Developer Dashboard</span>\n      </header>\n      \n      <nav class=\"side-nav mt-3\">\n        <a routerLinkActive=\"active\"\n          class=\"nav-link\"\n          routerLink=\"/developers\">\n          <i class=\"lni lni-code pt-2\"></i>\n          <span>Apps</span>\n        </a>\n        <a routerLinkActive=\"active\"\n          class=\"nav-link\"\n          [href]=\"environment.docsURL\"\n          target=\"#\">\n          <i class=\"lni lni-library-open pt-2\"></i>\n          <span>Docs</span>\n        </a>\n      </nav>\n    </div>\n  </div>\n\n  <div class=\"col-8\">\n    <div class=\"row mt-2\">\n      <div class=\"col-10\"></div>\n      <div class=\"col-2\">\n        <button mat-button [matMenuTriggerFor]=\"menu\" class=\"p-1\">\n          <app-avatar-url [user]=\"userService.self\"></app-avatar-url>\n          <span class=\"pl-1\">{{ userService.self.username }}</span>\n        </button>\n      </div>\n    </div>\n\n    <mat-menu #menu=\"matMenu\">\n      <button routerLink=\"/channels/@me\" mat-menu-item>\n        <i class=\"lni lni-cog\"></i> Open\n      </button>\n      <hr>\n      <button routerLink=\"/developers\" mat-menu-item>\n        <i class=\"lni lni-code\"></i> Developers\n      </button>\n      <button routerLink=\"/logout\" mat-menu-item>\n        <i class=\"lni lni-sign-out-alt\"></i> Logout\n      </button>\n    </mat-menu>\n    \n    <div class=\"applications\">\n      <header class=\"mt-5\">\n        <button\n          (click)=\"create()\"\n          class=\"float-right round bg-primary-gradient\"\n          matTooltip=\"New Application\"\n          mat-button>\n          <strong><i class=\"lni lni-plus text-light pt-2\"></i></strong>\n        </button>\n        <h1>Applications</h1>\n        <p class=\"lead\">Manage bot applications in the Accord developer dashboard.</p>\n      </header>\n      <div\n        *ngIf=\"applications; else applicationsLoading\"\n        class=\"row pt-2\">\n        <div\n          *ngFor=\"let app of applications\" class=\"col-sm-6 col-lg-3 my-2\"\n          [routerLink]=\"'/developers/applications/' + app._id\">\n          <div\n            [matTooltip]=\"app.name\"\n            class=\"icon rounded-lg cursor-pointer text-center\">{{ getAbbr(app.name) }}</div>\n        </div>\n      </div>\n    </div>\n\n    <ng-template #applicationsLoading>\n      <spinner></spinner>\n    </ng-template>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { DevelopersService } from 'src/app/services/developers.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-developers',\n  templateUrl: './developers.component.html',\n  styleUrls: ['./developers.component.css']\n})\nexport class DevelopersComponent implements OnInit {\n  public applications = [];\n  public environment = environment;\n\n  constructor(\n    private router: Router,\n    private service: DevelopersService,\n    public userService: UserService,\n  ) {}\n\n  public async ngOnInit() {\n    this.applications = await this.service.fetchAll();\n  }\n\n  public async create() {\n    try {\n      const app = await this.service.create();\n      \n      await this.router.navigate([`/developers/applications/`, app?._id]);\n    } catch (apiError) {\n      alert(apiError.message);\n    }\n  }\n\n  public getAbbr(name: string) {\n    return name\n      .split(' ')\n      .map(n => n[0].toUpperCase())\n      .slice(0, 3)\n      .join('');\n  }\n}\n","import { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { SaveChangesComponent } from './save-changes/save-changes.component';\r\nimport { GuildService } from '../../services/guild.service';\r\nimport {  OnDestroy, Directive } from '@angular/core';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nimport { Subscription } from 'rxjs';\r\nimport { WSService } from '../../services/ws.service';\r\nimport { LogService } from '../../services/log.service';\r\nimport { Lean } from 'src/app/types/entity-types';\r\n\r\n@Directive()\r\nexport abstract class ModuleConfig implements OnDestroy {\r\n  public form: FormGroup;\r\n  public guild: Lean.Guild;\r\n  public originalGuild: Lean.Guild;\r\n\r\n  public get guildId() { return this.route.snapshot.paramMap.get('guildId'); }\r\n\r\n  private saveChanges$: Subscription;  \r\n  private valueChanges$: Subscription;  \r\n  \r\n  constructor(\r\n    protected guildService: GuildService,\r\n    protected route: ActivatedRoute,\r\n    public saveChanges: MatSnackBar,\r\n    protected ws: WSService,\r\n    protected log: LogService,\r\n    protected router: Router) {}\r\n\r\n  /**\r\n   * Load all required data for the form, and hook events.\r\n   */\r\n  public async init() {    \r\n    this.guild = this.guildService.getCached(this.guildId);\r\n    this.originalGuild = { ...this.guild };\r\n    \r\n    await this.resetForm();\r\n\r\n    this.valueChanges$ = this.form.valueChanges\r\n      .subscribe(() => this.openSaveChanges());\r\n  }\r\n\r\n  private async resetForm() {   \r\n    this.guild = { ...this.originalGuild };   \r\n    this.form = await this.buildForm(this.guild);\r\n  }\r\n\r\n  /**\r\n   * Build the form to be used.\r\n   * Called when on form init.\r\n   */\r\n  public abstract buildForm(guild: Lean.Guild): FormGroup | Promise<FormGroup>;\r\n  \r\n  public openSaveChanges() {\r\n    const snackBarRef = this.saveChanges._openedSnackBarRef;\r\n    if (this.form.invalid || snackBarRef) return;\r\n\r\n    this.saveChanges$ = this.saveChanges.openFromComponent(SaveChangesComponent).afterOpened()\r\n    .subscribe(() => {\r\n      const component = this.saveChanges._openedSnackBarRef.instance as SaveChangesComponent;\r\n      component.onSave.subscribe(() => this.submit());\r\n      component.onReset.subscribe(() => this.reset());\r\n    });    \r\n  }\r\n\r\n  /**\r\n   * Clean up subscriptions - to prevent memory leak.\r\n   */  \r\n  public ngOnDestroy() {    \r\n    this.valueChanges$?.unsubscribe();\r\n    this.saveChanges$?.unsubscribe();\r\n  }\r\n\r\n  /** Send the form data to the API. */\r\n  public async submit() {\r\n    try {\r\n      if (!this.form.valid) return;\r\n\r\n      await this.ws.emitAsync('GUILD_UPDATE', {\r\n        guildId: this.guildId,\r\n        partialGuild: this.form.value,\r\n      }, this);\r\n    } catch (error) {\r\n      await this.log.error(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset form values, and rebuild form.\r\n   */\r\n  public async reset() {\r\n    await this.resetForm();\r\n    this.guild = { ...this.originalGuild };\r\n    \r\n    this.form.valueChanges\r\n      .subscribe(() => this.openSaveChanges()); \r\n  }\r\n  \r\n  public async deleteGuild() {\r\n    const confirmation = confirm(`Please confirm that you wish to delete ${this.guild.name}.`);\r\n    if (!confirmation) return;\r\n\r\n    this.guildService.deleteGuild(this.guildId);\r\n\r\n    await this.router.navigate(['/channels/@me']);\r\n    await this.log.success();\r\n  }\r\n\r\n  // input events\r\n\r\n  public add(event: MatChipInputEvent, array: any[]) {    \r\n    const { value, input } = event;\r\n  \r\n    if ((value || '').trim())\r\n      array.push(value.trim());\r\n  \r\n    if (input) \r\n      input.value = '';\r\n\r\n    this.openSaveChanges();\r\n  }\r\n  \r\n  public remove(item: any, array: any[]) {\r\n    const index = array.indexOf(item);\r\n    if (index >= 0)\r\n      array.splice(index, 1);\r\n    \r\n    this.openSaveChanges();\r\n  }\r\n\r\n  public getChannel(id: string) {\r\n    return this.guild.channels.find(c => c._id === id);\r\n  }\r\n}","<guild-sidebar>\r\n  <app-guild-navbar\r\n    [activeChannel]=\"textChannel.channel\"\r\n    [guild]=\"guild\"\r\n    (toggleMemberList)=\"memberList.isExpanded = !memberList.isExpanded\"></app-guild-navbar>\r\n\r\n  <div class=\"row\">\r\n    <div\r\n      class=\"text-channel-container\"\r\n      [class]=\"(memberList.isExpanded) ? 'col-lg-7 col-md-5 col-xl-9': 'col-12'\">\r\n      <section\r\n        *ngIf=\"!activeChannel\"\r\n        class=\"jumbotron\">\r\n        <p class=\"lead\">\r\n          <i class=\"lni lni-directions mr-1\"></i>\r\n          <span>Nothing here yet.</span>\r\n        </p>\r\n        <hr>\r\n        <p>No channels here, just emptiness.</p>\r\n      </section>\r\n\r\n      <app-text-channel #textChannel></app-text-channel>\r\n    </div>\r\n\r\n    <div\r\n      [hidden]=\"!memberList.isExpanded\"\r\n      class=\"col-xl-3 col-lg-5 col-md-7\">\r\n      <app-member-list\r\n        [guild]=\"guild\"\r\n        #memberList></app-member-list>\r\n    </div>\r\n  </div>\r\n</guild-sidebar>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ChannelService } from 'src/app/services/channel.service';\r\nimport { Lean } from 'src/app/types/entity-types';\r\nimport { GuildService } from '../../../services/guild.service';\r\n\r\n@Component({\r\n  selector: 'app-guild-overview',\r\n  templateUrl: './guild-overview.component.html',\r\n  styleUrls: ['./guild-overview.component.css']\r\n})\r\nexport class GuildOverviewComponent implements OnInit {\r\n  public activeChannel: Lean.Channel;\r\n  public guild: Lean.Guild;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private channelService: ChannelService,\r\n    private guildService: GuildService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  public async ngOnInit() {\r\n    this.route.paramMap.subscribe(async (paramMap) => {\r\n      const guildId = paramMap.get('guildId');\r\n      const channelId = paramMap.get('channelId');\r\n\r\n      this.guild = this.guildService.getCached(guildId);\r\n      this.activeChannel = await this.channelService.getAsync(channelId);\r\n      \r\n      const defaultChannel = this.guild.channels.filter(c => c.type === 'TEXT')[0];            \r\n      if (defaultChannel && !channelId)\r\n        await this.router.navigate([`/channels/${guildId}/${defaultChannel._id}`]);\r\n    });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { ChannelService } from 'src/app/services/channel.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { Lean } from 'src/app/types/entity-types';\nimport { TextChannelComponent } from '../../guilds/text-channel/text-channel.component';\n\n@Component({\n  selector: 'app-dm',\n  templateUrl: './dm.component.html',\n  styleUrls: ['./dm.component.css']\n})\nexport class DMComponent implements OnInit {\n  public activeChannel: Lean.Channel;\n\n  constructor(\n    private route: ActivatedRoute,\n    public channelService: ChannelService,\n  ) {}\n\n  public async ngOnInit() {\n    this.route.paramMap.subscribe(async (paramMap) => {\n      const channelId = paramMap.get('channelId');\n      this.activeChannel = this.channelService.getCached(channelId);\n    });\n  }\n}\n","<dashboard-sidebar>\n  <dashboard-navbar>      \n    <i class=\"fas fa-at pr-2 text-muted\"></i>\n    <strong>me</strong>\n\n    <i class=\"lni lni-plus mx-2\"></i>\n    <i class=\"fas fa-at pr-2 text-muted\"></i>\n    <strong>{{ channelService.getRecipient(activeChannel._id)?.username }}</strong>\n  </dashboard-navbar>\n\n  <app-text-channel></app-text-channel>\n</dashboard-sidebar>\n","<div\n  *ngIf=\"perms.can(guild._id, 'VIEW_CHANNELS')\"\n  #menuTrigger=\"matMenuTrigger\"\n  [matMenuTriggerFor]=\"channelMenu\"\n  (contextmenu)=\"openMenu($event, menuTrigger)\">\n  <div *ngIf=\"channel.type === 'TEXT'\">\n    <a (click)=\"$event.stopPropagation()\"\n      class=\"nav-item nav-link\"\n      [routerLink]=\"'/channels/' + guild._id + '/' + channel._id\"\n      routerLinkActive=\"active\">        \n      <span class=\"float-right text-muted p-1\">\n        <i *ngIf=\"pings.isUnread(channel._id)\"\n          matTooltip=\"Unread Pings\"\n          class=\"lni lni-circle\"></i>\n      </span>\n    \n      <i class=\"fas fa-hashtag pr-1\"\n        [ngClass]=\"{\n          'text-muted': userService.self.ignored.channelIds.includes(channel._id),\n          'text-warning': pings.isUnread(channel._id)\n        }\"></i>\n      <span>{{ channel.name }}</span>\n      <span *ngIf=\"pings.isUnread(channel._id)\" class=\"ml-2\">\n        <i class=\"lni lni-circle text-danger\"></i>\n      </span>\n    </a>\n  </div>\n    \n  <div *ngIf=\"channel.type === 'VOICE'\">\n    <voice-channel\n      (click)=\"$event.stopPropagation()\"\n      [channel]=\"channel\"\n      [guild]=\"guild\"></voice-channel>\n  </div>\n</div>\n\n<mat-menu\n  #channelMenu=\"matMenu\"\n  matMenuContent>\n  <h6 class=\"p-2 text-center\">#{{ channel.name }}</h6>\n\n  <div (click)=\"$event.stopPropagation()\">\n    <button\n      *ngIf=\"perms.can(guild._id, 'MANAGE_CHANNELS')\"\n      (click)=\"delete()\"\n      class=\"text-danger\"\n      mat-menu-item>\n      <i class=\"lni lni-trash\" aria-hidden=\"true\"></i>\n      <span class=\"ml-2\">Delete</span>\n    </button>\n    \n    <hr>\n    <div class=\"p-2\">\n      <i class=\"lni lni-dev\"></i>\n      <code> {{ channel._id }}</code>\n    </div>\n  </div>\n</mat-menu>\n","import { Component, Input } from '@angular/core';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { Router } from '@angular/router';\nimport { GuildService } from 'src/app/services/guild.service';\nimport { LogService } from 'src/app/services/log.service';\nimport { PermissionsService } from 'src/app/services/permissions.service';\nimport { PingService } from 'src/app/services/ping.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-channel-tab',\n  templateUrl: './channel-tab.component.html',\n  styleUrls: ['./channel-tab.component.css']\n})\nexport class ChannelTabComponent {\n  @Input() public channel: Lean.Channel;\n\n  public get guild() {\n    return this.guildService.getCached(this.channel.guildId);\n  }\n\n  constructor(\n    private guildService: GuildService,\n    public perms: PermissionsService,\n    public pings: PingService,\n    public router: Router,\n    public userService: UserService,\n    private ws: WSService,\n  ) {}\n\n  public openMenu(event: MouseEvent, menuTrigger: MatMenuTrigger) {\n    event.preventDefault();\n    menuTrigger.menu.focusFirstItem('mouse');\n    menuTrigger.openMenu();\n  }\n\n  public async delete() {\n    const confirmation = confirm(\n      `Are you sure you want to delete channel '${this.channel.name}'?\\n` +\n      `Messages here will also be deleted, and cannot be recovered.`\n      .trim());\n    if (!confirmation) return;\n\n    await this.ws.emitAsync('CHANNEL_DELETE', { channelId: this.channel._id }, this);\n    await this.router.navigate([`/channels/${this.guild._id}`]);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-coming-soon',\n  templateUrl: './coming-soon.component.html',\n  styleUrls: ['./coming-soon.component.css']\n})\nexport class ComingSoonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<navbar></navbar>\n\n<app-lighthouse></app-lighthouse>\n<waves></waves>\n\n<section class=\"main\">\n  <div class=\"text-center\">\n    <h1>Coming Soon</h1>\n    <h2 class=\"text-secondary\">...</h2>\n  </div>\n\n  <app-submarine></app-submarine>\n</section>\n","import { Injectable } from '@angular/core';\nimport { ChannelEventService } from './channel-event.service';\nimport { MyEventService } from './my-event.service';\nimport { WSService } from '../ws.service';\nimport { GuildEventService } from './guild-event.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n  constructor(\n    private me: MyEventService,\n    private channels: ChannelEventService,\n    private guilds: GuildEventService,\n    private ws: WSService,\n  ) {}\n\n  public init() {\n    this.ws\n      .on('ADD_FRIEND', this.me.addFriend, this.me)\n      .on('CHANNEL_CREATE', this.guilds.addChannel, this.guilds)\n      .on('CHANNEL_DELETE', this.guilds.deleteChannel, this.guilds)\n      .on('GUILD_DELETE', this.guilds.delete, this.guilds)\n      .on('GUILD_JOIN', this.me.joinGuild, this.me)\n      .on('GUILD_LEAVE', this.guilds.delete, this.guilds)\n      .on('GUILD_MEMBER_ADD', this.guilds.addMember, this.guilds)\n      .on('GUILD_MEMBER_UPDATE', this.guilds.updateMember, this.guilds)\n      .on('GUILD_MEMBER_REMOVE', this.guilds.removeMember, this.guilds)\n      .on('GUILD_ROLE_CREATE', this.guilds.createRole, this.guilds)\n      .on('GUILD_ROLE_DELETE', this.guilds.deleteRole, this.guilds)\n      .on('GUILD_ROLE_UPDATE', this.guilds.updateRole, this.guilds)\n      .on('GUILD_UPDATE', this.guilds.update, this.guilds)\n      .on('MESSAGE_CREATE', this.channels.addMessage, this.channels)\n      .on('MESSAGE_UPDATE', this.channels.updateMessage, this.channels)\n      .on('MESSAGE_DELETE', this.channels.deleteMessage, this.channels)\n      .on('PING', this.channels.ping, this.channels)\n      .on('PRESENCE_UPDATE', this.me.updatePresence, this.me)\n      .on('REMOVE_FRIEND', this.me.updateFriends, this.me)\n      .on('TYPING_START', this.channels.startTyping, this.channels)\n      .on('USER_UPDATE', this.me.updateUser, this.me);\n  }\n}","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'truncated'\r\n})\r\nexport class TruncatedPipe implements PipeTransform {\r\n\r\n  transform(words: string, max: number) {\r\n    return words.substring(0, max) + '...';\r\n  }\r\n}\r\n","<app-settings-sidebar\n  *ngIf=\"user\"\n  tabType=\"user\">\n  <div class=\"content\">\n    <h5 class=\"mb-4\">User Overview</h5>\n    <div class=\"row\">\n      <div class=\"col-xl-6 col-12\">\n        <div\n          routerLinkActive=\"active\"\n          class=\"user-icon round\">\n          <app-avatar-url\n            class=\"pl-2 pb-3 ml-4 mt-3\"\n            [user]=\"avatarUser\"\n            size=\"128px\"></app-avatar-url>\n        </div>\n\n        <form\n          *ngIf=\"form\"\n          #f=\"ngForm\"\n          [formGroup]=\"form\">\n          <mat-form-field appearance=\"outline\" class=\"ml-5\">\n            <mat-label>Avatar URL</mat-label>\n            <input formControlName=\"avatarURL\" type=\"url\" matInput>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\" class=\"ml-5\">\n            <mat-label>Username</mat-label>\n            <input formControlName=\"username\" type=\"text\" matInput>\n            <mat-hint *ngIf=\"form.get('username').pending\"><i class=\"lni lni-circle-notch fa-spin\"></i> Checking</mat-hint>\n            <mat-error *ngIf=\"form.get('username').errors?.required\">Username is required.</mat-error>\n            <mat-error *ngIf=\"form.get('username').errors?.minlength\">Username should be minimum {{ form.get('username').errors?.minlength.requiredLength }} characters.</mat-error>\n            <mat-error *ngIf=\"form.get('username').errors?.shouldBeUnique\">Username is already taken.</mat-error>\n            <mat-error *ngIf=\"form.get('username').errors?.pattern\">Username should follow the <a routerLink=\"/docs/usernames\">username rules</a>.</mat-error>\n          </mat-form-field>\n        </form>\n      </div>\n\n      <div class=\"col-lg-6 col-12\">\n        <div class=\"avatars rounded p-3\">\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <h5 class=\"pl-2\">Choose an Avatar</h5>\n            </div>\n            <div\n              *ngFor=\"let name of avatarNames\"\n              class=\"col-xl-3 col-sm-4 col-12\">\n              <img (click)=\"setAvatar(name)\"\n                [src]=\"environment.endpoint + '/avatars/' + name + '.png'\" [alt]=\"name\">\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"col-lg-6 col-12 mt-4\">\n        <h6>Message Preview</h6>\n        <message\n          [message]=\"previewMessages[0]\"\n          [avatarURL]=\"form.get('avatarURL').value\"></message>\n        <message\n          [message]=\"previewMessages[1]\"\n          [isExtra]=\"true\"\n          [avatarURL]=\"form.get('avatarURL').value\"></message>\n        <message\n          [message]=\"previewMessages[2]\"\n          [avatarURL]=\"form.get('avatarURL').value\"></message>\n      </div>\n    </div>\n\n    <hr>\n\n    <div class=\"row\">\n      <div class=\"col-lg-3 col-md-4 col-6\">    \n        <mat-form-field appearance=\"outline\" class=\"ml-3 m-2\">\n          <mat-label>Theme</mat-label>\n          <mat-select\n            [value]=\"currentTheme\"\n            (selectionChange)=\"themes.changeTheme(themeSelect.value)\"\n            #themeSelect>\n              <mat-option value=\"CHOCOLATE\">Chocolate</mat-option>\n              <mat-option value=\"CLONE\">Clone</mat-option>\n              <mat-option value=\"COSMIC\">Cosmic</mat-option>\n              <mat-option value=\"DISCORD\">Discord</mat-option>\n              <mat-option value=\"HORIZON\">Horizon (Default)</mat-option>\n              <mat-option value=\"IONIC\" selected>Ionic</mat-option>\n              <mat-option value=\"PAIN\">Pain</mat-option>\n              <mat-option value=\"TWILIGHT\">Twilight</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n  \n      <div class=\"col-lg-3 col-md-4 col-6\">\n        <div class=\"pt-4\">\n          <label for=\"sfxEnabled\">Enable Sound Effects</label>\n          <mat-checkbox\n            id=\"sfxEnabled\"\n            (input)=\"toggleSounds(sfxEnabledInput.checked)\"\n            [checked]=\"sfxEnabled\"\n            class=\"ml-2\"\n            #sfxEnabledInput></mat-checkbox>\n        </div>\n      </div>\n    </div>\n  </div>\n</app-settings-sidebar>\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LogService } from 'src/app/services/log.service';\nimport { ThemeService } from 'src/app/services/theme.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { UsernameValidators } from 'src/app/authentication/sign-up/username.validators';\nimport { UserConfig } from 'src/app/dashboard/components/user-config';\nimport { environment } from 'src/environments/environment';\nimport { Lean, patterns } from 'src/app/types/entity-types';\nimport faker from 'faker';\nimport { getConfig, setConfig } from 'src/app/config';\n\n@Component({\n  selector: 'app-user-settings',\n  templateUrl: './user-settings.component.html',\n  styleUrls: ['./user-settings.component.css'],\n})\nexport class UserSettingsComponent extends UserConfig implements AfterViewInit {\n  @ViewChild('themeSelect')\n  public themeSelect: MatSelect;\n  public environment = environment;\n  public previewMessages: Lean.Message[] = [];\n\n  public readonly avatarNames = [\n    'avatar_aqua',\n    'avatar_coffee',\n    'avatar_fire',\n    'avatar_gold',\n    'avatar_grey',\n    'avatar_rainbow',\n    'avatar_sky',\n    'avatar_tree',\n  ];\n\n  public get avatarUser() {\n    return {\n      avatarURL: this.form.get('avatarURL').value,\n      username: this.user.username,\n    };\n  }\n  public get currentTheme() {\n    return localStorage.getItem('theme');\n  }\n  public get sfxEnabled() {\n    return getConfig('sfxEnabled');\n  }\n\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    userService: UserService,\n    snackbar: MatSnackBar,\n    ws: WSService,\n    log: LogService,\n    public themes: ThemeService,\n    private usernameValidators: UsernameValidators,\n  ) {\n    super(userService, route, snackbar, ws, log, router);\n  }\n\n  public async ngAfterViewInit() {\n    await super.init();\n\n    const messageCount = 3;\n    for (let i = 0; i < messageCount; i++)\n      this.previewMessages.push({\n        authorId: this.user._id,\n        content: faker.lorem.sentence(),\n        channelId: '',\n        createdAt: new Date(),\n      } as any);      \n\n    this.themeSelect\n      ?.writeValue(localStorage\n        .getItem('theme') ?? this.themes.defaultTheme);\n\n    this.themes.updateTheme();    \n  }\n\n  public buildForm(user: Lean.User): FormGroup | Promise<FormGroup> {\n    return new FormGroup({\n      avatarURL: new FormControl(user.avatarURL, [\n        Validators.required,\n      ]),\n      username: new FormControl(user.username, [\n        Validators.required,\n        Validators.maxLength(32),\n        Validators.pattern(patterns.username),\n      ], [ this.usernameValidators.shouldBeUnique.bind(this.usernameValidators) ]),\n    });\n  }\n\n  public toggleSounds(enabled: boolean) {\n    setConfig('sfxEnabled', enabled);\n  }\n\n  public setAvatar(name: string) {        \n    this.form\n      .get('avatarURL')\n      .setValue(`${environment.endpoint}/avatars/${name}.png`);\n  }\n}\n","// REMEMBER: Sync types below with Website project.\n// -> in entity-types.ts\nexport namespace Lean {\n  export interface Application {\n    _id: string;\n    createdAt: Date;\n    description: string;\n    name: string;\n    owner: User;\n    user: User;\n    token: string | never;\n  }\n  export interface Channel {\n    _id: string;\n    createdAt: Date;\n    guildId?: string;\n    memberIds?: string[];\n    name?: string;\n    summary?: string;\n    type: ChannelTypes.Type;\n  }\n  export interface Guild {\n    _id: string;\n    name: string;\n    createdAt: Date;\n    nameAcronym: string;\n    iconURL?: string;\n    ownerId: string;\n    channels: Channel[];\n    members: GuildMember[];\n    roles: Role[];\n  }\n  export interface GuildMember {\n    _id: string;\n    guildId: string;\n    roleIds: string[];\n    userId: string;\n  }  \n  export interface Invite {\n    _id: string;\n    createdAt: Date;\n    options?: InviteTypes.Options;\n    inviterId: string;\n    guildId: string;\n    uses: number;\n  }  \n  export interface Message {\n    _id: string;\n    authorId: string;\n    channelId: string;\n    content: string;\n    createdAt: Date;\n    embed?: MessageTypes.Embed;\n    updatedAt?: Date;\n  }\n  export interface Role {\n    _id: string;\n    color?: string;\n    createdAt: Date;\n    guildId: string;\n    hoisted: boolean;\n    mentionable: boolean;\n    name: string;\n    permissions: number;\n    position: number;\n  }\n  export interface User {\n    _id: string;\n    avatarURL: string;\n    badges: UserTypes.BadgeType[];\n    bot: boolean;\n    createdAt: Date;\n    friendIds: string[];\n    friendRequestIds: string[];\n    guilds: string[] | Lean.Guild[];\n    status: UserTypes.StatusType;\n    username: string;\n    verified?: boolean;\n  } \n}\n\nexport namespace ChannelTypes {\n  export type Type = 'DM' | 'TEXT' | 'VOICE';\n\n  export interface DM extends Lean.Channel {\n    memberIds: string[];\n    guildId: never;\n    summary: never;\n    type: 'DM';\n  }\n  export interface Text extends Lean.Channel {\n    memberIds: never;\n    type: 'TEXT';\n  }\n  export interface Voice extends Lean.Channel {\n    memberIds: string[];\n    summary: never;\n    type: 'VOICE';\n  }\n}\n\nexport namespace GeneralTypes {\n  export interface SnowflakeEntity {\n    _id: string;\n  }\n}\n\nexport namespace InviteTypes {\n  export interface Options {\n    expiresAt?: Date;\n    maxUses?: number;\n  }\n}\n\nexport namespace MessageTypes {\n  export interface Embed {\n    description: string;\n    image: string;\n    title: string;\n    url: string;\n  }\n}\n\nexport namespace PermissionTypes {\n  export enum General {\n    VIEW_CHANNELS = 1024,\n    MANAGE_NICKNAMES = 512,\n    CHANGE_NICKNAME = 256,\n    CREATE_INVITE = 128,\n    KICK_MEMBERS = 64,\n    BAN_MEMBERS = 32,\n    MANAGE_CHANNELS = 16,\n    MANAGE_ROLES = 8,\n    MANAGE_GUILD = 4,\n    VIEW_AUDIT_LOG = 2,\n    ADMINISTRATOR = 1\n  }\n  export enum Text {\n    ADD_REACTIONS = 2048 * 16,\n    MENTION_EVERYONE = 2048 * 8,\n    READ_MESSAGES = 2048 * 4,\n    MANAGE_MESSAGES = 2048 * 2,\n    SEND_MESSAGES = 2048\n  }\n  export enum Voice {\n    MOVE_MEMBERS = 32768 * 8,\n    MUTE_MEMBERS = 32768 * 4,\n    SPEAK = 32768 * 2,\n    CONNECT = 32768\n  }\n  export const All = {\n    ...General,\n    ...Text,\n    ...Voice,\n  }\n  export type Permission = General | Text | Voice;\n\n  export type PermissionString = keyof typeof All;\n  \n  export const defaultPermissions =\n    PermissionTypes.General.VIEW_CHANNELS\n    | PermissionTypes.General.CREATE_INVITE\n    | PermissionTypes.Text.SEND_MESSAGES\n    | PermissionTypes.Text.READ_MESSAGES\n    | PermissionTypes.Text.ADD_REACTIONS\n    | PermissionTypes.Voice.CONNECT\n    | PermissionTypes.Voice.SPEAK;\n}\n\nexport namespace UserTypes {\n  export type BadgeType = 'VIEWER' | 'DEVELOPER';\n  export class Ignored {\n    channelIds: string[] = [];\n    guildIds: string[] = [];\n    userIds: string[] = [];\n  }\n  export type StatusType = 'ONLINE' | 'BUSY' | 'AFK' | 'OFFLINE';\n  export interface Self extends Lean.User {\n    guilds: Lean.Guild[];\n    email: string;\n    verified: true;\n    lastReadMessages: {\n      [k: string]: string\n    };\n    ignored: {\n      channelIds: string[];\n      guildIds: string[];\n      userIds: string[];\n    };\n  }\n}\n\nexport const patterns = {\n  email: /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/,\n  hexColor: /^#(?:[0-9a-fA-F]{3}){1,2}$/,\n  password: /(?=.*[a-zA-Z0-9!@#$%^&*])/,\n  snowflake: /^\\d{18}$/,\n  status: /^ONLINE|^BUSY$|^AFK$|^OFFLINE$/,\n  textChannelName: /^[A-Za-z\\-\\d]{2,32}$/,\n  username: /(^(?! |^everyone$|^here$|^me$|^someone$|^discordtag$)[A-Za-z\\d\\-\\_]{2,32}(?<! )$)/,\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from 'src/environments/environment';\nimport { UserService } from './user.service';\nimport { WSService } from './ws.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserAuthService {\n  private endpoint = environment.endpoint;\n\n  public get loggedIn() {\n    const expired = new JwtHelperService().isTokenExpired(this.key);\n    return this.userService.self && !expired;\n  }\n  public get key() {\n    return localStorage.getItem('key');\n  }\n\n  public get headers() {\n    return { headers: { 'Authorization': `Bearer ${this.key}` } };\n  }\n\n  constructor(\n    private http: HttpClient,\n    private userService: UserService,\n    private ws: WSService,\n  ) {}\n\n  public async signUp(user: Credentials) {\n    const res: any = await this.http.post(`${this.endpoint}/users`, user).toPromise();\n\n    if (res) {\n      localStorage.setItem('key', res);\n      await this.userService.updateSelf();\n    }\n    return Boolean(res);\n  }\n\n  public async login(user: Credentials) {\n    const res: string | { verify: true } = await this.http\n      .post(`${this.endpoint}/login`, user)\n      .toPromise() as any;      \n\n    if (typeof res !== 'string')\n      return res;\n\n    localStorage.setItem('key', res);\n    await this.userService.init();\n  }\n\n  public async verify(code: string): Promise<string> {\n    const res: string | { message: string } = await this.http\n      .get(`${this.endpoint}/verify-code?code=${code}`)\n      .toPromise() as any;\n    if (typeof res !== 'string')\n      throw res.message;\n    return res;\n  }\n\n  public async sendVerifyEmail(email: string): Promise<boolean> {\n    const res = await this.http.get(`${this.endpoint}/send-verify-email?email=${email}`, this.headers).toPromise() as any;\n    return 'verify' in res;\n  }\n\n  public async changePassword(email: string, oldPassword: string, newPassword: string): Promise<boolean> {\n    const res = await this.http\n      .post(`${this.endpoint}/change-password`, {\n        email,\n        oldPassword,\n        newPassword,\n      }, this.headers)\n      .toPromise() as any;\n\n    localStorage.setItem('key', res);\n    return true;\n  }\n\n  public ready() {\n    return this.ws.emitAsync('READY', { key: localStorage.getItem('key') }, this);\n  }\n}\n\nexport interface Credentials {\n  username?: string;\n  email?: string;\n  password: string;\n}\n","<nav class=\"navbar navbar-expand-md\">\r\n  <a class=\"navbar-brand\" routerLink=\"/\">\r\n    <h1>\r\n      <span class=\"text-light\">accord</span>\r\n      <span class=\"text-tertiary\">.</span>\r\n      <span class=\"text-secondary\">app</span>\r\n    </h1>\r\n  </a>\r\n  <button\r\n    class=\"navbar-toggler\"\r\n    type=\"button\"\r\n    data-toggle=\"collapse\"\r\n    data-target=\"#navbarSupportedContent\"\r\n    aria-controls=\"navbarSupportedContent\"\r\n    aria-expanded=\"false\"\r\n    aria-label=\"Toggle navigation\">\r\n    <i class=\"lni lni-menu\"></i>\r\n  </button>\r\n\r\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <div class=\"nav navbar-nav\">\r\n      <a class=\"nav-item nav-link\" \r\n        routerLink=\"/docs\" \r\n        routerLinkActive=\"active\">\r\n        <i class=\"lni lni-library\" aria-hidden=\"true\"></i> Docs\r\n      </a>\r\n    </div>\r\n  \r\n    <div class=\"nav navbar-nav ml-auto\">\r\n      <div class=\"d-md-none d-block mt-2\"></div>\r\n      <div *ngIf=\"!user\">\r\n        <a class=\"nav-item nav-link\" routerLink=\"/login\">\r\n          <i class=\"lni lni-user\" aria-hidden=\"true\"></i> Login\r\n        </a>\r\n      </div>\r\n      <div *ngIf=\"user\">\r\n        <mat-button\r\n          class=\"nav-item nav-link bg-primary text-light rounded cursor-pointer mr-3\"\r\n          routerLink=\"/channels/@me\">\r\n          <i class=\"lni lni-chevron-right-circle\" aria-hidden=\"true\"></i>\r\n          <strong> Open</strong>\r\n        </mat-button>     \r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n  <button routerLink=\"/channels/@me\" mat-menu-item>\r\n    <i class=\"lni lni-cog\"></i> Open\r\n  </button>\r\n  <hr>\r\n  <button routerLink=\"/developers\" mat-menu-item>\r\n    <i class=\"lni lni-code\"></i> Developers\r\n  </button>\r\n  <button routerLink=\"/logout\" mat-menu-item>\r\n    <i class=\"lni lni-sign-out-alt\"></i> Logout\r\n  </button>\r\n</mat-menu>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../../services/user.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n  githubURL = environment.githubURL;\r\n\r\n  get user() { return this.userService.self; }\r\n\r\n  constructor(private userService: UserService) {}\r\n\r\n  async ngOnInit() {\r\n    await this.userService.init();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { SoundService } from './sound.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LogService {\r\n  private hidePopupMs = 3 * 1000;\r\n\r\n  constructor(\r\n    private sounds: SoundService,\r\n  ) {}\r\n\r\n  private get hhMMSS() {\r\n    return new Date()\r\n      .toTimeString()\r\n      .split(' ')[0];\r\n  }\r\n\r\n  public info(message: string, src?: string) {\r\n    console.log(`%c[${this.hhMMSS}]`, 'color: green', `[${src?.toUpperCase() ?? '???'}]`, `${message}`);\r\n  }\r\n\r\n  public warning(message: string, src?: string) {\r\n    console.log(`%c[${this.hhMMSS}]`, 'color: yellow', `[${src?.toUpperCase() ?? '???'}]`, `${message}`);\r\n  }\r\n\r\n  public async success(message?: string) {\r\n    if (message) {\r\n      const popup = document.querySelector('#successPopup') as HTMLDivElement;\r\n      popup.removeAttribute('hidden');\r\n      popup.innerText = message;\r\n\r\n      setTimeout(() => popup.toggleAttribute('hidden'), this.hidePopupMs);\r\n    }     \r\n\r\n    await this.sounds.success();\r\n  }\r\n\r\n  public async error(message?: string) {\r\n    if (message) {\r\n      const popup = document.querySelector('#errorPopup') as HTMLDivElement;\r\n      popup.removeAttribute('hidden');\r\n      popup.innerText = message;\r\n\r\n      setTimeout(() => popup.toggleAttribute('hidden'), this.hidePopupMs);\r\n    }     \r\n\r\n    await this.sounds.error();\r\n  }\r\n\r\n  public consoleWarning() {\r\n    console.log(`%cAttention!`, `color: red; font-size: 32px; font-weight: 900;`);\r\n    console.log(\r\n      `%cIf someone told you to paste something in this console, it's probably against the TOS and could steal your account.`,\r\n      `color: darkred; font-size: 16px; font-weight: 700;`\r\n    );\r\n  }\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.css']\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div id=\"spinner\" class=\"text-center\">\n  <span></span><span></span><span></span><span></span><span></span>\n</div>","<mat-sidenav-container fullscreen>\r\n  <mat-sidenav mode=\"side\" opened #drawer>\r\n    <div class=\"guilds px-2\">\r\n      <div class=\"user\">\r\n        <div\r\n          routerLinkActive=\"active\"\r\n          routerLink=\"/channels/@me\"\r\n          class=\"guild-icon\">\r\n          <app-avatar-url\r\n            [user]=\"user\"\r\n            [size]=\"'52px'\"></app-avatar-url>\r\n        </div>\r\n        <span class=\"d-flex justify-content-center\">\r\n          <h5 class=\"text-muted\">.</h5>\r\n        </span>\r\n      </div>\r\n      <app-guild-icon\r\n        *ngFor=\"let guild of guilds\"\r\n        [guild]=\"guild\"\r\n        [matTooltip]=\"guild.name\"></app-guild-icon>\r\n      <div\r\n        (click)=\"dialog.createGuild()\"\r\n        class=\"guild-icon add-guild bg-transparent cursor-pointer\"\r\n        matTooltip=\"Add a Guild\">\r\n        <span class=\"add-guild pt-0 d-flex justify-content-center flex-column\">+</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"options\">\r\n      <ng-content select=\".side-nav\"></ng-content>\r\n\r\n      <footer class=\"d-flex\">\r\n        <app-avatar-url\r\n          [user]=\"user\"\r\n          size=\"48px\"\r\n          class=\"pt-2\"></app-avatar-url>\r\n        <h6 class=\"username text-overflow-ellipsis\">{{ user.username }}</h6>\r\n\r\n        <div class=\"ml-auto\">\r\n          <button\r\n            id=\"settingsButton\"\r\n            matTooltip=\"Settings\"\r\n            routerLink=\"/channels/@me/settings\"\r\n            class=\"mr-2 p-2\"\r\n            mat-button>\r\n            <i class=\"lni lni-cog\"></i>          \r\n          </button>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content>\r\n    <ng-content select=\"#content\"></ng-content>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { UserService } from '../../../services/user.service';\r\nimport { GuildService } from '../../../services/guild.service';\r\nimport { MatDrawer } from '@angular/material/sidenav';\r\nimport { ChannelService } from 'src/app/services/channel.service';\r\nimport { PingService } from 'src/app/services/ping.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CreateGuildComponent } from 'src/app/dialog/create-guild/create-guild.component';\r\nimport { DialogService } from 'src/app/services/dialog.service';\r\n\r\n@Component({\r\n  selector: 'sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.css']\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n  @ViewChild('drawer') drawer: MatDrawer;\r\n\r\n  get guilds() { return this.guildService.guilds || []; }\r\n  get user() { return this.userService.self; }\r\n\r\n  constructor(\r\n    public channelService: ChannelService,\r\n    public guildService: GuildService,\r\n    private userService: UserService,\r\n    public dialog: DialogService,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.channelService.init();\r\n    await this.guildService.init();\r\n  }\r\n\r\n  public toggle() {\r\n    const icon = document.querySelector('#nav-icon1');\r\n    icon.classList.toggle('open');\r\n    this.drawer.toggle();\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatRippleModule} from '@angular/material/core';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {ColorPickerModule} from 'ngx-color-picker';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\n\r\n@NgModule({\r\n  exports: [\r\n    ColorPickerModule,\r\n    CdkTableModule,\r\n    // DragDropModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatChipsModule,\r\n    MatCheckboxModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatRippleModule,\r\n    MatSortModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSelectModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule,\r\n    MatMenuModule,\r\n    MatCardModule,\r\n  ]\r\n})\r\nexport class MaterialModule {}\r\n\r\n\r\n/**  Copyright 2019 Google LLC. All Rights Reserved.\r\n    Use of this source code is governed by an MIT-style license that\r\n    can be found in the LICENSE file at http://angular.io/license */","import { AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { Lean } from 'src/app/types/entity-types';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-avatar-url',\n  templateUrl: './avatar-url.component.html',\n  styleUrls: ['./avatar-url.component.css']\n})\nexport class AvatarUrlComponent implements AfterViewInit {\n  @Input() public user: Lean.User;\n  @Input() public size = '32px';\n\n  @ViewChild('img')\n  private img: ElementRef;\n\n  private unknownImageURL = `${environment.endpoint}/avatars/unknown.png`;\n\n  public ngAfterViewInit() {\n    const image = this.img.nativeElement as HTMLImageElement;\n    image.onerror = () => image.src = this.unknownImageURL; \n  }\n}\n","<img\n  [src]=\"user.avatarURL\" \n  [alt]=\"user.username + '\\'s Avatar'\"\n  [style.width]=\"size\"\n  [style.height]=\"size\"\n  class=\"d-inline cursor-pointer\"\n  #img>\n","<div class=\"cursor-pointer\" hidden>\n  <a (click)=\"join()\" \n    routerLinkActive=\"active\"\n    class=\"nav-item nav-link\">\n    <i class=\"lni lni-volume-up text-muted\"></i> {{ channel.name }}</a>\n    <div *ngFor=\"let id of channel.memberIds\"\n      class=\"ml-4\">\n      <member-username\n        [user]=\"userService.getCached(id)\"\n        [voice]=\"true\"></member-username>\n    </div>\n</div>","import { Component, Input, OnInit } from '@angular/core';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { ChannelTypes, Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'voice-channel',\n  templateUrl: './voice-channel.component.html',\n  styleUrls: ['./voice-channel.component.css']\n})\nexport class VoiceChannelComponent implements OnInit {\n  @Input() channel: ChannelTypes.Voice;\n  @Input() guild: Lean.Guild;\n\n  constructor(public userService: UserService) {}\n\n  async ngOnInit() {\n    await this.userService.init();\n  }\n  \n  public async join() {\n    alert('join');\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-lighthouse',\n  templateUrl: './lighthouse.component.html',\n  styleUrls: ['./lighthouse.component.css']\n})\nexport class LighthouseComponent {}\n","<!-- https://codepen.io/chrisota/pen/sugId -->\n<div id=\"lighthouse\">\n  <div id=\"top\"></div>\n  <div id=\"glass\"></div>\n  <div id=\"balcony\"></div>\n  <div class=\"row\"></div>\n  <div class=\"row\"></div>\n  <div class=\"row\"></div>\n  <div class=\"row\"></div>\n</div>\n","<navbar></navbar>\n<section class=\"container text-center pb-5\">\n  <div class=\"py-2 mt-5 d-none d-sm-block\"></div>\n\n  <h2 class=\"display-4 mb-4 mt-5\">Login</h2>\n\n  <form\n    #f=\"ngForm\"\n    [formGroup]=\"form\"\n    (ngSubmit)=\"login()\">\n    <input\n      value=\"username\"\n      type=\"hidden\"\n      #loginWith>\n\n    <div class=\"form-group\">\n      <mat-form-field\n        *ngIf=\"loginWith.value === 'username'\"\n        appearance=\"outline\">\n        <mat-label for=\"username\">Username</mat-label>\n        <input formControlName=\"username\"\n          id=\"username\" type=\"text\" autocomplete=\"username\" matInput>\n        <mat-error *ngIf=\"username.errors?.pattern\">Username is invalid.</mat-error>\n      </mat-form-field>\n\n      <mat-form-field\n        *ngIf=\"loginWith.value === 'email'\"\n        appearance=\"outline\">\n        <mat-label for=\"email\">Email</mat-label>\n        <input formControlName=\"email\"\n          id=\"email\" type=\"email\" autocomplete=\"email\" matInput>\n        <mat-error *ngIf=\"email.errors?.pattern\">Email is invalid.</mat-error>\n      </mat-form-field>\n\n      <a (click)=\"toggleLoginWith()\"\n        class=\"cursor-pointer d-block\">\n        Login with {{ (loginWith.value === 'email') ? 'Username' : 'Email' }}\n      </a>\n    </div>\n    <div class=\"form-group\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label for=\"password\">Password</mat-label>\n        <input formControlName=\"password\"\n          id=\"password\" type=\"password\" autocomplete=\"current-password\" matInput>\n        <mat-error *ngIf=\"password.errors\">Password is required.</mat-error>\n      </mat-form-field>\n    </div>\n\n    <button\n      [disabled]=\"processing\"\n      class=\"bg-primary mb-2\"\n      type=\"submit\"\n      mat-button>\n      <span\n        *ngIf=\"processing\"\n        class=\"spinner-border spinner-border-sm\"\n        role=\"status\"\n        aria-hidden=\"true\"></span>\n      Login\n    </button>\n    <div>Or <a\n      [routerLink]=\"['/sign-up']\"\n      [queryParams]=\"{ redirect: redirect }\">create an account</a>.</div>\n  </form>\n</section>","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LogService } from 'src/app/services/log.service';\nimport { patterns } from 'src/app/types/entity-types';\nimport { Credentials, UserAuthService } from '../../services/user-auth.service';\nimport { PasswordValidators } from '../sign-up/password.validators';\n\n@Component({\n  selector: 'login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  @ViewChild('loginWith')\n  public loginWith: ElementRef;\n\n  constructor(\n    private auth: UserAuthService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private log: LogService,\n  ) {}\n\n  public form = new FormGroup({\n    username: new FormControl('', [\n      Validators.pattern(patterns.username),\n    ]),\n    email: new FormControl('', [\n      Validators.pattern(patterns.email),\n    ]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.pattern(patterns.password),\n    ]),\n  }, [ PasswordValidators.emailOrUsernameRequired ]);\n  processing = false;\n\n  public get email() { return this.form.get('email'); }\n  public get password() { return this.form.get('password'); }\n  public get username() { return this.form.get('username'); }\n\n  public get redirect() {\n    return this.route.snapshot.queryParamMap.get('redirect')\n      ?? '/channels/@me';\n  }\n\n  public async login() {\n    const user: Credentials = this.form.value;    \n    if (this.form.invalid) return;\n\n    try {\n      this.processing = true;\n      const res = await this.auth.login(user);\n      if (res.verify)        \n        return this.router.navigate([`/auth/verify`]); \n\n      this.router.navigate([ this.redirect ]);\n    } catch (error) {\n      this.processing = false;\n      this.form.setErrors({ invalidLogin: true });\n\n      await this.log.error(error.message);\n    }\n  }\n\n  public toggleLoginWith() {\n    const value = this.loginWith.nativeElement.value;\n    const email = this.form.get('email');\n    const username = this.form.get('username');\n\n    if (value === 'email') {\n      username.setValue(email.value);\n      email.reset();\n    }\n    else {\n      email.setValue(username.value);\n      username.reset();\n    }\n    \n    this.loginWith.nativeElement.value = (value === 'email')\n      ? 'username'\n      : 'email';\n  }\n}\n","<app-settings-sidebar\n  tabType=\"guild\"\n  [id]=\"guild?._id\">\n  <div class=\"content\">\n    <h5 class=\"mb-4\">Invites</h5>\n    <div class=\"row\">\n      <div\n        *ngFor=\"let invite of invites\"\n        class=\"col-12\">\n        <zippy [title]=\"invite._id\">\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <span>Created By</span>\n              <member-username [user]=\"userService.getCached(invite.inviterId)\"></member-username>              \n            </div>\n            <div class=\"col-md-2\">\n              <div><strong>Uses</strong></div>\n              <code>{{ usesString(invite) }}</code>\n            </div>\n            <div class=\"col-md-2\">\n              <div><strong>Created At</strong></div>\n              <code>{{ invite.createdAt | date:'medium' }}</code>\n            </div>\n            <div class=\"col-md-2\">\n              <div><strong>Expires</strong></div>\n              <code>{{ (invite.options.expiresAt | date) || 'Never' }}</code>\n            </div>\n            <div class=\"col-md-2\">\n              <div\n                (click)=\"delete(invite._id)\"\n                matTooltip=\"Delete\"\n                class=\"float-right\">\n                <button class=\"bg-danger\" mat-button>\n                  <i class=\"lni lni-close text-light\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </zippy>\n      </div>\n\n      <div *ngIf=\"invites?.length <= 0\">\n        <span>\n          <i class=\"fas fa-info-circle mr-2\"></i>\n          <span>No invites created yet.</span>\n        </span>\n      </div>\n    </div>\n  </div>\n</app-settings-sidebar>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { GuildService } from 'src/app/services/guild.service';\nimport { LogService } from 'src/app/services/log.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-invites',\n  templateUrl: './invites.component.html',\n  styleUrls: ['./invites.component.css', '../overview/guild-settings.component.css']\n})\nexport class InvitesComponent implements OnInit {\n  public invites: Lean.Invite[];\n  public guild: Lean.Guild;\n\n  constructor(\n    private route: ActivatedRoute,\n    private guildService: GuildService,\n    public log: LogService,\n    public userService: UserService,\n    public ws: WSService,\n  ) {}\n\n  public async ngOnInit() {\n    const guildId = this.route.snapshot.paramMap.get('guildId');\n    this.guild = this.guildService.getCached(guildId);\n    this.invites = await this.guildService.getInvites(guildId);\n\n    this.hookWSEvents();\n  }\n\n  public usesString(invite: Lean.Invite) {\n    return (invite.options.maxUses)\n      ? `${invite.uses}/${invite.options.maxUses}`\n      : invite.uses;\n  }\n\n  private hookWSEvents() {\n    this.ws.on('INVITE_DELETE', async ({ inviteCode }) => {\n      await this.log.success();\n\n      const index = this.invites.findIndex(i => i._id === inviteCode);\n      this.invites.splice(index, 1);\n    }, this);\n  }\n\n  public delete(inviteCode: string) {\n    this.ws.emit('INVITE_DELETE', { inviteCode }, this);\n  }\n}\n","import { hacker } from 'faker';\r\n\r\nexport function toIterable(length: number) {\r\n  const array = [];\r\n  for (let i = 0; i < length; i++)\r\n    array.push(i);\r\n  return array;\r\n}\r\n\r\nexport function camelToSentenceCase(words: string) {\r\n  const regex = /([A-Z])(?=[a-z][A-Z])|([a-z])(?=[A-Z])/g;\r\n  return words\r\n      .replace(regex, '$& ')[0]\r\n      .toUpperCase() +\r\n    words\r\n      .replace(regex, '$& ')\r\n      .slice(1);\r\n}\r\n\r\nexport function sentenceToCamelCase(words: string) {\r\n  const capitalized = words\r\n    .replace(/\\s+(.)/g, (match, group) => group.toUpperCase());\r\n  return capitalized[0].toLowerCase() + capitalized.slice(1);\r\n}\r\n\r\nexport function kebabToCamelCase(words: string) {\r\n  const arr = words.split('-');\r\n  const capital = arr.map((item, index) =>\r\n    index ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() : item);\r\n\r\n  const capitalized = capital.join('');\r\n  return capitalized[0].toLowerCase() + capitalized.slice(1);\r\n}\r\n\r\nexport function generateUsername() {\r\n  return `${hacker\r\n    .adjective()\r\n    .replace(/ /, '')}-${hacker\r\n    .noun()\r\n    .replace(/ /, '')}`\r\n}\r\n\r\nexport function uuid() {\r\n  const s4 = () => Math\r\n    .floor((1 + Math.random()) * 0x10000)\r\n    .toString(16)\r\n    .substring(1);  \r\n  return 'u' + new Array(8)\r\n    .fill('')\r\n    .map(s4)\r\n    .join('');  \r\n}\r\n\r\nexport function timestamp(date: Date) { \r\n  date = new Date(date);\r\n  const timestamp = date.toTimeString().slice(0, 5);\r\n  \r\n  if (getDaysAgo(date))\r\n    return `Today at ${timestamp}`;\r\n  else if (getDaysAgo(date, -1))\r\n    return `Yesterday at ${timestamp}`;\r\n  else if (getDaysAgo(date, 1))\r\n    return `Tomorrow at ${timestamp}`;\r\n\r\n  return date\r\n    .toJSON()\r\n    .slice(0,10)\r\n    .split('-')\r\n    .reverse()\r\n    .join('/');\r\n}\r\nfunction getDaysAgo(date: Date, days = 0) {\r\n  return date.getDate() === new Date().getDate() + days\r\n    && date.getMonth() === new Date().getMonth()\r\n    && date.getFullYear() === new Date().getFullYear()\r\n}\r\n\r\nexport const array = {\r\n  ascendingBy: (key: string) => (a, b) => (a[key] > b[key]) ? 1 : -1,\r\n  descendingBy: (key: string) => (a, b) => (a[key] < b[key]) ? 1 : -1,\r\n  distinctBy: (key: string) => (value, index, self) => self.findIndex(v => v[key] === value[key]) === index,\r\n};\r\n","<app-settings-sidebar\n  tabType=\"guild\"\n  [id]=\"guild?._id\">\n  <div class=\"content\">\n    <div class=\"row\">\n      <div class=\"col-3 side-nav navbar-dark\">\n        <div class=\"navbar-nav\">\n          <!-- TODO: use member-username -->\n          <a\n            *ngFor=\"let app of apps\"\n            (click)=\"selectedApp = app\"\n            routerLinkActive=\"active\"\n            class=\"nav-item nav-link\">{{ app.user.username }}</a>\n          <div class=\"float-right\"></div>\n        </div>\n\n        <hr class=\"my-4\">\n\n        <p class=\"text-muted\">Bots can do <code>cool</code> things for your guilds.</p>\n      </div>\n      <div\n        *ngIf=\"selectedApp\"\n        class=\"col-9 role-details\">\n        <img\n          [src]=\"selectedApp.user.avatarURL\"\n          [alt]=\"selectedApp.user.username + ' Avatar'\"\n          class=\"rounded-lg float-left mr-4\">\n        <h1>{{ selectedApp.user.username }}</h1>\n        <hr>\n        <p class=\"lead text-muted\">{{ selectedApp.description }}</p>\n        \n        <div class=\"mt-3\">\n          <button\n            *ngIf=\"!botInGuild\"\n            (click)=\"addBot(selectedApp.user._id)\"\n            class=\"bg-success rounded\"\n            mat-button>Add</button>\n          <button\n            *ngIf=\"botInGuild\"\n            (click)=\"removeBot(selectedApp.user._id)\"\n            class=\"bg-danger rounded\"\n            mat-button>Remove</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</app-settings-sidebar>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ModuleConfig } from 'src/app/dashboard/components/module-config';\nimport { DevelopersService } from 'src/app/services/developers.service';\nimport { GuildService } from 'src/app/services/guild.service';\nimport { LogService } from 'src/app/services/log.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-bot-list',\n  templateUrl: './bot-list.component.html',\n  styleUrls: [\n    './bot-list.component.css',\n    '../../guild-settings/overview/guild-settings.component.css'\n  ]\n})\nexport class BotListComponent extends ModuleConfig implements OnInit {\n  public apps: Lean.Application[];\n  public selectedApp: Lean.Application;\n\n  public get botInGuild() {\n    return this.guild.members.some(m => m.userId === this.selectedApp._id);\n  }\n\n  constructor(\n    route: ActivatedRoute,\n    router: Router,\n    guildService: GuildService,\n    snackbar: MatSnackBar,\n    ws: WSService,\n    log: LogService,\n    private dev: DevelopersService,\n  ) {\n    super(guildService, route, snackbar, ws, log, router);\n  }\n\n  public async ngOnInit() {\n    await super.init();\n    \n    this.apps = await this.dev.fetchAll();\n    this.selectedApp = this.apps[0];\n  }\n\n  public buildForm() {\n    return new FormGroup({});\n  }\n\n  public async addBot(botId: string) {    \n    await this.guildService.addBot(this.guildId, botId);\n    await this.guildService.fetchAll();\n  }\n\n  public async removeBot(botId: string) {\n    const member = this.guildService.getMember(this.guildId, botId);\n    await this.guildService.kick(this.guildId, member._id);\n    await this.guildService.fetchAll();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ChannelService } from '../channel.service';\nimport { GuildService } from '../guild.service';\nimport { UserService } from '../user.service';\nimport { Args } from '../ws.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MyEventService {\n  constructor(\n    private channelService: ChannelService,\n    private guildService: GuildService,\n    private router: Router,\n    private userService: UserService,\n  ) {}\n\n  public async addFriend({ sender, friend, dmChannel }: Args.AddFriend) {\n    this.updateFriends({ sender, friend });\n    if (dmChannel)\n      this.channelService.add(dmChannel);\n  }\n  public updateFriends({ sender, friend }: Args.RemoveFriend) {\n    this.userService.upsert(sender._id, sender);    \n    this.userService.upsert(friend._id, friend);\n  }\n\n  public async joinGuild({ guild }: Args.GuildJoin) {\n    await this.userService.fetchAll();\n    this.guildService.add(guild);\n\n    await this.router.navigate([`/channels/${guild._id}`]);\n  }\n\n  public updatePresence({ userId, status }: Args.PresenceUpdate) {\n    this.userService.upsert(userId, { status });\n  }\n\n  public updateUser({ partialUser }: Args.UserUpdate) {\n    const user = this.userService.self;\n    this.userService.upsert(user._id, partialUser);\n  }\n}\n","<div class=\"side side-nav navbar-dark\">\n  <div class=\"navbar-nav float-right\">\n    <h2 class=\"category text-secondary overflow-ellipsis\">{{ tabCategory }}</h2>\n\n    <a *ngFor=\"let tab of tabs[tabType]\"\n      [routerLinkActiveOptions]=\"{ exact: true }\"\n      [routerLink]=\"canAccess(tab) ? tab.href() : './'\"\n      [class.disabled]=\"!canAccess(tab)\"\n      routerLinkActive=\"active\"\n      class=\"nav-item nav-link\">\n      <i class=\"mr-1\" [class]=\"tab.icon\"></i>\n      <span>{{ tab.name }}</span>\n    </a>\n\n    <div *ngIf=\"tabType === 'user'\">\n      <hr>\n      <a routerLink=\"/logout\"\n        class=\"text-danger nav-item nav-link\">\n        <i class=\"lni lni-user text-danger\"></i>\n        <span> Logout</span>\n      </a>\n    </div>\n  </div>\n</div>\n\n<div class=\"main\">\n  <div class=\"close-container\">\n    <div\n      (click)=\"close()\"\n      class=\"close round btn float-right\"\n      mat-button><i class=\"lni lni-close\"></i></div>\n  </div>\n\n  <div class=\"main-content\">\n    <ng-content select=\".content\"></ng-content></div>\n</div>","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { PermissionsService } from 'src/app/services/permissions.service';\nimport { PermissionTypes } from 'src/app/types/entity-types';\nimport { UserService } from 'src/app/services/user.service';\nimport { GuildService } from 'src/app/services/guild.service';\n\n@Component({\n  selector: 'app-settings-sidebar',\n  templateUrl: './settings-sidebar.component.html',\n  styleUrls: ['./settings-sidebar.component.css'],\n})\nexport class SettingsSidebarComponent {\n  @Input() public tabType: TabType;\n  @Input('id') public guildId: string;\n\n  public readonly tabs: Tabs = {\n    guild: [\n      {\n        name: 'General', \n        icon: 'lni lni-eye', \n        href: () => `/channels/${this.guildId}/settings`,\n        permission: PermissionTypes.General.MANAGE_GUILD, \n      },\n      // {\n      //   name: 'Bots',\n      //   icon: 'fas fa-robot',\n      //   href: () => `/channels/${this.guildId}/bots`,\n      //   permission: PermissionTypes.General.MANAGE_GUILD, \n      // },\n      {\n        name: 'Invites',\n        icon: 'lni lni-user',\n        href: () => `/channels/${this.guildId}/invites`,\n        permission: PermissionTypes.General.MANAGE_GUILD, \n      },\n      {\n        name: 'Roles',\n        icon: 'fas fa-at',\n        href: () => `/channels/${this.guildId}/roles`,\n        permission: PermissionTypes.General.MANAGE_ROLES, \n      },\n    ],\n    user: [\n      { name: 'Overview', icon: 'lni lni-eye', href: () => '/channels/@me/settings' },\n      { name: 'Account', icon: 'lni lni-lock', href: () => '/channels/@me/settings/account' },\n    ],\n  };\n\n  public get categories() {\n    return Object.keys(this.tabs);\n  }\n\n  public get tabCategory() {\n    return (this.tabType === 'guild')\n      ? this.guildService.getCached(this.guildId)?.name\n      : this.userService.self.username;\n  }\n\n  constructor(\n    private guildService: GuildService,\n    private perms: PermissionsService,\n    private router: Router,\n    private userService: UserService,\n  ) {\n    document.body.onkeyup = ({ key }) => {\n      if (key === 'Escape')\n        this.close();\n    };\n  }\n\n  public async close() {\n    await this.router.navigate([`/channels/${this.guildId ?? '@me'}`]);\n  }\n\n  public canAccess(tab: Tab) {\n    return !tab.permission || this.perms.can(this.guildId, tab.permission);\n  }\n}\n\nexport type TabType = 'guild' | 'user';\nexport interface Tab {\n  icon: string;\n  href: (id: string) => string;\n  name: string;\n  permission?: PermissionTypes.Permission;\n}\ntype Tabs = { [k in TabType]: Tab[] };","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Lean, UserTypes } from '../types/entity-types';\nimport { array } from '../utils/utils';\nimport { HTTPWrapper } from './http-wrapper';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService extends HTTPWrapper<Lean.User> {\n  public self: UserTypes.Self;\n  public endpoint = `${environment.endpoint}/users`;\n  protected _arr: Lean.User[] = [];\n\n  public get friends() {\n    return this.self.friendIds.map(id => this.getCached(id));\n  }\n  public get friendRequests() {\n    const isOutgoing = (u: Lean.User) => u.friendRequestIds.includes(this.self._id);    \n\n    return this._arr\n      .filter(isOutgoing)\n      .concat(this.self.friendRequestIds\n        .map(id => this.getCached(id))\n      )\n      .filter(array.distinctBy('_id'));\n  }\n  \n  public avatarURL(id: string) {\n    return `${this.endpoint}/${id}/avatar`;\n  }\n\n  public getBots(): Promise<Lean.User[]> {\n    return this.http.get(`${this.endpoint}/bots`).toPromise() as any;\n  }\n\n  public async updateSelf(): Promise<Lean.User> {\n    return this.self = await this.http.get(`${this.endpoint}/self`, this.headers).toPromise() as any;\n  }\n\n  public async checkUsername(username: string): Promise<boolean> {\n    return this.http.get(`${this.endpoint}/check-username?value=${username}`).toPromise() as any;\n  }\n  public async checkEmail(email: string): Promise<boolean> {\n    return this.http.get(`${this.endpoint}/check-email?value=${email}`).toPromise() as any;\n  }\n\n  public block(userId: string) {\n    const userIds = this.self.ignored?.userIds.concat(userId)\n      ?? [userId];\n\n    this.ws.emit('USER_UPDATE', {\n      partialUser: {\n        ...this.self,\n        ignored: { ...this.self.ignored, userIds }\n      },\n      key: localStorage.getItem('key'),\n    }, this);\n  }\n\n  public unblock(userId: string) {\n    const index = this.self.ignored?.userIds.indexOf(userId);\n    this.self.ignored?.userIds.splice(index, 1);\n\n    this.ws.emit('USER_UPDATE', {\n      partialUser: {\n        ignored: this.self.ignored,\n      },\n      key: localStorage.getItem('key'),\n    }, this);\n  }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'save-changes',\r\n  templateUrl: './save-changes.component.html',\r\n  styleUrls: ['./save-changes.component.css']\r\n})\r\nexport class SaveChangesComponent implements OnInit {\r\n  @Output() onReset = new EventEmitter();\r\n  @Output() onSave = new EventEmitter();\r\n\r\n  constructor(private snackBar: MatSnackBar) {}\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  reset() {\r\n    this.onReset.emit();\r\n    this.close();\r\n  }\r\n\r\n  save() {\r\n    this.onSave.emit();\r\n    this.close();\r\n  }\r\n\r\n  close() {\r\n    this.snackBar.dismiss();\r\n    \r\n    this.onReset.unsubscribe();\r\n    this.onSave.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"text col-lg-8 col-sm-12 p-lg-1\">\r\n    Careful - You have unsaved changes!\r\n  </div>\r\n  <div class=\"col-lg-4 col-sm-12 d-flex justify-content-center\">\r\n    <button\r\n    (click)=\"reset()\"\r\n      id=\"reset\"\r\n      type=\"submit\" \r\n      class=\"text-danger\"\r\n      mat-button>Reset</button>\r\n    <button\r\n      (click)=\"save()\"\r\n      id=\"save\"\r\n      type=\"submit\"\r\n      mat-button>Save</button>\r\n  </div>\r\n</div>","<div\n  *ngIf=\"!isSelf\"\n  class=\"d-flex justify-content-center float-right\">\n  <button\n    *ngIf=\"!isFriend && !sentRequest\"\n    (click)=\"addFriend()\"\n    matTooltip=\"Add Friend\"\n    class=\"bg-success mr-2\"\n    mat-button>\n    <i class=\"lni lni-user text-dark\"></i>\n    <span></span>\n  </button>\n  <button\n    *ngIf=\"isFriend || sentRequest\"\n    (click)=\"removeFriend()\"\n    [matTooltip]=\"(isFriend) ? 'Remove Friend' : 'Cancel Request'\"\n    class=\"bg-danger mr-2\"\n    mat-button>\n    <i class=\"lni lni-close\"></i>\n    <span></span>\n  </button>\n\n  <button\n    [routerLink]=\"'/channels/@me/' + dmChannel?._id\"\n    [disabled]=\"!isFriend\"\n    matTooltip=\"Message\"\n    class=\"bg-primary\"\n    mat-button>\n    <i class=\"lni lni-bubble\"></i>\n    <span></span>\n  </button>\n</div>\n\n<app-avatar-url\n  [user]=\"data.user\"\n  class=\"mr-2\"></app-avatar-url>\n<h1 mat-dialog-title>{{ data.user.username }}</h1>\n\n<hr>\n\n<div\n  *ngIf=\"mutualGuilds.length\"\n  mat-dialog-content>\n  <h6>Mutual Guilds—{{ mutualGuilds.length }}</h6>\n  <div class=\"ml-4\">\n    <app-guild-icon \n      *ngFor=\"let guild of mutualGuilds; else noMutualGuilds\"\n      class=\"float-left\"\n      style=\"margin-left: -25px;\"\n      [matTooltip]=\"guild.name\"\n      [guild]=\"guild\"></app-guild-icon>\n  </div>\n  <hr>\n</div>\n\n<hr>\n\n<div\n  *ngIf=\"mutualFriends.length\"\n  mat-dialog-content>\n  <h6>Mutual Friends—{{ mutualFriends.length }}</h6>\n  <div class=\"ml-4\">\n    <app-avatar-url \n      *ngFor=\"let friend of mutualFriends\"\n      class=\"float-left cursor-pointer\"\n      size=\"52px\"\n      style=\"margin-left: -25px;\"\n      [matTooltip]=\"friend.username\"\n      [user]=\"friend\"></app-avatar-url>\n  </div>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ChannelService } from 'src/app/services/channel.service';\nimport { LogService } from 'src/app/services/log.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent {\n  public get mutualFriends(): Lean.User[] {\n    const otherFriendIds = this.data.user.friendIds;\n    return this.users.self.friendIds\n      .filter(id => otherFriendIds.includes(id))\n      .map(id => this.users.getCached(id));\n  }\n  public get mutualGuilds(): Lean.Guild[] {\n    const otherGuilds = this.data.user.guilds;    \n    return this.users.self.guilds\n      .filter(ug => otherGuilds.some(og => og._id === ug._id));\n  }\n\n  public get isSelf() {\n    return this.users.self._id === this.data.user._id;\n  }\n  public get isFriend() {\n    return this.users.self.friendIds.includes(this.data.user._id);\n  }\n  public get sentRequest() {\n    return this.users.self.friendRequestIds.includes(this.data.user._id);\n  }\n  public get dmChannel() {\n    return this.channels.getDM(this.data.user._id);\n  }\n\n  constructor(\n    public dialogRef: MatDialogRef<ProfileComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: { user: Lean.User },\n    private channels: ChannelService,\n    private log: LogService,\n    private users: UserService,\n    private ws: WSService,\n  ) {}\n\n  public async addFriend() {\n    await this.ws.emitAsync('ADD_FRIEND', {\n      username: this.data.user.username,\n    }, this);\n  }\n\n  public async removeFriend() {\n    await this.ws.emitAsync('REMOVE_FRIEND', {\n      friendId: this.data.user._id,\n    }, this);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { ModuleConfig } from '../dashboard/components/module-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CanDeactivateDashboard implements CanDeactivate<ModuleConfig> {\r\n  canDeactivate(\r\n    component: ModuleConfig,\r\n    currentRoute: ActivatedRouteSnapshot,\r\n    currentState: RouterStateSnapshot,\r\n    nextState?: RouterStateSnapshot) {\r\n    return !Boolean(component.saveChanges?._openedSnackBarRef);\r\n  }\r\n  \r\n}\r\n","<dashboard-sidebar>\r\n  <dashboard-navbar>\r\n    <i class=\"lni lni-users pr-2\"></i>\r\n    <strong>Friends</strong>\r\n\r\n    <span class=\"mx-3 py-1\"></span>\r\n\r\n    <ul class=\"nav nav-pills float-right\">\r\n      <li class=\"nav-item\">\r\n        <a (click)=\"tab = 'ONLINE'\" \r\n          [class.active]=\"tab === 'ONLINE'\"\r\n          class=\"nav-link active\">\r\n          <span>Online</span>\r\n        </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a (click)=\"tab = 'ALL'\" \r\n          [class.active]=\"tab === 'ALL'\"\r\n          class=\"nav-link\">\r\n          <span>All</span>\r\n        </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a (click)=\"tab = 'PENDING'\" \r\n          [class.active]=\"tab === 'PENDING'\"\r\n          class=\"nav-link\">\r\n          <span>Pending</span>\r\n          <strong\r\n            *ngIf=\"friendsList.users.friendRequests.length\"\r\n            class=\"text-primary\"> {{ friendsList.users.friendRequests.length }}</strong>\r\n        </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a (click)=\"tab = 'BLOCKED'\" \r\n          [class.active]=\"tab === 'BLOCKED'\"\r\n          class=\"nav-link text-warning\">\r\n          <span>Blocked</span>\r\n          <strong\r\n            *ngIf=\"friendsList.blockedUsers.length\"\r\n            class=\"text-primary\"> {{ friendsList.blockedUsers.length }}</strong>\r\n        </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a (click)=\"dialog.addFriend()\"\r\n          class=\"nav-link bg-success text-dark\">Add Friend</a>\r\n      </li>\r\n    </ul>\r\n  </dashboard-navbar>\r\n\r\n  <friends-list\r\n    [tab]=\"tab\"\r\n    #friendsList></friends-list>\r\n</dashboard-sidebar>\r\n","import { Component } from '@angular/core';\r\nimport { DialogService } from 'src/app/services/dialog.service';\r\nimport { TabType } from '../friends-list/friends-list.component';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './me-overview.component.html',\r\n  styleUrls: ['./me-overview.component.css']\r\n})\r\nexport class DashboardOverviewComponent { \r\n  public tab: TabType = 'ONLINE';\r\n\r\n  constructor(public dialog: DialogService) {\r\n    document.title = 'Accord - Dashboard';\r\n\r\n    this.tab = 'ONLINE';\r\n  }\r\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Lean } from '../types/entity-types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InviteService {\n  private endpoint = `${environment.rootEndpoint}/invites`;\n\n  private get headers() {\n    return {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('key')}`,\n      }\n    }\n  }\n\n  constructor(\n    private http: HttpClient,\n  ) {}\n\n  public fetch(id: string): Promise<Lean.Invite> {\n    return this.http.get(`${this.endpoint}/${id}`, this.headers).toPromise() as any;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Lean, PermissionTypes } from '../types/entity-types';\nimport { GuildService } from './guild.service';\nimport { UserService } from './user.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PermissionsService {\n  constructor(\n    private guildService: GuildService,\n    private userService: UserService,\n  ) {}\n\n  public can(guildId: string, permission: PermissionTypes.PermissionString) {\n    const guild = this.guildService.getCached(guildId);\n    if (!guild)\n      throw new TypeError('Guild Not Found');\n\n    const member = this.guildService.getSelfMember(guildId);\n      \n    return guild.ownerId == member?.userId\n      || this.hasPermission(\n          this.getTotalPerms(guild, member),\n          PermissionTypes.All[permission] as number\n        );\n  }\n  public getTotalPerms(guild: Lean.Guild, member: Lean.GuildMember) {\n    return guild.roles\n      .filter(r => member?.roleIds.includes(r._id))\n      .reduce((acc, value) => value.permissions | acc, 0);\n  }\n  public hasPermission(totalPerms: number, permission: number) {\n    return Boolean(totalPerms & permission)\n      || Boolean(totalPerms & PermissionTypes.General.ADMINISTRATOR);\n  }\n\n  public canManage(guildId: string, userId: string, permission: PermissionTypes.PermissionString) {\n    const userMember = this.guildService.getMember(guildId, userId);\n    if (!userMember) return false;\n\n    return this.can(guildId, permission)\n      && (this.userService.self._id === userMember.userId\n      || (this.isHigher(guildId, userMember.roleIds)));\n  }\n\n  public canPunish(guildId: string, userId: string, permission: PermissionTypes.PermissionString) {\n    return this.userService.self._id !== userId\n      && this.can(guildId, permission)\n      && this.canManage(guildId, userId, permission);\n  }\n\n  public isHigher(guildId: string, roleIds: string[]) {\n    const selfMember = this.guildService.getSelfMember(guildId);\n    const guild = this.guildService.getCached(guildId);\n\n    const joinedRoles = roleIds.concat(selfMember.roleIds);\n    const roles = guild.roles.filter(r => joinedRoles.includes(r._id));\n\n    const highestRole = roles[roles.length - 1];\n    \n    return selfMember.userId === guild.ownerId\n      || (selfMember.roleIds.includes(highestRole._id)\n      && !roleIds.includes(highestRole._id));\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Lean } from '../types/entity-types';\nimport { HTTPWrapper } from './http-wrapper';\nimport { WSService } from './ws.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService extends HTTPWrapper<Lean.Message> {\n  protected readonly endpoint = environment.endpoint + '/channels';\n  private cached = new Map<string, Lean.Message[]>();\n  public self = undefined;\n\n  protected _arr: Lean.Message[];\n  public get messages(): Lean.Message[] {\n    return this._arr = Array\n      .from(this.cached.values())\n      .flat();\n  }\n\n  constructor(\n    http: HttpClient,\n    ws: WSService,\n  ) { super(http, ws); }\n\n  public async getAllAsync(channelId: string): Promise<Lean.Message[]> {    \n    return this.cached.get(channelId)\n      ?? await this.overrideFetchAll(channelId);\n  }\n\n  public getAllCached(channelId: string): Lean.Message[] {\n    return this.cached.get(channelId)\n      ?? this.cached\n        .set(channelId, [])\n        .get(channelId);\n  }\n\n  // TODO: eventually use override keyword\n  public overrideAdd(messages: Lean.Message[]): Lean.Message[] {    \n    const channelId = messages[0]?.channelId;\n    if (!channelId) return [];\n\n    const cached = this.getAllCached(channelId);\n    cached.push(...messages);\n    return cached;\n  }\n\n  // TODO: eventually use override keyword\n  public async overrideFetchAll(channelId: string, options?: LazyLoadOptions): Promise<Lean.Message[]> {\n    const query = `?start=${options?.start ?? 0}&end=${options?.end ?? 25}`;\n    const messages = await this.http\n      .get(`${this.endpoint}/${channelId}/messages${query}`, this.headers)\n      .toPromise() as any;\n    \n    return this.overrideAdd(messages);\n  }\n}\n\ninterface LazyLoadOptions { start: number, end: number }\n","import { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { SaveChangesComponent } from './save-changes/save-changes.component';\r\nimport { OnDestroy, Directive } from '@angular/core';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nimport { Subscription } from 'rxjs';\r\nimport { WSService } from '../../services/ws.service';\r\nimport { LogService } from '../../services/log.service';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Lean, UserTypes } from 'src/app/types/entity-types';\r\n\r\n@Directive()\r\nexport abstract class UserConfig implements OnDestroy {\r\n  public form: FormGroup;\r\n  public user: UserTypes.Self;\r\n  public originalUser: UserTypes.Self;\r\n\r\n  private saveChanges$: Subscription;  \r\n  private valueChanges$: Subscription;  \r\n  \r\n  constructor(\r\n    protected userService: UserService,\r\n    protected route: ActivatedRoute,\r\n    public saveChanges: MatSnackBar,\r\n    protected ws: WSService,\r\n    protected log: LogService,\r\n    protected router: Router,\r\n  ) {}\r\n\r\n  /**\r\n   * Load all required data for the form, and hook events.\r\n   */\r\n  public async init() {\r\n    await this.userService.init();\r\n    \r\n    this.user = this.userService.self;\r\n    this.originalUser = JSON.parse(JSON.stringify(this.user));\r\n    \r\n    await this.resetForm();\r\n\r\n    this.valueChanges$ = this.form.valueChanges\r\n      .subscribe(() => this.openSaveChanges()); \r\n  }\r\n\r\n  private async resetForm() {   \r\n    this.user = JSON.parse(JSON.stringify(this.originalUser));   \r\n    this.form = await this.buildForm(this.user);\r\n  }\r\n\r\n  /**\r\n   * Build the form to be used.\r\n   * Called when on form init.\r\n   */\r\n  public abstract buildForm(user: Lean.User): FormGroup | Promise<FormGroup>;\r\n  \r\n  public openSaveChanges() {    \r\n    const snackBarRef = this.saveChanges._openedSnackBarRef;   \r\n    if (this.form.invalid || snackBarRef) return;\r\n\r\n    this.saveChanges$ = this.saveChanges\r\n      .openFromComponent(SaveChangesComponent)\r\n      .afterOpened()\r\n      .subscribe(() => {\r\n        const component: SaveChangesComponent = this.saveChanges._openedSnackBarRef.instance;\r\n        component.onSave.subscribe(() => this.submit());\r\n        component.onReset.subscribe(() => this.reset());\r\n      });    \r\n  }\r\n\r\n  /**\r\n   * Clean up subscriptions - to prevent memory leak.\r\n   */  \r\n  public ngOnDestroy() {    \r\n    this.valueChanges$?.unsubscribe();\r\n    this.saveChanges$?.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Send the form data to the API.\r\n   */\r\n  public async submit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.userService.self = Object.assign(this.user, this.form.value);\r\n\r\n    this.ws.emitAsync('USER_UPDATE', {\r\n      key: localStorage.getItem('key'),\r\n      partialUser: this.form.value,\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * Reset form values, and rebuild form.\r\n   */\r\n  public async reset() {\r\n    await this.resetForm();\r\n    this.user = JSON.parse(JSON.stringify(this.originalUser));\r\n    \r\n    this.form.valueChanges\r\n      .subscribe(() => this.openSaveChanges()); \r\n  }\r\n\r\n  // input events\r\n\r\n  public add(event: MatChipInputEvent, array: any[]) {    \r\n    const { value, input } = event;\r\n  \r\n    if ((value || '').trim())\r\n      array.push(value.trim());\r\n  \r\n    if (input) \r\n      input.value = '';\r\n\r\n    this.openSaveChanges();\r\n  }\r\n  \r\n  public remove(item: any, array: any[]) {\r\n    const index = array.indexOf(item);\r\n    if (index >= 0)\r\n      array.splice(index, 1);\r\n    \r\n    this.openSaveChanges();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.component.html',\r\n  styleUrls: ['./not-found.component.css']\r\n})\r\nexport class NotFoundComponent {}\r\n","<div class=\"stars\">\r\n  <div class=\"central-body\">\r\n    <h1 class=\"text-light\">404</h1>\r\n    <p class=\"text-light\">Looks like you are lost in space...</p>\r\n    <a class=\"btn-go-home\" routerLink=\"/\">RETURN HOME</a>\r\n  </div>\r\n  <div class=\"objects\">\r\n    <img class=\"object_rocket\" src=\"/assets/img/rocket.svg\" width=\"40px\">\r\n    <div class=\"earth-moon\">\r\n      <img class=\"object_earth\" src=\"/assets/img/earth.svg\" width=\"100px\">\r\n      <img class=\"object_moon\" src=\"/assets/img/moon.svg\" width=\"80px\">\r\n      <img class=\"object_mars\" src=\"/assets/img/mars.svg\">\r\n    </div>\r\n    <div class=\"box_astronaut\">\r\n      <img class=\"object_astronaut\" src=\"/assets/img/2pg-plus-avatar-transparent.png\" width=\"140px\">\r\n    </div>\r\n  </div>\r\n  <div class=\"glowing_stars\">\r\n    <div class=\"star\"></div>\r\n    <div class=\"star\"></div>\r\n    <div class=\"star\"></div>\r\n    <div class=\"star\"></div>\r\n    <div class=\"star\"></div>\r\n  </div>\r\n</div>\r\n<footer>\r\n  <p class=\"float-right text-muted\"><strong>SVGs</strong>: Saleh Riaz + photo3idea_studio from www.flaticon.com</p>\r\n</footer>","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'durationString'\r\n})\r\nexport class DurationStringPipe implements PipeTransform {\r\n\r\n  transform(value: number | string) {\r\n    const seconds = Number(value);\r\n    return `${Math.floor(seconds / 60)}:${Math.floor(seconds % 60).toString().padStart(2, '0')}`;\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { expandCollapse } from './zippy.component.animations';\r\n\r\n@Component({\r\n  selector: 'zippy',\r\n  templateUrl: './zippy.component.html',\r\n  styleUrls: ['./zippy.component.css'],\r\n  animations: [ expandCollapse ]\r\n})\r\nexport class ZippyComponent {\r\n  @Input() public title = 'Title';\r\n\r\n  public expanded = false;\r\n\r\n  public toggle = () => this.expanded = !this.expanded;\r\n}\r\n","<ng-container>\r\n  <div class=\"zippy\">\r\n    <div class=\"zippy-heading\"\r\n      [class.expanded]=\"expanded\" \r\n      (click)=\"toggle()\">\r\n      {{ title }}\r\n      <span>\r\n        <i class=\"float-right lni lni-down-chevron\"></i>\r\n      </span>\r\n    </div>\r\n    <div\r\n      class=\"zippy-body\"\r\n      [@expandCollapse]=\"(expanded) ? 'expanded' : 'collapsed'\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</ng-container>","import { Component, NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\r\nimport { AuthComponent } from './authentication/auth/auth.component';\r\nimport { LoginComponent } from './authentication/login/login.component';\r\nimport { LogoutComponent } from './authentication/logout/logout.component';\r\nimport { DashboardOverviewComponent } from './dashboard/me/me-overview/me-overview.component';\r\nimport { GuildOverviewComponent } from './dashboard/guilds/guild-overview/guild-overview.component';\r\nimport { DashboardAuthGuard } from './guards/dashboard-auth.guard';\r\nimport { GuildAuthGuard } from './guards/guild-auth.guard';\r\nimport { CanDeactivateDashboard } from './guards/can-deactivate-dashboard.guard';\r\nimport { SignUpComponent } from './authentication/sign-up/sign-up.component';\r\nimport { TextChannelComponent } from './dashboard/guilds/text-channel/text-channel.component';\r\nimport { GuildSettingsComponent } from './dashboard/guilds/guild-settings/overview/guild-settings.component';\r\nimport { InvitesComponent } from './dashboard/guilds/guild-settings/invites/invites.component';\r\nimport { RolesComponent } from './dashboard/guilds/guild-settings/roles/roles.component';\r\nimport { DMChannelAuthGuard } from './guards/dmchannel-auth.guard';\r\nimport { DMComponent } from './dashboard/me/dmchannel/dm.component';\r\nimport { UserSettingsComponent } from './dashboard/me/user-settings/user-settings.component';\r\nimport { DevelopersComponent } from './pages/developers/developers.component';\r\nimport { ApplicationComponent } from './pages/developers/application/application.component';\r\nimport { BotUserComponent } from './pages/developers/bot-user/bot-user.component';\r\nimport { DevelopersAuthGuard } from './guards/developers-auth.guard';\r\nimport { VerifyComponent } from './authentication/verify/verify.component';\r\nimport { UserAccountComponent } from './dashboard/me/user-account/user-account.component';\r\nimport { InviteComponent } from './pages/invite/invite.component';\r\nimport { externalRedirect } from './utils/external-redirect';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ComingSoonComponent } from './utils/coming-soon/coming-soon.component';\r\nimport { WhyComponent } from './pages/why/why.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent, },\r\n  { path: 'auth/verify', component: VerifyComponent, },\r\n  { path: 'auth', component: AuthComponent, },\r\n  { path: 'changelog', component: externalRedirect(`${environment.docsURL}/general/changelog`), },\r\n  { path: 'docs', component: externalRedirect(`${environment.docsURL}`), },\r\n  { path: 'privacy', component: externalRedirect(`${environment.docsURL}/legal/privacy`), },\r\n  { path: 'terms', component: externalRedirect(`${environment.docsURL}/legal/terms`), },\r\n  {\r\n    path: 'channels/@me',\r\n    component: DashboardOverviewComponent,\r\n    canActivate: [DashboardAuthGuard],\r\n  },\r\n  {\r\n    path: 'channels/@me/settings',\r\n    component: UserSettingsComponent,\r\n    canActivate: [DashboardAuthGuard],\r\n  },\r\n  {\r\n    path: 'channels/@me/settings/account',\r\n    component: UserAccountComponent,\r\n    canActivate: [DashboardAuthGuard],\r\n  },\r\n  {\r\n    path: 'channels/@me/:channelId',\r\n    component: DMComponent,\r\n    canActivate: [DashboardAuthGuard, DMChannelAuthGuard],\r\n  },\r\n  {\r\n    path: 'channels/:guildId',\r\n    component: GuildOverviewComponent,\r\n    canActivate: [DashboardAuthGuard, GuildAuthGuard],\r\n    canDeactivate: [CanDeactivateDashboard],\r\n  },\r\n  {\r\n    path: 'channels/:guildId/settings',\r\n    component: GuildSettingsComponent,\r\n    canActivate: [DashboardAuthGuard, GuildAuthGuard],\r\n    canDeactivate: [CanDeactivateDashboard],\r\n  },\r\n  {\r\n    path: 'channels/:guildId/roles',\r\n    component: RolesComponent,\r\n    canActivate: [DashboardAuthGuard, GuildAuthGuard],\r\n    canDeactivate: [CanDeactivateDashboard],\r\n  },\r\n  {\r\n    path: 'channels/:guildId/bots',\r\n    component: ComingSoonComponent,\r\n    // component: BotListComponent,\r\n    // canActivate: [DashboardAuthGuard, GuildAuthGuard],\r\n    // canDeactivate: [CanDeactivateDashboard],\r\n  },\r\n  {\r\n    path: 'channels/:guildId/invites',\r\n    component: InvitesComponent,\r\n    canActivate: [DashboardAuthGuard, GuildAuthGuard],\r\n    canDeactivate: [CanDeactivateDashboard],\r\n  },\r\n  {\r\n    path: 'channels/:guildId/:channelId',\r\n    component: GuildOverviewComponent,\r\n    canActivate: [DashboardAuthGuard, GuildAuthGuard],\r\n    canDeactivate: [CanDeactivateDashboard],\r\n  },\r\n  { path: 'developers', component: ComingSoonComponent, },\r\n  {\r\n    path: `developers/applications/:id/user`,\r\n    canActivate: [DevelopersAuthGuard],\r\n    component: BotUserComponent,\r\n  },\r\n  {\r\n    path: `developers/applications/:id`,\r\n    canActivate: [DevelopersAuthGuard],\r\n    component: ApplicationComponent,\r\n  },\r\n  { path: `developers/applications`, redirectTo: 'developers', },\r\n  {\r\n    path: 'developers',\r\n    canActivate: [DevelopersAuthGuard],\r\n    component: DevelopersComponent,\r\n  },\r\n  { path: 'invite/:id', component: InviteComponent, },\r\n  { path: 'login', component: LoginComponent, },\r\n  { path: 'logout', component: LogoutComponent, },\r\n  { path: 'sign-up', component: SignUpComponent, },\r\n  { path: '**', component: NotFoundComponent, },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {\r\n    initialNavigation: 'enabled',\r\n    relativeLinkResolution: 'legacy',\r\n  })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { UserService } from '../services/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DevelopersAuthGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private userService: UserService,\n  ) {}\n\n  public async canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot) {\n    await this.userService.init();\n\n    if (!this.userService.self)\n      this.router.navigate(['/login'], {\n        queryParams: { redirect: route.url },\n      });\n    return true;\n  }  \n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-submarine',\n  templateUrl: './submarine.component.html',\n  styleUrls: ['./submarine.component.css']\n})\nexport class SubmarineComponent {}\n","<!-- credit: https://codepen.io/akhil_001/details/gQwJPJ -->\n<div class=\"seaContainer\">\n  <div class=\"submarine__container\">\n    <div class=\"submarine__sail\">\n      <div class=\"submarine__sail-shadow dark1\">\n      </div>\n      <div class=\"submarine__sail-shadow light1\"></div>\n      <div class=\"submarine__sail-shadow dark2\"></div>\n    </div>\n    <div class=\"submarine__body\">\n      <div class=\"submarine__window one\">\n\n      </div>\n      <div class=\"submarine__window two\">\n\n      </div>\n      <div class=\"submarine__shadow-dark\"></div>\n      <div class=\"submarine__shadow-light\"></div>\n      <div class=\"submarine__shadow-arcLight\"></div>\n    </div>\n    <div class=\"bubbles__container\">\n      <span class=\"bubbles bubble-1\"></span>\n      <span class=\"bubbles bubble-2\"></span>\n      <span class=\"bubbles bubble-3\"></span>\n      <span class=\"bubbles bubble-4\"></span>\n    </div>\n    <div class=\"submarine__propeller\">\n      <div class=\"propeller__perspective\">\n      <div class=\"submarine__propeller-parts darkOne\"></div>\n      <div class=\"submarine__propeller-parts lightOne\"></div>\n      </div>        \n    </div>\n  </div>\n</div>","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'waves',\r\n  templateUrl: './waves.component.html',\r\n  styleUrls: ['./waves.component.css']\r\n})\r\nexport class WavesComponent {\r\n  @Input() inverted = false;\r\n  @Input() color = 'var(--background-secondary)';\r\n}\r\n","<svg\r\n  class=\"waves\"\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n  viewBox=\"0 24 150 28\"\r\n  preserveAspectRatio=\"none\"\r\n  shape-rendering=\"auto\"\r\n  [style.transform]=\"inverted ? 'rotate(180deg)' : ''\">\r\n  <defs>\r\n    <path [attr.fill]=\"color\" id=\"gentle-wave\" d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\" />\r\n  </defs>\r\n  <g class=\"parallax\">\r\n    <use id=\"wave1\" xlink:href=\"#gentle-wave\" x=\"48\" y=\"0\" />\r\n    <use id=\"wave2\" xlink:href=\"#gentle-wave\" x=\"48\" y=\"3\" />\r\n    <use id=\"wave3\" xlink:href=\"#gentle-wave\" x=\"48\" y=\"5\" />\r\n    <use id=\"wave4\" xlink:href=\"#gentle-wave\" x=\"48\" y=\"7\" />\r\n  </g>\r\n</svg>","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  platformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n});\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { WSService } from 'src/app/services/ws.service';\nimport { Lean } from 'src/app/types/entity-types';\n\n@Component({\n  selector: 'app-create-invite',\n  templateUrl: './create-invite.component.html',\n  styleUrls: ['./create-invite.component.css']\n})\nexport class CreateInviteComponent implements OnInit {\n  public invite: Lean.Invite;\n  public recentlyUpdated = false;\n\n  public form = new FormGroup({\n    maxUses: new FormControl('', [ Validators.required, Validators.min(1), Validators.max(1000) ]),\n    expiresAt: new FormControl('', [ Validators.required ]),\n  });\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateInviteComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: {\n      guild: Lean.Guild,\n    },\n    private ws: WSService,\n  ) {}\n\n  public ngOnInit() {\n    this.ws.emit('INVITE_CREATE', {\n      guildId: this.data.guild._id,\n      options: this.form.value,\n    }, this);\n\n    this.ws.on('INVITE_CREATE', ({ invite }) => this.invite = invite, this);\n\n    this.form.valueChanges\n      .subscribe(() => this.recentlyUpdated = this.form.valid);\n  }\n\n  public onNoClick() {\n    this.dialogRef.close();\n  }\n\n  public updateInvite() {\n    if (this.form.invalid) return;\n\n    this.recentlyUpdated = true;\n\n    this.ws.emit('INVITE_DELETE', { inviteCode: this.invite._id }, this);\n    this.ws.emit('INVITE_CREATE', {\n      guildId: this.data.guild._id,\n      options: this.form.value,\n    }, this);    \n  }\n\n  public copyToClipboard() {\n    navigator.clipboard.writeText(this.invite?._id);\n  }\n}\n","<h1 mat-dialog-title>Invite Friends to {{ data.guild.name }}</h1>\n\n<div class=\"text-center\" mat-dialog-content>\n  <mat-form-field appearance=\"outline\" class=\"float-left\">\n    <mat-label>Invite Link</mat-label>\n    <input type=\"text\"\n      [value]=\"invite?._id\" matInput>\n  </mat-form-field>\n\n  <div class=\"ml-3 float-left\">\n    <button\n      (click)=\"copyToClipboard()\"\n      matTooltip=\"Copy\"\n      class=\"btn p-3 mt-1 bg-primary\"\n      color=\"primary\">\n      <i class=\"lni lni-clipboard\"></i>\n    </button>\n  </div>\n</div>\n\n<hr>\n\n<a (click)=\"showOptions.value = true\"\n  *ngIf=\"!showOptions.value\"\n  class=\"cursor-pointer\">Show Options</a>\n\n<input type=\"hidden\" #showOptions>\n\n<div *ngIf=\"showOptions.value\">\n  <h6 class=\"text-center\">Options</h6>\n  <form #f=\"ngForm\" [formGroup]=\"form\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Max Uses</mat-label>\n      <input\n        type=\"number\"\n        formControlName=\"maxUses\" matInput>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" class=\"ml-2\">\n      <mat-label>Expires At</mat-label>\n      <input\n        type=\"datetime-local\"\n        formControlName=\"expiresAt\" matInput>\n    </mat-form-field>\n  </form>\n\n  <div class=\"d-flex justify-content-center\" mat-dialog-actions>\n    <button\n      [disabled]=\"!recentlyUpdated\"\n      class=\"bg-success text-dark\"\n      matTooltip=\"Update\"\n      (click)=\"updateInvite()\"\n      mat-button><i class=\"lni lni-save text-dark\"></i></button>\n  </div>\n</div>"]}